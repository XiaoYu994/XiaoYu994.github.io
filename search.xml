<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/vue3/"/>
      <url>/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3"><a class="header-anchor" href="#vue3"></a><a href="https://cn.vuejs.org/">vue3</a></h1><blockquote><p>采用组合式API</p><p>底层构建工具使用vite 响应快 create-vue成为新的脚手架工具</p><p>状态管理工具使用Pinia</p><p>pnpm create vue 创建项目</p></blockquote><h2 id="优势"><a class="header-anchor" href="#优势"></a>优势</h2><ol><li>更容易维护 更好的TS支持</li><li>更快的速度</li><li>更小的体积  按需引入</li><li>更优的数据响应 Proxy</li></ol><h2 id="目录结构"><a class="header-anchor" href="#目录结构"></a>目录结构</h2><h2 id="代码编写"><a class="header-anchor" href="#代码编写"></a>代码编写</h2><ol><li><p>js 文件写在最上面 在script 中加上setup 直接编写组合式API，setup的执行时机在beforeCreate生命周期函数之前</p></li><li><p><strong>没有了this选项</strong>，获取不到this</p></li><li><p>reactive和ref函数</p><ul><li>都是用函数调用的方式生成响应式数据</li><li>reactive不能处理简单类型的数据</li><li>ref定义的数据必须通过.vaule访问和修改</li><li>re函数内部基于reactive函数实现</li></ul></li><li><p>pnpm create vue 创建项目</p></li><li><p>在setup函数中写的数据和方法需要在末尾以对象的方式return，才能给模版使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> message = <span class="string">&#x27;this is message&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">logMessage</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 必须return才可以</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message,</span><br><span class="line">        logMessage</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>script标签添加 setup标记，不需要再写导出语句，默认会添加导出语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">&#x27;this is message&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">logMessage</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="计算属性"><a class="header-anchor" href="#计算属性"></a>计算属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 原始数据</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始数据</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="title function_">ref</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"><span class="comment">// 计算属性list</span></span><br><span class="line"><span class="keyword">const</span> filterList = <span class="title function_">computed</span>(<span class="function"><span class="params">item</span>=&gt;</span>item &gt; <span class="number">2</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="监听"><a class="header-anchor" href="#监听"></a>监听</h3><blockquote><p>侦听一个或者多个数据的变化，数据变化时执行回调函数，俩个额外参数 immediate控制立刻执行，deep开启深度侦听</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="comment">// 1. 导入watch</span></span><br><span class="line">  <span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;cp&#x27;</span>)</span><br><span class="line">  <span class="comment">// 2. 调用watch 侦听变化</span></span><br><span class="line">  <span class="title function_">watch</span>([count, name], <span class="function">(<span class="params">[newCount, newName],[oldCount,oldName]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count或者name变化了，[newCount, newName],[oldCount,oldName])</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>immediate 在侦听器创建时立即出发回调，响应式数据变化之后继续执行回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="comment">// 1. 导入watch</span></span><br><span class="line">  <span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 2. 调用watch 侦听变化</span></span><br><span class="line">  <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count发生了变化，老值为<span class="subst">$&#123;oldValue&#125;</span>,新值为<span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep</strong></p><h2 id="生命周期函数"><a class="header-anchor" href="#生命周期函数"></a>生命周期函数</h2><h3 id="选项式对比组合式"><a class="header-anchor" href="#选项式对比组合式"></a>选项式对比组合式</h3><h3 id="基本使用"><a class="header-anchor" href="#基本使用"></a>基本使用</h3><blockquote><ol><li>导入生命周期函数</li><li>执行生命周期函数，传入回调</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;scirpt setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 自定义逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>生命周期函数执行多次的时候，会按照顺序依次执行</strong>,可以定义多个同一时期的生命周期函数</p><h2 id="父子通信"><a class="header-anchor" href="#父子通信"></a>父子通信</h2><blockquote><ol><li>父组件中给子组件绑定属性</li><li>子组件内部通过props选项接收数据</li><li>父组件中给子组件标签通过@绑定事件</li><li>子组件内部通过 emit 方法触发事件</li></ol></blockquote><h2 id="模板引用"><a class="header-anchor" href="#模板引用"></a>模板引用</h2><blockquote><p>通过 ref标识 获取真实的 dom对象或者组件实例对象</p><ol><li>调用ref函数生成一个ref对象</li><li>通过ref标识绑定ref对象到标签</li></ol></blockquote><img src="/vue3/QQ_1737694759034.png"  alt="QQ_1737694759034" style="zoom:50%;" /><h3 id="defineExpose"><a class="header-anchor" href="#defineExpose"></a>defineExpose</h3><blockquote><p>默认情况下在 <script setup>语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问</p></blockquote><h2 id="provide和inject"><a class="header-anchor" href="#provide和inject"></a>provide和inject</h2><blockquote><p>顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信</p><ol><li>顶层组件通过 <code>provide</code> 函数提供数据</li><li>底层组件通过 <code>inject</code> 函数提供数据</li></ol></blockquote><p>在调用provide函数时，第二个参数设置为ref对象</p><h2 id="vue3-3新特性"><a class="header-anchor" href="#vue3-3新特性"></a>vue3.3新特性</h2><ol><li><p>定义组件的 name 或其他自定义的属性 使用defineOptions</p></li><li><p>defineModel 在vue3中v-model相当于 :modelValue和@update:modelValue 事件</p><p>生效需要配置vite.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(&#123;</span><br><span class="line">      <span class="attr">script</span>: &#123;</span><br><span class="line">        <span class="attr">defineModel</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="vue3状态管理Pinia"><a class="header-anchor" href="#vue3状态管理Pinia"></a>vue3状态管理Pinia</h2><blockquote><p>Pinia 是 Vue 的专属的最新状态管理库 ，是 Vuex 状态管理工具的替代品</p></blockquote><h3 id="优势-v2"><a class="header-anchor" href="#优势-v2"></a>优势</h3><ul><li>提供更加简单的API(去掉了mutation)</li><li>提供符合组合式API的风格</li><li>每个store都是一个独立的模块</li><li>配合TS更加友好，提供可靠的类型判断</li></ul><h3 id="具体使用"><a class="header-anchor" href="#具体使用"></a>具体使用</h3><ol><li><p>定义store</p></li><li><p>getters实现</p><p>getters 直接使用 computed函数 进行模拟, 组件中需要使用需要把 getters return出去</p></li><li><p>action异步实现</p></li><li><p>storeToRefs工具函数</p><p>辅助保持数据（state + getter）的响应式解构</p><p><strong>直接结构和导致响应式丢失，视图不在更新</strong></p></li></ol><h3 id="持久化插件"><a class="header-anchor" href="#持久化插件"></a>持久化插件</h3><p>官方文档：https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</p><ol><li>安装插件 pinia-plugin-persistedstate</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 main.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>().<span class="title function_">use</span>(persist))</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 store/counter.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>其他配置，看官网文档即可</li></ol><h2 id="ESLint-prettier-配置代码风格"><a class="header-anchor" href="#ESLint-prettier-配置代码风格"></a>ESLint &amp; prettier 配置代码风格</h2><ol><li><strong>安装了插件 ESlint，开启保存自动修复</strong></li><li><strong>禁用了插件 Prettier，并关闭保存自动格式化</strong></li><li><strong>配置.eslintrc.cjs 文件  ESLint9支持扁平化配置</strong></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/vue2%E6%99%BA%E6%85%A7%E5%95%86%E5%9F%8E/"/>
      <url>/vue2%E6%99%BA%E6%85%A7%E5%95%86%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="基于vue2实现的智慧商城项目"><a class="header-anchor" href="#基于vue2实现的智慧商城项目"></a>基于vue2实现的智慧商城项目</h1><blockquote><p>前言：随着各种框架技术的学习，我愈发的感觉怀疑学习的意义，总会有更便捷的技术，计算机这一行业更新迭代的太快了，当我们掌握的语言被淘汰的时候，我们还能干什么呢，ai真的太厉害了，或许以后需要程序员，但只需要一小部分程序员就可以做掉今天很多人干的活，那我们这些低学历的人学习这门专业的意义何在，也许AI 只是一个工具，就像你使用的 Vue、Vant 等框架一样，是帮助你更高效地实现想法的助手。但以后需要你来使用这些工具吗？2025-1-16</p></blockquote><h2 id="项目的准备工作"><a class="header-anchor" href="#项目的准备工作"></a>项目的准备工作</h2><ol><li><a href="https://apifox.com/apidoc/shared-dead2bca-2509-43dc-a4de-ede5218058a1">wiki说明 - 黑马程序员-智慧商城H5</a>  接口文档地址</li><li><a href="https://youzan.github.io/vant/v2/#/zh-CN/home">Vant 2 - 轻量、可靠的移动端组件库</a> vant2组件</li><li>创建项目 vue create</li></ol><h2 id="项目结构"><a class="header-anchor" href="#项目结构"></a>项目结构</h2><img src="/vue2智慧商城/QQ_1737084161670.png"  alt="QQ_1737084161670" style="zoom:33%;" /><p>​在进行前端项目开发的时候也是一样要进行分包操作，不断的解耦使项目更便于维护和开发所以在开发的时候要根据给出的项目原型去做分类规划，这样才能使后面开发的时候更便捷，在搭建这个项目的时候首先要将最基本的架子搭好，然后在这个架子的基础上不断地去完善，填充需要的功能</p><h3 id="一级路由和二级路由"><a class="header-anchor" href="#一级路由和二级路由"></a>一级路由和二级路由</h3><p>一级路由的出口就是App.vue，二级路由是在一级路由中展示 在下面这个例子中就是这样，下面展示的导航栏所对应转跳的路径就是上面二级路由出口要展示的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;!-- 二级路由出口：二级组件展示的位置 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">van-tabbar</span> <span class="attr">route</span> <span class="attr">active-color</span>=<span class="string">&quot;#ee0a24&quot;</span> <span class="attr">inactive-color</span>=<span class="string">&quot;#000&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;wap-home-o&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">&quot;/category&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;apps-o&quot;</span>&gt;</span>分类页<span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">&quot;/cart&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;shopping-cart-o&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">van-tabbar-item</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;user-o&quot;</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">van-tabbar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">van-tabbar</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="路由的配置"><a class="header-anchor" href="#路由的配置"></a>路由的配置</h3><p>配置路由用于转跳页面，转跳路由有两种形式，一种是在DOM元素中转跳<code>$router.push</code>这种不需要带this，在js中转跳<code>this.$router.push</code>,希望一访问页面就跳转到首页，路由配置如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/LayOut.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/layout/home.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/layout/category.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;cart&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/layout/cart.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/layout/user.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="对要使用的组件库进行按需配置"><a class="header-anchor" href="#对要使用的组件库进行按需配置"></a>对要使用的组件库进行按需配置</h3><p>将组件库全部导入太占用内存，用到时候组件就导入什么组件</p><ol><li><p>进行安装所需组件库和插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vant@latest-v2</span><br><span class="line">yarn add babel-plugin-import -D</span><br></pre></td></tr></table></figure></li><li><p>在插件的配置文件中配置 <code>babel.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">libraryName</span>: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">      <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">      <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="string">&#x27;vant&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将按需导入的步骤抽离到<code>utils</code>包下,并进行按需导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Tab</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tab</span>)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/utils/vant-ui&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="vw适配"><a class="header-anchor" href="#vw适配"></a>vw适配</h3><blockquote><p>进行不同浏览器之间的页面窗口适配</p></blockquote><ol><li><p><a href="https://youzan.github.io/vant/v2/#/zh-CN/advanced-usage">Vant 2 - 轻量、可靠的移动端组件库</a>  官方文档</p></li><li><p>下载插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-px-to-viewport@<span class="number">1.1</span><span class="number">.1</span> -D</span><br></pre></td></tr></table></figure></li><li><p>项目根目录新建 postcss的配置文件<code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">375</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>为什么设置为375?</p><ul><li><p>vant组件的宽度就是375</p></li><li><p>该项目的设计稿也是按照375做的</p></li><li><p><a href="(https://zhuanlan.zhihu.com/p/366664788)">设计稿不安这个值怎么办</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">&#123; file &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> designWidth = file.<span class="property">dirname</span>.<span class="title function_">includes</span>(<span class="string">&quot;node_modules/vant&quot;</span>) ? <span class="number">375</span> : <span class="number">750</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">      <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">viewportWidth</span>: designWidth,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="模块的封装"><a class="header-anchor" href="#模块的封装"></a>模块的封装</h2><h3 id="request模块-axios封装"><a class="header-anchor" href="#request模块-axios封装"></a>request模块 - axios封装</h3><p>对 axios 进行基本的<strong>二次封装</strong>, 单独封装到一个模块中，并进行<strong>一些配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 封装axios用于发送请求 */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的axios实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 请求的基础路径</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://smart-shop.itheima.net/index.php?s=/api&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="attr">platform</span>: <span class="string">&#x27;H5&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setLoading&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> token = store.<span class="property">getters</span>.<span class="property">token</span></span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&#x27;Access-Token&#x27;</span>] = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setLoading&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">     <span class="comment">// 对响应数据做点什么 (默认axios会多包装一层data，需要响应拦截器中处理一下)</span></span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// vuex中定义的方法 改变用户的登录状态</span></span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setLoading&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setLoading&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">     <span class="comment">// ?代表后面的属性为可选</span></span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">fail</span>(error.<span class="property">response</span>?.<span class="property">data</span>?.<span class="property">message</span> || <span class="string">&#x27;服务器异常&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="项目的开发"><a class="header-anchor" href="#项目的开发"></a>项目的开发</h2><h3 id="首页的开发"><a class="header-anchor" href="#首页的开发"></a>首页的开发</h3><ol><li>封装请求到api文件下 不同页面的请求要放在不同的js文件夹下</li><li>页面中调用api 得到数据</li><li>利用create生命周期函数在页面加载的时候就获得数据，并将数据渲染到静态结构中</li><li>封装商品组件，相当于展示当前商品的卡片,通过组件通信的方式传递需要渲染的数据</li></ol><h3 id="登录界面的开发"><a class="header-anchor" href="#登录界面的开发"></a>登录界面的开发</h3><ol><li><p>前面的步骤都一样</p></li><li><p>发送短信验证码 通过定时器实现倒计时的效果，在发送短信验证码之前就对输入的信息进行了校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要的变量</span></span><br><span class="line"><span class="attr">totalSecond</span>: <span class="number">60</span>, <span class="comment">// 总秒数 这个变量不会变</span></span><br><span class="line"> <span class="attr">second</span>: <span class="number">60</span>, <span class="comment">// 倒计时的秒数</span></span><br><span class="line"> <span class="attr">timer</span>: <span class="literal">null</span> <span class="comment">// 定时器 id</span></span><br></pre></td></tr></table></figure></li><li><p>注意一个点就是，离开页面的时候要销毁定时器，也是利用钩子函数实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">destroyed</span> () &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将校验的行为封装为一个方法，因为多处要用到，不仅发送验证码时要用，点击登陆时也还是要用到</p></li><li><p>登录成功将用户的个人信息存入vuex，并存入本地，这里又需要讲到vuex的分模块了，在vuex分模块的过程中再来解决这个问题，存储到本地的操作也可以抽取为工具类<code>util</code>中</p></li><li><p>当我们没有登录访问其他页面，被判定需要登录时，登陆后如何跳转回之前的页面</p><ul><li><p>我们在登录成功后进行一个判断,这需要我们在跳转登录界面传递参数的时候，地址栏带上这个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行判断，看地址栏有无回跳地址</span></span><br><span class="line"><span class="comment">// 1. 如果有   =&gt; 说明是其他页面，拦截到登录来的，需要回跳</span></span><br><span class="line"><span class="comment">// 2. 如果没有 =&gt; 正常去首页</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">backUrl</span> || <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(url)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>一些问题</p><ul><li>关于图形验证码的校验，在这里前端只做了位数的校验，并没有对内容进行校验，是在登陆的时候发送给后端进行校验吗？如果不通过就返回验证码错误的结果吗  这样会不会加剧后端服务器的压力</li></ul></li></ol><h3 id="vuex持久化处理，和将信息存储到浏览器"><a class="header-anchor" href="#vuex持久化处理，和将信息存储到浏览器"></a>vuex持久化处理，和将信息存储到浏览器</h3><blockquote><p>什么数据才需要存储到vuex中 多个组件共享  需要集中管理的数据  跨页面/组件通信的数据</p><p>在本项目中 用户的信息，登录状态和token，购物车数据还有全局加载状态都是要存到vuex中的数据</p></blockquote><h4 id="将数据存储到浏览器中"><a class="header-anchor" href="#将数据存储到浏览器中"></a>将数据存储到浏览器中</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定一个通用的键名</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INFO_KEY</span> = <span class="string">&#x27;hm_shopping_info&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HISTORY_KEY</span> = <span class="string">&#x27;hm_history_list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> defaultObj = &#123; <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">userId</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">INFO_KEY</span>)</span><br><span class="line">  <span class="keyword">return</span> result ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result) : defaultObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在vuex中获取用户信息数据也是从浏览器内存中获取的</p><h4 id="vuex的管理"><a class="header-anchor" href="#vuex的管理"></a>vuex的管理</h4><p>还记得之前讲过的vuex分模块吗，在这个项目中也是这样的，不同的vuex模块管理不同的数据，分模块后要记得在主文件中导入这个模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  user,</span><br><span class="line">  cart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分模块一定要开启命名空间，并且在不同模块中也是可以使用其他模块中的数据,也可以通过其中actions属性来发送请求，其实这些属性就是 state提供存储数据的地方，mutaions能够修改vuex中的数据，actions进行异步操作，如果要修改vuex也就是state中的数据，必须通过mutations实现，还记得他们在页面中如何调用吗</p><p><code>this.$store.commit('模块名/方法名'，要传递的参数)</code> <code>this.$store.dispatch()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getInfo, setInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">state</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 个人权证相关</span></span><br><span class="line">      <span class="attr">userInfo</span>: <span class="title function_">getInfo</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 所有mutations的第一个参数，都是state</span></span><br><span class="line">    <span class="title function_">setUserInfo</span> (state, obj) &#123;</span><br><span class="line">      state.<span class="property">userInfo</span> = obj</span><br><span class="line">      <span class="title function_">setInfo</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">logout</span> (context) &#123;</span><br><span class="line">      <span class="comment">// 个人信息要重置</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 购物车信息要重置 (跨模块调用 mutation)  cart/setCartList</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;cart/setCartList&#x27;</span>, [], &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="将登录成功的数据存储到vuex中"><a class="header-anchor" href="#将登录成功的数据存储到vuex中"></a>将登录成功的数据存储到vuex中</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 发送请求，登录</span><br><span class="line">const res = await login(this.phone, this.smsCode)</span><br><span class="line">this.$store.commit(&#x27;user/setUserInfo&#x27;, res.data)</span><br></pre></td></tr></table></figure><h4 id="在全局vuex配置中配置token"><a class="header-anchor" href="#在全局vuex配置中配置token"></a>在全局vuex配置中配置token</h4><p>用于在页面中获取用户是否登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user from <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cart from <span class="string">&#x27;./modules/cart&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">Vue.use(user)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">     <span class="comment">// 全局的登录状态 通过它也可以来获取用户是否登录</span></span><br><span class="line">    loading: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="comment">// 获取用户是否登录</span></span><br><span class="line">    token (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.user.userInfo.token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setLoading (state, status) &#123;</span><br><span class="line">      state.loading = status</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    user,</span><br><span class="line">    cart</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加请求-loading-效果-处理请求错误的情况"><a class="header-anchor" href="#添加请求-loading-效果-处理请求错误的情况"></a>添加请求 loading 效果 处理请求错误的情况</h3><ol><li><p>请求的时候打开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="title class_">Toast</span>.<span class="title function_">loading</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请求中...&#x27;</span>,</span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">loadingType</span>: <span class="string">&#x27;spinner&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数据响应的时候关闭 并判断请求是否成功 进行错误处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">  <span class="comment">// 对响应数据做点什么 (默认axios会多包装一层data，需要响应拦截器中处理一下)</span></span><br><span class="line">  <span class="keyword">const</span> res = response.<span class="property">data</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 给错误提示, Toast 默认是单例模式，后面的 Toast调用了，会将前一个 Toast 效果覆盖</span></span><br><span class="line">    <span class="comment">// 同时只能存在一个 Toast</span></span><br><span class="line">    <span class="title class_">Toast</span>(res.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">// 抛出一个错误的promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">message</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 正确情况，直接走业务核心逻辑，清除loading效果</span></span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">clear</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="第二种配置loading的方法"><a class="header-anchor" href="#第二种配置loading的方法"></a>第二种配置loading的方法</h4><ol><li><p>利用全局配置参数<strong>loading</strong></p></li><li><p>自己定义一个组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;loading-wrapper&quot; v-if=&quot;loading&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loading&quot;&gt;</span><br><span class="line">      &lt;van-loading type=&quot;spinner&quot; color=&quot;#ee0a24&quot; /&gt;</span><br><span class="line">      &lt;span class=&quot;text&quot;&gt;加载中...&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;LoadingIndex&#x27;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;loading&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.loading-wrapper &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.3);</span><br><span class="line">  z-index: 999;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line"></span><br><span class="line">  .loading &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    padding: 20px 30px;</span><br><span class="line">    border-radius: 8px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: center;</span><br><span class="line"></span><br><span class="line">    .text &#123;</span><br><span class="line">      margin-top: 8px;</span><br><span class="line">      font-size: 14px;</span><br><span class="line">      color: #666;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在App.vue中使用这个组件，这个组件是否显示完全取决于loading参数，也就是请求有没有响应成功，在全局拦截器中做了配置</p></li><li><p>优化一下app.vue 添加<strong>过渡效果</strong>   <code>&lt;transition name=&quot;fade&quot; mode=&quot;out-in&quot;&gt;</code>：这是一个 Vue 提供的组件，用于添加进入和离开的过渡效果。<code>name=&quot;fade&quot;</code> 指定了过渡的名称，Vue 会自动查找与之对应的 CSS 类。<code>mode=&quot;out-in&quot;</code> 指定了过渡的模式，即先让当前组件离开，再让新组件进入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Loading.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Loading</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-enter-active</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-leave-active</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-enter</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fade-leave-to</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="全局前置守卫-进行登录拦截访问"><a class="header-anchor" href="#全局前置守卫-进行登录拦截访问"></a>全局前置守卫 进行登录拦截访问</h3><blockquote><p>全局前置守卫 所有的路由一旦被匹配到，都会先经过全局前置守卫，只有全局前置守卫放行，才会真正解析渲染组件，才能看到页面内容</p></blockquote><ol><li><p>基础代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. to   往哪里去， 到哪去的路由信息对象  </span></span><br><span class="line">  <span class="comment">// 2. from 从哪里来， 从哪来的路由信息对象</span></span><br><span class="line">  <span class="comment">// 3. next() 是否放行</span></span><br><span class="line">  <span class="comment">//    如果next()调用，就是放行</span></span><br><span class="line">  <span class="comment">//    next(路径) 拦截到某个路径页面</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>项目中的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> authUrl = [<span class="string">&#x27;/pay&#x27;</span>, <span class="string">&#x27;/order&#x27;</span>]</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = store.<span class="property">getters</span>.<span class="property">token</span></span><br><span class="line">  <span class="comment">// 如果目标路由是 /login，直接放行</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!authUrl.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果用户未登录，重定向到 /login，并带上当前路由路径作为查询参数</span></span><br><span class="line">    <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">backUrl</span>: to.<span class="property">fullPath</span> &#125; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索页开发"><a class="header-anchor" href="#搜索页开发"></a>搜索页开发</h3><ol><li><p>搜索记录要本地化</p></li><li><p>如果搜索的是有过记录的商品相当于将历史记录中有的数据又排到前面，方法是找到这个数据然后删除它，在将它添加到数组最前面</p></li><li><p>搜索商品和点击历史记录的时候要地址栏传参，传递搜索的名称，后端通过名称进行搜索，并且我们前端也可以取出这个参数渲染到搜索栏中</p></li><li><p>具体操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 跳转到搜索到的商品列表页</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">`/seachList?search=<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过计算属性获取</span></span><br><span class="line">      <span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 通过计算属性获得通过地址栏传过来的值</span></span><br><span class="line">  <span class="title function_">querySearch</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">search</span></span><br><span class="line">  &#125;,</span><br><span class="line">      <span class="comment">//不同的传参方式，实现后面查询商品接口的复用 分类页就是通过分类id查询</span></span><br><span class="line">  <span class="title function_">categoryId</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">categoryId</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>按照价格，销量排序 就是通过点击改变 <code>sortType</code>状态，在通过<code>watch</code>监听这个属性重新拉去请求</p></li></ol><h4 id="注意细节"><a class="header-anchor" href="#注意细节"></a>注意细节</h4><ol><li>接口的复用，通过商品名和分类id查询调用的都是同一个接口，只有地址栏中有那个参数到时候就是通过那一个参数查询的</li></ol><h3 id="商品详情页开发"><a class="header-anchor" href="#商品详情页开发"></a>商品详情页开发</h3><ol><li><p>商品描述 后端传递过来的数据是html格式的,用下面这种形式接收</p><p><code>&lt;div class=&quot;desc&quot; v-html=&quot;detail.content&quot;&gt;&lt;/div&gt;</code></p></li><li><p>点击不同的按钮触发不同的功能 这个mode参数是后端需要传递的，后面也有作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;btn-add&quot;</span> @click=<span class="string">&quot;addFn&quot;</span>&gt;加入购物车&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-buy&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;buyFn&quot;</span>&gt;</span>立刻购买<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title function_">addFn</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mode</span> = <span class="string">&#x27;cart&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showPannel</span> = <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">buyFn</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mode</span> = <span class="string">&#x27;buyNow&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showPannel</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装数字框组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleSub&quot;</span> <span class="attr">class</span>=<span class="string">&quot;minus&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleAdd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleSub</span> () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> &lt;= <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">value</span> - <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleAdd</span> () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">value</span> + <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleChange</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(e.target.value)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> num = +e.<span class="property">target</span>.<span class="property">value</span> <span class="comment">// 转数字处理 (1) 数字 (2) NaN</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 输入了不合法的文本 或 输入了负值，回退成原来的 value 值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(num) || num &lt; <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="property">target</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, num)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.count-box</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">110px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.add</span>, <span class="selector-class">.minus</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.inp</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如何修改数字框组件中的数据，利用组件通信 v-model 语法可以帮我们很好的解决这个问题</p></li><li><p>进行加入购物车和立即购买时，需要判断用户是否登录 弹出提示框，如果没有登录需要转跳到登录页面，因为后面还有其他地方也会用到，我们可以使用mixins复用 处理登录确认框的弹出</p></li><li><p>其他</p><ul><li>其实还有很多功能没有开发到，比如在商品详情页点击评论信息，需要一个评论的组件</li><li>还有些没讲到的，商品没库存了需要改变底部的按钮</li></ul></li></ol><h4 id="mixins-复用-处理登录确认框的弹出"><a class="header-anchor" href="#mixins-复用-处理登录确认框的弹出"></a>mixins 复用 - 处理登录确认框的弹出</h4><blockquote><p>在页面中导入就可以进行混入，相当于将方法挂载到原型对象上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 是否需要弹登录确认框</span></span><br><span class="line">    <span class="comment">// (1) 需要，返回 true，并直接弹出登录确认框</span></span><br><span class="line">    <span class="comment">// (2) 不需要，返回 false</span></span><br><span class="line">    <span class="title function_">loginConfirm</span> () &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$dialog</span>.<span class="title function_">confirm</span>(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;此时需要先登录才能继续操作哦&#x27;</span>,</span><br><span class="line">          <span class="attr">confirmButtonText</span>: <span class="string">&#x27;去登陆&#x27;</span>,</span><br><span class="line">          <span class="attr">cancelButtonText</span>: <span class="string">&#x27;再逛逛&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果希望，跳转到登录 =&gt; 登录后能回跳回来，需要在跳转去携带参数 (当前的路径地址)</span></span><br><span class="line">            <span class="comment">// this.$route.fullPath (会包含查询参数)</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">              <span class="attr">query</span>: &#123;</span><br><span class="line">                <span class="attr">backUrl</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">fullPath</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>页面中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loginConfirm <span class="keyword">from</span> <span class="string">&#x27;@/mixins/loginConfirm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ProDetail&#x27;</span>,</span><br><span class="line">  <span class="attr">mixins</span>: [loginConfirm],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="购物车模块的开发"><a class="header-anchor" href="#购物车模块的开发"></a>购物车模块的开发</h3><ol><li><p>明确一下购物车中的所有数据都是要和后端进行交互得到的，相当于我们在前端界面修改数据，不仅要修改vuex中的数据，还要发送请求到后端进行数据的修改</p></li><li><p>进行请求购物车数据的时候首先要判断登录状态，这个在登录成功的时候就将token存入到了全局的vuex中</p></li><li><p>接下来是复选框选中状态的处理，由于后台返回的数据并没有带有这一信息的数据，所以需要我们手动维护这一数据,这里采用的方法是将所有数据的状态都设置为已选中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getCartAction</span> (context) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> <span class="title function_">getCartList</span>()</span><br><span class="line">    <span class="comment">// 后台返回的数据中，不包含复选框的选中状态，为了实现将来的功能</span></span><br><span class="line">    <span class="comment">// 需要手动维护数据，给每一项，添加一个 isChecked 状态 (标记当前商品是否选中)</span></span><br><span class="line">    data.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      item.<span class="property">isChecked</span> = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setCartList&#x27;</span>, data.<span class="property">list</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>利用计算属性和辅助函数实现，全选和修改购物车</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(<span class="string">&#x27;cart&#x27;</span>, [<span class="string">&#x27;cartList&#x27;</span>]),</span><br><span class="line">  ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;cart&#x27;</span>, [<span class="string">&#x27;cartTotal&#x27;</span>, <span class="string">&#x27;selCartList&#x27;</span>, <span class="string">&#x27;selCount&#x27;</span>, <span class="string">&#x27;selPrice&#x27;</span>, <span class="string">&#x27;isAllChecked&#x27;</span>]),</span><br><span class="line">  <span class="title function_">isLogin</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">token</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>点击编辑时，结算变成删除按钮,改变购物车的选中状态，删除时购物车商品为全不选(感觉还是有一些不合理)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">isEdit</span> (value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;cart/toggleAllCheck&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;cart/toggleAllCheck&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里也是有数字框组件的使用的，但是这里传递数据的方式不是v-mode了，因为要修改的是vuex中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">CountBox</span> :value=<span class="string">&quot;item.goods_num&quot;</span> @input=<span class="string">&quot;value =&gt; changeCount(value, item.goods_id, item.goods_sku_id)&quot;</span>&gt;&lt;/<span class="title class_">CountBox</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeCount</span> (value, goodsId, skuId) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;cart/changeCountAction&#x27;</span>, &#123;</span><br><span class="line">    value,</span><br><span class="line">    goodsId,</span><br><span class="line">    skuId</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>空购物车处理 在外层加个大盒子并添加if判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;cart-box&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;isLogin &amp;&amp; cartList.length &gt; 0&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 购物车开头 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 购物车列表 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-fixed&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;empty-cart&quot;</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;@/assets/empty.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    您的购物车是空的, 快去逛逛吧</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#x27;/&#x27;)&quot;</span>&gt;</span>去逛逛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">//相关样式</span></span><br><span class="line"><span class="language-xml">.empty-cart &#123;</span></span><br><span class="line"><span class="language-xml">  padding: 80px 30px;</span></span><br><span class="line"><span class="language-xml">  img &#123;</span></span><br><span class="line"><span class="language-xml">    width: 140px;</span></span><br><span class="line"><span class="language-xml">    height: 92px;</span></span><br><span class="line"><span class="language-xml">    display: block;</span></span><br><span class="line"><span class="language-xml">    margin: 0 auto;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  .tips &#123;</span></span><br><span class="line"><span class="language-xml">    text-align: center;</span></span><br><span class="line"><span class="language-xml">    color: #666;</span></span><br><span class="line"><span class="language-xml">    margin: 30px;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  .btn &#123;</span></span><br><span class="line"><span class="language-xml">    width: 110px;</span></span><br><span class="line"><span class="language-xml">    height: 32px;</span></span><br><span class="line"><span class="language-xml">    line-height: 32px;</span></span><br><span class="line"><span class="language-xml">    text-align: center;</span></span><br><span class="line"><span class="language-xml">    background-color: #fa2c20;</span></span><br><span class="line"><span class="language-xml">    border-radius: 16px;</span></span><br><span class="line"><span class="language-xml">    color: #fff;</span></span><br><span class="line"><span class="language-xml">    display: block;</span></span><br><span class="line"><span class="language-xml">    margin: 0 auto;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="订单结算模块的开发"><a class="header-anchor" href="#订单结算模块的开发"></a>订单结算模块的开发</h3><ol><li><p>对于地址的获取，利用AI自己开发了一个地址界面，感觉还可以</p></li><li><p>判断是从哪进入的订单结算台的，商品详情的立即购买还是购物车中的结算，不同的进入所对应的参数不同，但是还是用的一样的接口，只是传递的参数不同,通过地址栏传参 获取到后存入计算属性中便于使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">selectedAddress</span> () &#123;</span><br><span class="line">    <span class="comment">// 这里地址管理非主线业务，直接获取第一个项作为选中的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">addressList</span>[<span class="number">0</span>] || &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">longAddress</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> region = <span class="variable language_">this</span>.<span class="property">selectedAddress</span>.<span class="property">region</span></span><br><span class="line">    <span class="keyword">return</span> region.<span class="property">province</span> + region.<span class="property">city</span> + region.<span class="property">region</span> + <span class="variable language_">this</span>.<span class="property">selectedAddress</span>.<span class="property">detail</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mode</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">mode</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">cartIds</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">cartIds</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">goodsId</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">goodsId</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">goodsSkuId</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">goodsSkuId</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">goodsNum</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">goodsNum</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="我的订单模块开发"><a class="header-anchor" href="#我的订单模块开发"></a>我的订单模块开发</h3><ol><li><p>通过vant-tab切换渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-tabs v-model=<span class="string">&quot;active&quot;</span> sticky&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">van-tab</span> <span class="attr">name</span>=<span class="string">&quot;all&quot;</span> <span class="attr">title</span>=<span class="string">&quot;全部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">van-tab</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">van-tab</span> <span class="attr">name</span>=<span class="string">&quot;payment&quot;</span> <span class="attr">title</span>=<span class="string">&quot;待支付&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">van-tab</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">van-tab</span> <span class="attr">name</span>=<span class="string">&quot;delivery&quot;</span> <span class="attr">title</span>=<span class="string">&quot;待发货&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">van-tab</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">van-tab</span> <span class="attr">name</span>=<span class="string">&quot;received&quot;</span> <span class="attr">title</span>=<span class="string">&quot;待收货&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">van-tab</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">van-tab</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">title</span>=<span class="string">&quot;待评价&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">van-tab</span>&gt;</span></span></span><br><span class="line">&lt;/van-tabs&gt;</span><br></pre></td></tr></table></figure></li><li><p>封装展示订单信息的组件，遍历渲染这个组件 这些事件都是接受子组件中的传递过来的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">&quot;list.length&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">OrderListItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;item.order_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click-item</span>=<span class="string">&quot;$router.push(`/order/detail/$&#123;item.order_id&#125;`)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">on-cancel</span>=<span class="string">&quot;handleCancel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">on-pay</span>=<span class="string">&quot;handlePay&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">on-confirm</span>=<span class="string">&quot;handleConfirm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">on-comment</span>=<span class="string">&quot;handleComment&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件中有一个事件用于跳转到订单详情,但这组件中还有其他按钮绑定了事件，所以会触发事件冒泡，给其他事件添加的时候要阻止默认冒泡行为<code>@click.stop</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;order-item&quot;</span> @click=<span class="string">&quot;$emit(&#x27;click-item&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;item.pay_status === 10&quot;</span> @click.<span class="property">stop</span>=<span class="string">&quot;$emit(&#x27;on-pay&#x27;, item.order_id)&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;primary urgent&quot;</span>&gt;立刻付款&lt;/span&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.delivery_status === 10&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;$emit(&#x27;on-cancel&#x27;,item.order_id)&quot;</span>&gt;</span>申请取消<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.delivery_status === 20 || item.delivery_status === 30&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;$emit(&#x27;on-confirm&#x27;, item.order_id)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>确认收货<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="个人中心模块的开发"><a class="header-anchor" href="#个人中心模块的开发"></a>个人中心模块的开发</h3><ol><li><p>根据提供的静态页面和接口进行动态渲染</p></li><li><p>登录退出功能,注意的是要将本地的用户信息清除和重新刷新页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">logout</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$dialog</span>.<span class="title function_">confirm</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;你确认要退出么？&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/logout&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">logout</span> (context) &#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;)</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;cart/setCartList&#x27;</span>, [], &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="项目总结"><a class="header-anchor" href="#项目总结"></a>项目总结</h2><p>this.$route 是只读的路由信息对象</p><p>this.$router 是可操作的路由实例，用于编程式导航</p><p>this.$route 用于获取当前路由的信息</p><p>this.$router 用于路由跳转和导航控制</p><p>当一个模块的数据需要在多个模块共享使用时，最好将数据交给vuex管理</p><p>遵循分模块开发的道理，项目的整体业务逻辑并不复杂，主要是巩固vue2的语法和vant2组件库的使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="集合框架"><a class="header-anchor" href="#集合框架"></a>集合框架</h1><blockquote><p>各种概念什么的就不讲了，主要是在题目中的体现</p></blockquote><h2 id="使用的一些细节"><a class="header-anchor" href="#使用的一些细节"></a>使用的一些细节</h2><ol><li><p>数组有Arrays类提供排序方法，集合用Collections 自定义排序的话只支持包装类，默认都是升序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以通过拉姆达表达式简写</span></span><br><span class="line">Collections.sort(list,(o1,o2) -&gt; o2-o1);</span><br></pre></td></tr></table></figure></li><li><p><code>isEmpty()</code>方法，如果集合null都话会报空指针异常</p></li></ol><h2 id="例题讲解"><a class="header-anchor" href="#例题讲解"></a>例题讲解</h2><ol><li><p><strong>实现对输入的值去重并排序</strong></p><blockquote><p>直接使用set集合去重后转换为lsit集合排序，set中是无序的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 得到要遍历的数组长度</span></span><br><span class="line"><span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    f[i] = sc.nextInt();</span><br><span class="line">    set.add(f[i]); <span class="comment">// 直接将元素添加到set中去重</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 将set转换为list进行排序</span></span><br><span class="line">ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(set);</span><br><span class="line">Collections.sort(list1); <span class="comment">// 升序排序</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : list1) &#123;</span><br><span class="line">    System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">sc.close(); <span class="comment">// 关闭Scanner</span></span><br></pre></td></tr></table></figure></li><li><p><strong>计算出现频率最大的数，如果有多个数，从小到大排序</strong></p><blockquote><p>利用map集合，将出现的数作为键，在判断下一次的数键是否存在，存在值++，第一次存入的时候值都唯一，遍历键值对找出值最大的键</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">    <span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span> [n];</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        arr[i] = in.nextInt();</span><br><span class="line">        <span class="comment">//一种方法</span></span><br><span class="line"><span class="comment">//        if(map.containsKey(arr[i]))&#123;</span></span><br><span class="line"><span class="comment">//            map.put(arr[i],map.get(arr[i])+1);</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            map.put(arr[i],1);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//调用api的一种方法 //默认是1 如果有这个键则加1</span></span><br><span class="line">        map.put(arr[i],map.getOrDefault(arr[i],<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到最大频率</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxFrequency</span> <span class="operator">=</span> Collections.max(map.values());</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry : map.entrySet())&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(entry.getKey())==maxFrequency)&#123;</span><br><span class="line">            list.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x:list)&#123;</span><br><span class="line">        System.out.print(x+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>判断括号串是否合法</p><blockquote><p>利用栈的结构来解决这个问题，先将所有的左括号都入栈，之后就是右括号的情况，如果栈不为空就弹出一个左括号，也就是有左括号且有右括号能对应的上的情况，如果为空则跳出循环，不合法，</p><p>在判断有没有多余左括号，有的话也不合法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Character&gt; stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">final</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="keyword">final</span> <span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> c : charArray)&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">        stack2.push(c);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stack2.isEmpty())&#123;</span><br><span class="line">            stack2.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有多余的括号</span></span><br><span class="line"><span class="keyword">if</span>(!stack2.isEmpty()) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(flag) System.out.println(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> System.out.println(<span class="string">&quot;no&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><mark><strong>按照数位和排序</strong></mark></p><blockquote><p>这题我感觉挺有意思的，按照数位之和给数排序，两个数数位之和不同 数位和小的排在前面，数位和相等数值小的排在前面，给定正整数n,m 1到n采用这种方法排序，排在第m个的元素是多少  输入 13 5 输出 3</p><p>利用二维数组模拟键值对 <code>a[i][0]</code>为数值，<code>a[i][1]</code>为数位和，在通过二维数组的排序得到答案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i][<span class="number">0</span>] = i+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//直接通过+转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arr[i][<span class="number">0</span>]+<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; str.length(); j++) &#123;</span><br><span class="line">                arr[i][<span class="number">1</span>] += str.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这个二维数组的结构就相当于键值对</span></span><br><span class="line"><span class="comment">//            System.out.println(arr[i][0]+&quot;:&quot;+arr[i][1]);</span></span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">//a b 表达的就是二维数组的一行 a[1] 里面放的就是数位和 数位和相同按照数值升序 数位和不同按照数位和升序</span></span><br><span class="line">        Arrays.sort(arr,(a,b)-&gt; a[<span class="number">1</span>]==b[<span class="number">1</span>]?a[<span class="number">0</span>]-b[<span class="number">0</span>]:a[<span class="number">1</span>]-b[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[m-<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>相邻数字首尾相接 组成一个最大数</strong></p><blockquote><p>有n个正整数，将它们连接成一排，相邻数字首尾相接 组成一个最大数 输入 13 312 343 输出 34331213 ，</p><p>通过将数字转换为字符串在通过字符串拼接的操作，进行字典序的比较，但是在比较的过程中要记得比较的字符串长度要相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">String[] a = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    a[i] = sc.next();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串数字比较大小 长度相等在进行字典序的比较</span></span><br><span class="line">Arrays.sort(a,(a1,a2)-&gt;(a2+a1).compareTo(a1+a2));</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span>(String s : a)&#123;</span><br><span class="line">    str.append(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str);</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h1 id="排序算法"><a class="header-anchor" href="#排序算法"></a>排序算法</h1><blockquote><p>感觉能明白又感觉明白不了</p></blockquote><h3 id="冒泡排序"><a class="header-anchor" href="#冒泡排序"></a>冒泡排序</h3><blockquote><p>最简单的排序算法 通过比较相邻两个元素的大小进行排序 时间复杂度为O(n2)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubblingSorting</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/* 题目 第一行输入数字n  输入的第二行包括n个数字，对输入的数字进行排序</span></span><br><span class="line"><span class="comment"> * 1&lt;=n&lt;=1000,1&lt;=a[i]&lt;=10e6</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//采用冒泡排序的方式解决  依次比较相邻的两个元素</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">a[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; a[j]) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;a.length; i++) &#123;</span><br><span class="line">System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a class="header-anchor" href="#选择排序"></a>选择排序</h3><blockquote><p>找到最小元素放在首尾 在向下寻找放到已排序的末尾</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span> ; j &lt; a.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[min])</span><br><span class="line"><span class="comment">//记录当前最小元素的下标</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i != min) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">a[i] = a[min];</span><br><span class="line">a[min] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a class="header-anchor" href="#插入排序"></a>插入排序</h3><blockquote><p>将第一个元素视为以排序元素 从第一个元素后面取出数字 将取出元素与已排序元素从后向前依次比较</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; t &lt; a[j-<span class="number">1</span>]) &#123;</span><br><span class="line">a[j] = a[j-<span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意这里j已经是--过了</span></span><br><span class="line"><span class="keyword">if</span>(j != i) </span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a class="header-anchor" href="#快速排序"></a>快速排序</h3><blockquote><p>时间复杂度小  数据越无序 性能越好</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快排 采用递归实现 将要排序的分为左右两部分</span></span><br><span class="line"></span><br><span class="line">QuickSort(a,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt; a.length; i++)</span><br><span class="line">System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">int</span>[] QuickSort(<span class="type">int</span>[]arr ,<span class="type">int</span> left,<span class="type">int</span> right) &#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right) &#123; </span><br><span class="line"><span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> patition(arr,left,right);</span><br><span class="line">QuickSort(arr,left,p-<span class="number">1</span>);</span><br><span class="line">QuickSort(arr,p+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">patition</span><span class="params">(<span class="type">int</span> []arr,<span class="type">int</span> left,<span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> left ; </span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> p + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt;= right; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[p]) &#123;</span><br><span class="line">swap(arr,i,index);</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr,p,index-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> index-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> []arr,<span class="type">int</span> i,<span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line"> arr[i] = arr[j];</span><br><span class="line"> arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a class="header-anchor" href="#桶排序"></a>桶排序</h3><blockquote><p>适用于数据量比数据的值域要大或者一样时的情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">//桶排序 当排序的总数大于值域时，才比较适合用桶排序 O(n)  </span></span><br><span class="line"><span class="comment">//不用比较相当于一个数对应一个桶</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bucketSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[MAX];</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i] = sc.nextInt();</span><br><span class="line">bucket[arr[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucket[i] ; j++) &#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/vue%E6%A6%82%E8%BF%B0/"/>
      <url>/vue%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a class="header-anchor" href="#Vue"></a><a href="https://cn.vuejs.org/">Vue</a></h1><blockquote><p>构建用户界面的渐进式框架</p><p>一套前端框架，简化原生JavaScript 中的DOM操作</p><p>基于MVVM思想，实现数据的双向绑定</p></blockquote><h2 id="快速入门"><a class="header-anchor" href="#快速入门"></a>快速入门</h2><ol><li><p>在HTML页面中引入vue.js</p></li><li><p>创建vue对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 表示这个vue对象控制的是id为app容器中的内容</span></span><br><span class="line">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: &#123;</span><br><span class="line">           <span class="attr">message</span>: <span class="string">&quot;hello Vue&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li><li><p>编写视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="常用指令"><a class="header-anchor" href="#常用指令"></a>常用指令</h3><ol><li><p><code>==&#123;&#123;&#125;&#125;== </code>为插值表达式，里面可以是变量、三元运算符、函数调用、算数运算,不能再标签属性中使用</p></li><li><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">v-html</td><td style="text-align:center">innerHTML,动态渲染标签</td></tr><tr><td style="text-align:center">v-bind（可以简写为：）</td><td style="text-align:center">为HTML标签绑定属性值，设置href,css样式</td></tr><tr><td style="text-align:center">v-model</td><td style="text-align:center">在表单元素上创建双向数据绑定</td></tr><tr><td style="text-align:center">v-on(可以简写为：+事件类型)</td><td style="text-align:center">为HTML标签绑定事件</td></tr><tr><td style="text-align:center">v-if</td><td style="text-align:center">条件性的渲染元素，只有为true是才渲染，元素标签才会显示</td></tr><tr><td style="text-align:center">v-else-if</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">v-else</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">v-show</td><td style="text-align:center">根据条件展示元素，更改的是display的属性值</td></tr><tr><td style="text-align:center">v-for</td><td style="text-align:center">列表渲染，遍历容器的属性值或者对象的属性</td></tr></tbody></table></li><li><p><strong>使用细节</strong></p><p>v- for 的使用后面要加key值，便于后面使用id进行删除时有唯一的定位值，一般来说ID值是由后端传递过来的，可以先用Date.now() 时间戳</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;li <span class="keyword">class</span>=<span class="string">&quot;todo&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in taskList &quot;</span> :key=<span class="string">&quot;item.id&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;item.task&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delById(item.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;/li&gt;</span><br><span class="line"> <span class="title function_">delById</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">taskList</span> = <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="生命周期"><a class="header-anchor" href="#生命周期"></a>生命周期</h3><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">阶段周期</th></tr></thead><tbody><tr><td style="text-align:center">beforeCreate</td><td style="text-align:center">创建前</td></tr><tr><td style="text-align:center">created</td><td style="text-align:center">创建后</td></tr><tr><td style="text-align:center">beforeMount</td><td style="text-align:center">挂载前</td></tr><tr><td style="text-align:center"><mark>mounted</mark></td><td style="text-align:center">挂载完成</td></tr><tr><td style="text-align:center">beforeUpdate</td><td style="text-align:center">更新前</td></tr><tr><td style="text-align:center">updated</td><td style="text-align:center">更新后</td></tr><tr><td style="text-align:center">beforeDestroy</td><td style="text-align:center">销毁前</td></tr><tr><td style="text-align:center">destroyed</td><td style="text-align:center">销毁后</td></tr></tbody></table><blockquote><p>使用生命周期的细节</p><p>初始化渲染请求一般放在create中，只有在mounted阶段才能操作DOM元素</p><p>在beforeDerstroy中释放资源，定时器，全局监听器等</p></blockquote><h2 id="常用语法"><a class="header-anchor" href="#常用语法"></a>常用语法</h2><blockquote><p>记住属性内部一定不能使用插值表达式引用值</p></blockquote><ol><li><p>v-bind 可以简写为:后加属性值，主要是为了增强style本身的属性，使它成为动态的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//:disabled=&quot;item.num&lt;=1&quot; 当num&lt;1时该按钮被禁用</span></span><br><span class="line">&lt;button :disabled=<span class="string">&quot;item.num&lt;=1&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;decrease&quot;</span> @click=<span class="string">&quot;cut(item.id)&quot;</span>&gt; - &lt;/button&gt;</span><br><span class="line"><span class="comment">//图片的src属性变成动态获取的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.icon&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">//对象形式：适用于基于布尔条件判断的类应用，尤其是当需要同时判断多个条件时。</span></span><br><span class="line"><span class="comment">//数组形式：适用于需要组合固定类和动态类的情况，或者当类的组合不依赖于条件判断时。</span></span><br><span class="line">:<span class="keyword">class</span>=<span class="string">&quot;&#123;active:item.isChecked&#125;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>v-model   双向数据绑定  主要是对表单元素进行绑定，当页面上的元素修改后会直接响应到页面上</p></li><li><p>v-for 遍历数组中的数据，一般用来渲染列表，记得后面要根:key元素，可以定位到该列</p></li><li><p>v-on 可以简写为@click  @后面加事件类型</p></li><li><p>v-if 和v-else 要在同一个父元素底下使用</p></li></ol><h3 id="修饰指令符"><a class="header-anchor" href="#修饰指令符"></a>修饰指令符</h3><blockquote><p>在常用的指令后面可以加上一些修饰符简化代码的开发</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-model.<span class="property">trim</span> <span class="comment">//去除首尾空格</span></span><br><span class="line">v-model.<span class="property">number</span>/尝试将字符串转换为数字，转不了的还是以字符串的形式展示，负数也可以转</span><br><span class="line">@click.<span class="property">provent</span><span class="comment">//阻止默认行为</span></span><br><span class="line">@keyup.<span class="property">enter</span><span class="comment">//键盘回车事件</span></span><br></pre></td></tr></table></figure><h2 id="计算属性（computed）"><a class="header-anchor" href="#计算属性（computed）"></a>计算属性（computed）</h2><blockquote><p>作为属性直接调用，会对计算出来的结果缓存，再次读取的时候是直接读缓存中的数据</p><p>一个结果依赖多个值的时候推荐使用</p><p>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></p></blockquote><h3 id="具体写法"><a class="header-anchor" href="#具体写法"></a>具体写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当要修改计算属性时就要使用完整写法</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">          <span class="comment">//全选  </span></span><br><span class="line">          <span class="attr">isAll</span>:&#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="comment">//every方法：数组中每一项都满足条件才返回true</span></span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fruitList</span>.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">isChecked</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">              <span class="comment">//设置全选</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">fruitList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">isChecked</span> = val)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//计算总价</span></span><br><span class="line">              <span class="comment">//简化写法，只使用，不会修改</span></span><br><span class="line">          <span class="title function_">totalPrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 判断是否选中，选中的商品计算总价</span></span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fruitList</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> item.<span class="property">isChecked</span>?sum + item.<span class="property">price</span> * item.<span class="property">num</span>:sum, <span class="number">0</span>)</span><br><span class="line">          </span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//计算选中的商品数量</span></span><br><span class="line">          <span class="title function_">totalNum</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//filter方法：过滤出数组中满足条件的项</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fruitList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">isChecked</span>).<span class="property">length</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h2 id="watch侦听器（监视器）"><a class="header-anchor" href="#watch侦听器（监视器）"></a>watch侦听器（监视器）</h2><blockquote><p>监听数据变化，执行一些业务逻辑和异步操作 比如在数据变化后将数据保存在本地中</p><p>根据具体需要来确定写法，能使用简单写法的尽量用简单写法</p><p>实现实时的数据的转换</p></blockquote><h3 id="简单写法"><a class="header-anchor" href="#简单写法"></a>简单写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123; </span><br><span class="line">  <span class="attr">words</span>: <span class="string">&#x27;苹果&#x27;</span>,</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">words</span>: <span class="string">&#x27;苹果&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 该方法会在数据变化时，触发执行</span></span><br><span class="line">  数据属性名 (newValue, oldValue) &#123;</span><br><span class="line">    一些业务逻辑 或 异步操作。 </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;</span><br><span class="line">    一些业务逻辑 或 异步操作。 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整写法"><a class="header-anchor" href="#完整写法"></a>完整写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">obj</span>:&#123;</span><br><span class="line">    <span class="comment">// 监听的数据</span></span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 该函数会在监听的数据发生变化时自动执行</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">handler</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">   <span class="comment">//防抖</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios.<span class="title function_">get</span>(<span class="string">&#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mela</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-CLI"><a class="header-anchor" href="#Vue-CLI"></a>Vue CLI</h2><blockquote><p>官方提供的脚手架，用于快速生成Vue项目的模板</p><p>基于node.js,可以用nvm来管理不同版本的node.js</p></blockquote><h3 id="提供的功能"><a class="header-anchor" href="#提供的功能"></a>提供的功能</h3><ol><li>统一的目录结构</li><li>本地调式</li><li>热部署（应用正在运行的时候，自动更新应用，也就是更改了代码但不用重启项目）</li><li>单元测试</li><li>集成打包</li></ol><h3 id="使用Vue-CLI"><a class="header-anchor" href="#使用Vue-CLI"></a>使用Vue CLI</h3><ol><li>命令行创建vue项目 vue create 项目名称</li><li>图像化界面  vue ui</li></ol><h3 id="项目结构"><a class="header-anchor" href="#项目结构"></a>项目结构</h3><h2 id="ESlint-代码规范"><a class="header-anchor" href="#ESlint-代码规范"></a>ESlint 代码规范</h2><blockquote><p>团队统一的编码风格，安装ESLint插件 会出现高亮错误，在创建项目的时候要将Eslint规范勾选上，同时要注意依赖冲突的问题，在vscode设置中配置如下</p></blockquote><h2 id="vue的基本使用方式"><a class="header-anchor" href="#vue的基本使用方式"></a>vue的基本使用方式</h2><blockquote><p>组件文件以vue结尾，每个组件由三部分组成 <template> 结构   <style> 样式  <script> 逻辑</p></blockquote><h3 id="组件化开发"><a class="header-anchor" href="#组件化开发"></a>组件化开发</h3><blockquote><p>一个页面可以拆分为一个个组件，每个组件都有自己独立的样式、结构、行为</p><p>类型分为 根组件和普通组件 根组件就是整个应用最上层的组件，包裹所有的普通小组件</p><p>组件的注册方式分为局部注册和全局注册，注册好后可以直接当作HTML标签使用，优先注册局部组件，发现实在要组成为全局组件时在抽离</p><p>组件名命名要遵守大驼峰命名规范</p></blockquote><h4 id="局部注册"><a class="header-anchor" href="#局部注册"></a>局部注册</h4><ol><li><p>创建.vue组件，放在components包下</p></li><li><p>在要使用的组件中导入,在上面就可以直接当作HTML标签使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> <span class="title class_">XhHeader</span> <span class="keyword">from</span> <span class="string">&#x27;./components/XhHeader.vue&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">XhMain</span> <span class="keyword">from</span> <span class="string">&#x27;./components/XhMain.vue&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">XhFooter</span> <span class="keyword">from</span> <span class="string">&#x27;./components/XhFooter.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">XhHeader</span>,</span><br><span class="line">    <span class="title class_">XhMain</span>,</span><br><span class="line">    <span class="title class_">XhFooter</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ol><h4 id="全局注册"><a class="header-anchor" href="#全局注册"></a>全局注册</h4><ol><li><p>在main.js中注册全局组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HmButton</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmButton&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行全局注册 → 在所有的组件范围内都能直接使用</span></span><br><span class="line"><span class="comment">// Vue.component(组件名，组件对象)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HmButton&#x27;</span>, <span class="title class_">HmButton</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="组件三大组成部分说明"><a class="header-anchor" href="#组件三大组成部分说明"></a>组件三大组成部分说明</h4><ol><li><p>只能有一个根元素</p></li><li><p>给style标签加上scoped属性表示当前样式只在该组件中有效，默认是影响所有组件</p><blockquote><p>scoped的原理</p><ul><li>组件内部的标签都被添加了自定义属性 data-v-hash值</li><li>css选择器都被添加[data-v-hash值]的属性选择器</li><li>只有当前组件内的元素才会有这个自定义属性 并且能被渲染到</li></ul></blockquote></li><li><p>一个组件的data必须是一个函数，保证了每一个组件实例维护了独立的一份数据对象</p></li></ol><h4 id="组件通信"><a class="header-anchor" href="#组件通信"></a>组件通信</h4><blockquote><p>也就是组件之间的数据传输，组件时=是无法直接访问其他组件内的数据对象，因为每个组件都维护一份独立的数据对象</p></blockquote><h5 id="组件通信的解决方案"><a class="header-anchor" href="#组件通信的解决方案"></a>组件通信的解决方案</h5><ol><li><p>首先要明白组件之间的关系</p><ul><li>父子关系 通过props和$emit</li><li>非父子关系 provide 和 inject 或者 eventbus</li><li>通用方案  vuex</li></ul></li><li><p>父子之间的通信</p><ol><li><p>prop</p><blockquote><p>组件上注册的一些自定义属性，可以向子组件传递数据</p><p>可以传递任意数量，任意类型的数据</p><p>可以指定传入的prop的类型要求</p><p>遵顼单向数据流，不能随意更改数据，也就是如果在子组件内有需要更改数据的操作，要通知父组件，父组件改完数据后在通过数据流的传递渲染到子组件上</p></blockquote><ul><li><p>指定类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: <span class="title class_">Array</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>完整写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="comment">// requried: true // 必须传递</span></span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> [],<span class="comment">// 默认值</span></span><br><span class="line">    <span class="title function_">validatro</span> (value) &#123; <span class="comment">// 验证器 自定义校验逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><p>父亲通过给儿子添加要传递数据的属性，儿子通过props接受到达效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//父组件中添加要传递的数据，并将数据名当成属性名</span></span><br><span class="line">    &lt;<span class="title class_">TestComponent</span> :list=<span class="string">&quot;list&quot;</span>&gt;&lt;/<span class="title class_">TestComponent</span>&gt;</span><br><span class="line">    <span class="comment">//父组件中接受并使用</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;list&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">list</span>: <span class="title class_">Array</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>儿子通过$emit通知父亲需要修改的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中通知</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">handlerAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;请输入任务&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通知父组件添加任务,将数据传递给父组件</span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">input</span>.<span class="title function_">focus</span>()</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//父组件接受，@add是通知的名称 后面是在父组件中要执行的函数 可以使用形参接受子组件中传递过来的值</span></span><br><span class="line">    &lt;<span class="title class_">XhHeader</span> @add=<span class="string">&quot;handlerAdd&quot;</span>&gt;&lt;/<span class="title class_">XhHeader</span>&gt;</span><br><span class="line">    </span><br><span class="line">     <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handlerAdd</span>(<span class="params">info</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: +<span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">        info</span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;, </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="v-model原理"><a class="header-anchor" href="#v-model原理"></a>v-model原理</h4><blockquote><p>是value和input事件的合写，合理的利用可以简化代码</p></blockquote><ol><li><p>二者相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&quot;msg&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">&lt;!-- $event 用在模板中用于获取事件的形参 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg=$event.target.value&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>封装表单类组件使用v-model简化代码</p><ol><li>子组件 propos 要通过value接受，事件触发input</li><li>父组件中 v-model给组件绑定数据代替:vaule 和@input</li></ol></li><li><p><strong>.sync修饰符</strong></p><ul><li>prop的属性名可以自定义，不是固定的value</li><li>用于封装弹框类的的基础组件，visible属性  true显示  false隐藏</li><li>本质是属性名和@update：属性名的合写</li></ul></li></ol><h4 id="vue的异步更新"><a class="header-anchor" href="#vue的异步更新"></a>vue的异步更新</h4><blockquote><p>vue是通过异步更新的操作来提升性能的，不会你已更改了DOM 元素就立刻渲染到页面</p><p>$nextTick(函数体) ，等DOM更新后才会执行里面的函数</p><p>res 和$refs 用于获取dom元素或组件实例</p></blockquote><ol><li><p><strong>通过点击编辑使文本框立刻获得焦点事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">isShowEdit</span> = <span class="literal">true</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//这个inp 是使用res属性在表单上定义的名称</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="property">focus</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="自定义指令"><a class="header-anchor" href="#自定义指令"></a>自定义指令</h3><blockquote><p>封装一些DOM操作。扩展额外功能</p></blockquote><h4 id="全局注册-v2"><a class="header-anchor" href="#全局注册-v2"></a>全局注册</h4><blockquote><p>main.js中注册</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 全局注册指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// inserted 会在 指令所在的元素，被插入到页面中时触发</span></span><br><span class="line">  <span class="title function_">inserted</span> (el) &#123;</span><br><span class="line">    <span class="comment">// el 就是指令所绑定的元素</span></span><br><span class="line">    <span class="comment">// console.log(el);  获取页面焦点</span></span><br><span class="line">    el.<span class="title function_">focus</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="局部注册-v2"><a class="header-anchor" href="#局部注册-v2"></a>局部注册</h4><blockquote><p>在需要用的组件中注册</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="attr">color</span>: &#123;</span><br><span class="line">    <span class="comment">// 1. inserted 提供的是元素被添加到页面中时的逻辑</span></span><br><span class="line">    <span class="title function_">inserted</span> (el, binding) &#123;</span><br><span class="line">      <span class="comment">// console.log(el, binding.value);</span></span><br><span class="line">      <span class="comment">// binding.value 就是指令的值</span></span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 2. update 指令的值修改的时候触发，提供值变化后，dom更新的逻辑</span></span><br><span class="line">    <span class="title function_">update</span> (el, binding) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;指令的值修改了&#x27;</span>);</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体案例"><a class="header-anchor" href="#具体案例"></a>具体案例</h4><blockquote><p>实现请求数据时等待加载的效果</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">&#x27;./loading.gif&#x27;</span>) no-repeat center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//  使用 &lt;div class=&quot;box&quot; v-loading=&quot;isLoading&quot;&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">loading</span>: &#123;</span><br><span class="line">      <span class="title function_">inserted</span> (el, binding) &#123;</span><br><span class="line">        binding.<span class="property">value</span> ? el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loading&#x27;</span>) : el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">update</span> (el, binding) &#123;</span><br><span class="line">        binding.<span class="property">value</span> ? el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loading&#x27;</span>) : el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="插槽语法"><a class="header-anchor" href="#插槽语法"></a>插槽语法</h3><blockquote><p>让组件内部的结构支持自定义</p><p>需要定制的部位用<slot></slot>标签占位,多个slot之间用name区分</p><p>使用组件时,组件标签内部，传入结构替换slo，template配合v-slot:名字来分发对应的标签 ，也可以直接简化成#插槽名</p></blockquote><h4 id="作用域插槽"><a class="header-anchor" href="#作用域插槽"></a>作用域插槽</h4><blockquote><p>给插槽上可以绑定数据，将来使用组件时可以使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyTable</span> :data=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  &lt;!-- <span class="number">3.</span> 通过template #插槽名=<span class="string">&quot;变量名&quot;</span> 接收 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;obj&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(obj.row.id)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      删除</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">MyTable</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyTable</span> <span class="attr">:data</span>=<span class="string">&quot;list2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show(row)&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MyTable</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>自定义插槽</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">1.</span> 给slot标签，添加属性的方式传值 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:row</span>=<span class="string">&quot;item&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;测试文本&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">2.</span> 将所有的属性，添加到一个对象中 --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">row</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;孙大明&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">     <span class="attr">msg</span>: <span class="string">&#x27;测试文本&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><h3 id="使用axios发送Ajax请求"><a class="header-anchor" href="#使用axios发送Ajax请求"></a>使用axios发送Ajax请求</h3><blockquote><p>发送Ajax异步请求给后端服务器</p></blockquote><ol><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"> <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line"> <span class="attr">url</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>:&#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//成功后回调</span></span><br><span class="line">    </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//失败后调用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$messgage</span>.<span class="title function_">error</span>(<span class="string">&quot;请求出错了&quot;</span>+err.<span class="property">messgage</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="解决跨域问题"><a class="header-anchor" href="#解决跨域问题"></a>解决跨域问题</h3><blockquote><p>什么是跨域：当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">   <span class="comment">//端口号</span></span><br><span class="line">   <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">   <span class="comment">//代理</span></span><br><span class="line">   <span class="attr">proxy</span>: &#123;</span><br><span class="line">       <span class="comment">//将/api开头的请求都转发到8080地址</span></span><br><span class="line">     <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">       <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">       <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span><span class="comment">//路径重写</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-Router-路由"><a class="header-anchor" href="#Vue-Router-路由"></a>Vue-Router 路由</h3><blockquote><p>vue属于单页面应用，路由就是根据浏览器路径不同，用不同的组件替换这个页面内容，不更改url路径地址</p><p>安装vue-router库 npm install vue-router vue2用3版本的 vue3用4版本的</p><p>一般分为创建路由组件，配置路由导航，配置路由出口</p></blockquote><h4 id="组成"><a class="header-anchor" href="#组成"></a>组成</h4><ul><li><p>VueRouter：路由器。根据路由请求在路由视图中动态渲染对应的路由组件</p></li><li><p><router-link>：路由连接组件，浏览器解析为a标签,to属性就相当于herf属性，路径前无需加#</p><p>默认提供高亮类名，可以直接设置高亮样式  router-link-active(模糊)   router-link-exact-active(精确) 可以直接通过css去改变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.router-link-active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><router-view>：路由视图组件，展示与路由路径匹配的视图组件</p></li></ul><h4 id="导航传参"><a class="header-anchor" href="#导航传参"></a>导航传参</h4><ol><li><p>path路径传参</p><p>路径后跟问号 <code>  @click=&quot;$router.push(</code>/detail?id=${item.id}<code>)&quot;</code></p><p>使用<code>$route.query.id</code>接受传递的参数</p></li><li><p>动态路由传参</p><p>路径后面直接跟需要传递的参数 <code>$router.push(</code>/detail/${item.id}`</p><p>在路由导航中要配置为 <code>path: '/detail/:id'</code></p><p>使用 <code>$route.params.id</code>接受参数</p></li></ol><h4 id="组件缓存-keep-alive"><a class="header-anchor" href="#组件缓存-keep-alive"></a>组件缓存 keep-alive</h4><blockquote><p>路由转跳后组件被销毁了，返回回来组件又被重新加载，导致数据丢失 通过缓存解决这一问题，使组件不在重新加载</p><p>keep-alive是vue内置的组件，用它包裹动态组件时，会缓存不活动的组件实例，而不是销毁他们 ，是一个抽象组件，自身不会渲染成一个DOM元素，也不会出现在父组件链中</p><p>优点：防止组件切换的过程中 重复渲染DOM元素 减少加载时间和性能消耗,提高用户的体验</p></blockquote><h5 id="三大属性"><a class="header-anchor" href="#三大属性"></a>三大属性</h5><ol><li>include： 组件名数组，只有匹配的组件才会被缓存</li><li>exclude：组件名数组，任何匹配的组件都不会被缓存</li><li>max: 最多可以缓存多少组件实例</li></ol><h5 id="改变组件生命周期"><a class="header-anchor" href="#改变组件生命周期"></a>改变组件生命周期</h5><p>组件被缓存后就不涉及到组件的创建和销毁，所属的生命周期函数也会失效</p><p>缓存的组件会有activated  当组件被激活时 进入页面触发  deactivated 当组件不被使用时触发 离开页面触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里就相当于只缓存name为 LayoutPage 的组件</span></span><br><span class="line">&lt;keep-alive :include=<span class="string">&quot;[&#x27;LayoutPage&#x27;]&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">    &lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h4 id="基本使用"><a class="header-anchor" href="#基本使用"></a>基本使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//安装注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line"> </span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将路由对象注入到new Vue实例中 建立关联</span></span><br></pre></td></tr></table></figure><h4 id="通过路由表维护映射关系"><a class="header-anchor" href="#通过路由表维护映射关系"></a>通过路由表维护映射关系</h4><img src="/vue概述/QQ_1735828729114.png"  alt="QQ_1735828729114" style="zoom:50%;" /><h5 id="代码"><a class="header-anchor" href="#代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 createRouter 和 createWebHashHistory 函数。createRouter 用于创建路由器实例，createWebHashHistory 用于创建一个基于 URL hash 的历史记录模式</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//导入该组件作为首页的视图</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"><span class="comment">//路由器配置数组</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//路径</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="comment">//名称</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="comment">//匹配时渲染的组件，这里是静态导入，会全部打包进js文件，推荐动态导入</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="comment">//动态导入，使用到的时候才会打包</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//通过路由配置404页面，当访问不存在的路径时跳转到自定义的404页面</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/404View.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//匹配所有其他未定义的路由</span></span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,</span><br><span class="line">      <span class="comment">//重定向到 /404 路由</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//创建一个路由器实例，传入路由配置和历史记录模式</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出路由器实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a class="header-anchor" href="#嵌套路由"></a>嵌套路由</h4><blockquote><p>实现组件之间内容的切换</p><p>通过children 属性指定各个子路由信息(path、component)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ParentView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/ParentView.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/ChildView.vue&#x27;</span>;</span><br><span class="line"><span class="comment">//访问 /parent 路径时，ParentView 组件将被渲染，但是 &lt;router-view /&gt; 插槽将保持空白，因为没有指定子路由，导航到 /parent/child 路径时，ChildView 组件将被渲染到 ParentView 中的 &lt;router-view /&gt; 插槽里</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/parent&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ParentView</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;child&#x27;</span>,      </span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">ChildView</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="路由转跳方式"><a class="header-anchor" href="#路由转跳方式"></a>路由转跳方式</h4><ol><li><p>标签式：<code>&lt;router-link to=&quot;/about&quot;&gt;About Page&lt;/router-link&gt;</code></p></li><li><p>编程式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Vue 组件中</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">goToAboutPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//两种方式 路径 名称</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="vuex"><a class="header-anchor" href="#vuex"></a>vuex</h3><blockquote><p>管理Vue.js应用程序的状态管理库，可以在多个组件之间共享数据，共享的数据是响应式的，数据的变更能及时的渲染到模板</p><p>采用集中式存储管理所有组件的状态</p><p>安装：npm install vuex@nex --save</p></blockquote><h4 id="基本属性"><a class="header-anchor" href="#基本属性"></a>基本属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">state</span>: &#123; <span class="comment">//共享的数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123; <span class="comment">//相当于通过共享数据获得的值</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123; <span class="comment">//同步操作 用于更新vuex中的数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;  <span class="comment">//异步操作 发送请求 传递要更改的数据给后端 在里面进行同步操作</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="辅助函数"><a class="header-anchor" href="#辅助函数"></a>辅助函数</h4><blockquote><p>通过映射的方式将vuex中的属性提取出来到组件中使用，不用通过this.$store.commit这种方式调用</p><p>写在计算属性中，通过展开运算符 都是前面的属性加上map</p><p>如  …mapState(‘cart’, [‘cars’])  前面的cart是模块名 后面的是要取的属性值 state中</p></blockquote><h4 id="小案例"><a class="header-anchor" href="#小案例"></a>小案例</h4><p>购物车渲染案例</p><ol><li><p>通过json-server工具生成后端接口 Rest风格</p></li><li><p>分模块开发 在index.js 文件夹中定义模块,store文件夹下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">modules</span>: &#123;</span><br><span class="line">  cart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在cart模块中创建初始的架子,记得开启命名空间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//分模块开发提倡使用函数返回值的形式</span></span><br><span class="line">  <span class="title function_">state</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">cars</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>提供获取后端接口中购物车数据的异步请求，和修改state中数据的同步请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">// 修改购物车列表</span></span><br><span class="line">  <span class="title function_">changeCars</span> (state, cars) &#123;</span><br><span class="line">    state.<span class="property">cars</span> = cars</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="comment">// 获取购物车列表</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getCarts</span> (context) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/cart&#x27;</span>)</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;changeCars&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在APP.vue的create钩子函数中调用请求接口，同时在计算属性中接受查询出来的参数,并直接渲染组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;cart&#x27;</span>, [<span class="string">&#x27;cars&#x27;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;cart/getCarts&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过组件通信的形式将item传递到cart-item组件中</span></span><br><span class="line">  &lt;cart-item v-<span class="keyword">for</span>=<span class="string">&quot;item in cars&quot;</span> :key=<span class="string">&quot;item.id&quot;</span> :item=<span class="string">&quot;item&quot;</span>&gt;&lt;/cart-item&gt;</span><br></pre></td></tr></table></figure></li><li><p>cart-item子组件利用props接受传递带过来的参数，并渲染到页面上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">item</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>绑定点击事件，实现增加删除功能,分模块后要用<strong>模块名/方法</strong>这种形式获取方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">handerlAdd</span> () &#123;</span><br><span class="line">      <span class="comment">//相当于调用cart模块中actions属性中的updateCountAsync方法，并且传递了一个对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;cart/updateCountAsync&#x27;</span>, &#123; <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">id</span>, <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">count</span> + <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">handerlSub</span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">count</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;cart/updateCountAsync&#x27;</span>, &#123; <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">id</span>, <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">count</span> - <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>cart模块中利用异步请求将要修改的数据发送到后端，并通过commit修改vuex中的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改购物车商品数量</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">updateCountAsync</span> (context, &#123; id, count &#125;) &#123;</span><br><span class="line">  <span class="keyword">await</span> axios.<span class="title function_">patch</span>(<span class="string">`http://localhost:3000/cart/<span class="subst">$&#123;id&#125;</span>`</span>, &#123; count &#125;)</span><br><span class="line">  context.<span class="title function_">commit</span>(<span class="string">&#x27;updateCount&#x27;</span>, &#123; id, count &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用getter属性实现商品总量和总价的计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="title function_">total</span> (state) &#123;</span><br><span class="line">      <span class="comment">//数组累加求和的方法</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">cars</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur.<span class="property">count</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">totalPrice</span> (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">cars</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur.<span class="property">count</span> * cur.<span class="property">price</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中通过辅助函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">   ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;cart&#x27;</span>, [<span class="string">&#x27;totalPrice&#x27;</span>, <span class="string">&#x27;total&#x27;</span>])</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用细节"><a class="header-anchor" href="#使用细节"></a>使用细节</h4><ol><li><p>mutations中函数的使用，不能直接调用要通过store属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$store.<span class="title function_">commit</span>(<span class="string">&#x27;SET_USERNAME&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>) <span class="comment">//如果是在其他函数里面调用要加上this</span></span><br></pre></td></tr></table></figure></li><li><p>actions中的函数也是一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$store.<span class="title function_">dispatch</span>(<span class="string">&#x27;updateUsername&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>) <span class="comment">//如果是在其他函数里面调用要加上this</span></span><br></pre></td></tr></table></figure></li><li><p>在actions中调用mutations中的函数实现异步改变共享属性的值，actions中有默认属性context,{commit}就是将context中的这个commit属性解构出来，再通过commit去调用mutations中的方法，要想调用actions中的异步方法，一定要通过dispatch这个属性来操作</p></li></ol><h3 id="TypeScript"><a class="header-anchor" href="#TypeScript"></a>TypeScript</h3><blockquote><p>微软推出的开源语言，是JavaScript的超集，包含JavaScript，在它的基础上加了类型支持，可以编译成标准的JavaScript，并在编译时进行类型检查</p><p>安装：npm install -g typescript</p></blockquote><h4 id="为什么要做类型检查"><a class="header-anchor" href="#为什么要做类型检查"></a>为什么要做类型检查</h4><ol><li>Ts属于静态编程语言，Js属于动态编程语言</li><li>静态类型在编译期做类型检查，动态性在执行期做类型检查，也就是便于提前发现编程时的错误</li><li>配合VSCode工具，Ts可以在代码编写期就发现错误</li></ol><h4 id="具体类型"><a class="header-anchor" href="#具体类型"></a>具体类型</h4><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">符号</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">字符串</td><td style="text-align:center">string</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数字</td><td style="text-align:center">number</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">布尔</td><td style="text-align:center">boolean</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数组</td><td style="text-align:center">string[],number[],boolean[]等</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">任意</td><td style="text-align:center">any</td><td style="text-align:center">相当于又没有类型</td></tr><tr><td style="text-align:center">复杂</td><td style="text-align:center">type,interface</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">函数</td><td style="text-align:center">() =&gt; void</td><td style="text-align:center">函数的参数和返回值的说明</td></tr><tr><td style="text-align:center">字面量类型</td><td style="text-align:center">“a”|“b”|“c”</td><td style="text-align:center">限制变量或参数的取值</td></tr><tr><td style="text-align:center">class类</td><td style="text-align:center">class Animal</td><td style="text-align:center"></td></tr></tbody></table><h4 id="如何使用"><a class="header-anchor" href="#如何使用"></a>如何使用</h4><ol><li><p><code>const message: string = &quot;2222&quot;;</code></p></li><li><p><code>const m2 = (name:string):string =&gt; &#123; return name.toLowerCase()+msg&#125;</code></p></li><li><p>字面量类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定alignment的值只能为后面三个值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printText</span>(<span class="params"><span class="attr">s</span>: <span class="built_in">string</span>, <span class="attr">alignment</span>:<span class="string">&quot;legt&quot;</span>|<span class="string">&quot;right&quot;</span>|<span class="string">&quot;center&quot;</span></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,alignment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>interface类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性完整才不会报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>:<span class="title class_">Cat</span> =  &#123;<span class="attr">name</span>:<span class="string">&#x27;小白&#x27;</span>，<span class="attr">age</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>class类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>class可以实现接口，也可以继承类</p></li><li><h6 id="在属性名后面加上？表示当前属性可选"><a class="header-anchor" href="#在属性名后面加上？表示当前属性可选"></a><strong>在属性名后面加上？<mark>表示当前属性可选</mark></strong></h6></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%8E%A2%E9%99%A9%E8%AE%B0(%E4%BA%8C)/"/>
      <url>/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%8E%A2%E9%99%A9%E8%AE%B0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="苍穹外卖实战项目总结-前端"><a class="header-anchor" href="#苍穹外卖实战项目总结-前端"></a>苍穹外卖实战项目总结(前端)</h1><p><mark><strong>前言</strong></mark></p><blockquote><p>对于前端项目的搭建，还是比较薄弱的环节，反正有挺多地方搞不明白的，现在的规划是从事后端方向，但我觉着全栈会是以后的主流，毕竟AI简化代码开发，开发的过程只会越来越简单，本项目的前端工程是基于Vue2搭建的，如果要我从零搭建这个环境我能行吗？现在看来是不行的，但只要一直学下去，一定也能做到的，希望今年过完年再来看这句话的时候，我已经能够自己完成一个独立项目的开发了，从零开始，前后端都靠自己搭建。</p><p>​2021-1-2</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Interceptor%E5%92%8CFilter/"/>
      <url>/Interceptor%E5%92%8CFilter/</url>
      
        <content type="html"><![CDATA[<h1 id="Interceptor和Filter"><a class="header-anchor" href="#Interceptor和Filter"></a>Interceptor和Filter</h1><blockquote><p>拦截器和过滤器的作用是将前端请求阻塞，只有通过了设置的逻辑后才会执行后面的代码</p><p>Interceptor是Spring框架中提供的组件，Filter是Servlet提供的组件</p><p>再Spring框架中使用Filter需要再启动类上加上<code>@ServletComponentScan</code>注解</p><ul><li>Filter需要在web.xml中配置，依赖于Servlet；</li><li>Interceptor需要在SpringMVC中配置，依赖于框架</li></ul><p><strong>拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调</strong></p><p><strong>拦截器中可以注入 Spring 的 Bean，能够获取到各种需要的 Service 来处理业务逻辑，而过滤器则不行。</strong></p></blockquote><h2 id="具体是什么"><a class="header-anchor" href="#具体是什么"></a>具体是什么</h2><h3 id="过滤器（Filter）"><a class="header-anchor" href="#过滤器（Filter）"></a>过滤器（Filter）</h3><ol><li><p>执行过程，请求和响应都会经过过滤器</p></li><li><p>实现，实现<code>javax.servlet</code>这个包下的接口，/*代表过滤所有资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤的资源路径</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//放行操作</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个过滤器之间可以形成过滤器链,<s>可以通过注解的形式指定过滤器的执行顺序</s>，默认按照名称的顺序先后执行，通过创建bean可以配置在Spring中的过滤器顺序，通过xml文件创建的过滤器执行顺序就是映射中配置的顺序，具体参照<a href="https://www.cnblogs.com/kuotian/p/13176186.html">这篇博客</a></p></li></ol><h3 id="拦截器（Interceptor）"><a class="header-anchor" href="#拦截器（Interceptor）"></a>拦截器（Interceptor）</h3><ol><li><p>执行过程，只会拦截Spring框架中的资源</p></li><li><p>创建拦截器,实现<code>HandlerInterceptor</code>接口，/**代表所有路径，/*只代表一级路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.interceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;目标资源执行前进入的方法&quot;</span>);</span><br><span class="line">        <span class="comment">//true代表放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标资源执行后进入的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;视图渲染完毕进入的方法&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注册拦截器，注册顺序即为执行顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//自动注册为Spring的一个Bean，自动检测并注册这个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestInterceptor1 testInterceptor1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestInterceptor2 testInterceptor2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(testInterceptor1)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.png&quot;</span>, <span class="string">&quot;/**/*.jpg&quot;</span>, <span class="string">&quot;/**/*.jpeg&quot;</span>)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(testInterceptor2).addPathPatterns(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/%E6%B5%8B%E8%AF%952/"/>
      <url>/%E6%B5%8B%E8%AF%952/</url>
      
        <content type="html"><![CDATA[<img src="/%E6%B5%8B%E8%AF%952/QQ_1734590960239.png" class="" title="QQ_1734590960239"><img src="/%E6%B5%8B%E8%AF%952/QQ_1734592152355.png" class="" title="QQ_1734592152355">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/MySQL/"/>
      <url>/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a class="header-anchor" href="#MySQL"></a>MySQL</h1><p>一种关系型数据库，以表的结构存储数据</p><h2 id="MySQL体系结构"><a class="header-anchor" href="#MySQL体系结构"></a>MySQL体系结构</h2><img src="/MySQL/QQ_1734499713309.png"  alt="QQ_1734499713309" style="zoom:50%;" /><h2 id="SQL语句"><a class="header-anchor" href="#SQL语句"></a>SQL语句</h2><ol><li><p>DDL-数据定义语言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; 查询所有数据库</span><br><span class="line"><span class="keyword">select</span> database();  查询当前数据库</span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 [<span class="keyword">default</span> charset 字符集] [<span class="keyword">collate</span> 排序规则];创建</span><br><span class="line"><span class="keyword">drop</span> database[if <span class="keyword">exists</span>] 数据库名; 删除</span><br><span class="line">use 数据库名; 使用</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE my_database;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用数据库</span></span><br><span class="line">USE my_database;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>DML-数据操作语言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通用法</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student`(`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zsr&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据，字符串和日期型数据包含在引号中</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student`(`name`,`pwd`,`sex`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zsr&#x27;</span>,<span class="string">&#x27;200024&#x27;</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="string">&#x27;gcc&#x27;</span>,<span class="string">&#x27;000421&#x27;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 省略字段 插入的字段要和数据库中的一一对应</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="string">&#x27;Bareth&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2000-02-04&#x27;</span>,<span class="string">&#x27;武汉&#x27;</span>,<span class="string">&#x27;1412@qq.com&#x27;</span>,<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改学员名字,指定条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zsr204&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定条件的情况,会改动所有表</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zsr204&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zsr&#x27;</span>,`address`<span class="operator">=</span><span class="string">&#x27;湖北&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过多个条件定位数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zsr204&#x27;</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;zsr&#x27;</span> <span class="keyword">AND</span> `pwd`<span class="operator">=</span><span class="string">&#x27;200024&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据(避免这样写,会全部删除)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>DQL-数据查询语言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">  [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">  [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">  [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">  [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;]; <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/MySQL/QQ_1734478327298.png"  alt="QQ_1734478327298" style="zoom:50%;" /></li><li><p>DCL-数据控制语言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> privileges <span class="keyword">ON</span> database.table <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span>:查询数据的权限。</span><br><span class="line"><span class="keyword">INSERT</span>:插入数据的权限。</span><br><span class="line"><span class="keyword">UPDATE</span> :更新数据的权限。</span><br><span class="line"><span class="keyword">DELETE</span>:删除数据的权限。</span><br><span class="line"><span class="keyword">ALL</span> PRIVILEGES:授予所有权限。</span><br><span class="line"><span class="comment">-- 查看用户权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;alice&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> privileges <span class="keyword">ON</span> database.table <span class="keyword">FROM</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="查询"><a class="header-anchor" href="#查询"></a>查询</h2><ol><li><p>基础查询 DISTINCT去除重复数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询全部学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `LoginPwd`,`StudentName` <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名 AS(可以给字段起别名,也可以给表起别名)</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` <span class="keyword">AS</span> 学号,`StudentName` <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> 学生表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 CONCAT(str1,str2,...)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名&#x27;</span>,`StudentName`) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询系统版本(函数)</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用来计算(计算表达式)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">53</span><span class="number">-90</span> <span class="keyword">AS</span> 计算结果;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询自增步长(变量)</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto_increment_increment</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有哪写同学参加了考试,重复数据要去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `StudentNo` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>条件查询 &lt;&gt;  != 都是不等于的意思</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure></li><li><p>模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询名字含d的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,`StudentName` <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `StudentName` <span class="keyword">LIKE</span> <span class="string">&#x27;%d%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询名字倒数第二个为d的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,`StudentName` <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `StudentName` <span class="keyword">LIKE</span> <span class="string">&#x27;%d_&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>分组查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组函数，分组后的字段</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组的字段</span><br><span class="line">【<span class="keyword">having</span> 分组后的筛选】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序列表】</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询不同科目的平均分、最高分、最低分且平均分大于90</span></span><br><span class="line"><span class="comment">-- 核心：根据不同的课程进行分组</span></span><br><span class="line"><span class="keyword">SELECT</span> SubjectName,<span class="built_in">AVG</span>(StudentResult),<span class="built_in">MAX</span>(`StudentResult`),<span class="built_in">MIN</span>(`StudentResult`)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` s</span><br><span class="line"><span class="keyword">on</span> r.SubjectNo<span class="operator">=</span>s.SubjectNo</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.SubjectNo</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(StudentResult)<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接 内连接查的是两个表的交集</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>,<span class="number">.2</span> <span class="keyword">WHERE</span> 条件...;</span><br><span class="line"><span class="comment">-- 显式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span>字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>[<span class="keyword">INNER</span>]<span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外连接</span></span><br><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span>[<span class="keyword">OUTER</span>]<span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件</span><br><span class="line"><span class="comment">-- 相当于查询表1(左表)的所有数据 包含 表1和表2交集部分的数据</span></span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span>[<span class="keyword">OUTER</span>]<span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件</span><br><span class="line"><span class="comment">-- 相当于查询表2(右表)的所有数据 包含 表1和表2交集部分的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自连接查询语法</span></span><br><span class="line"><span class="keyword">SELECT</span>字段列表 <span class="keyword">FROM</span> 表A 别名AJOIN 表A 别名B <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure></li><li><p>联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A …</span><br><span class="line"><span class="keyword">UNION</span> [ <span class="keyword">ALL</span> ]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B …;</span><br><span class="line"><span class="comment">-- 对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> 会将全部的数据直接合并在一起，<span class="keyword">union</span> 会对合并之后的数据去重</span><br></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> column1<span class="operator">=</span>(<span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> t2 );</span><br><span class="line"><span class="comment">-- 子查询外部的语句可以是INSERT/UPDATE/DELETE/SELECT的任何一个</span></span><br><span class="line"><span class="comment">-- 根据子查询位置，分为:WHERE之后、FROM之后、SELECT之后。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询‘课程设计’的所有考试结果（学号，科目编号，成绩）降序排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式一:使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,r.`SubjectNo`,`StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` s</span><br><span class="line"><span class="keyword">on</span> r.StudentNo<span class="operator">=</span>s.SubjectNo</span><br><span class="line"><span class="keyword">WHERE</span> SubjectName<span class="operator">=</span><span class="string">&#x27;课程设计&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 方式二:使用子查询（由里到外）</span></span><br><span class="line"><span class="keyword">SELECT</span> StudentNo,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> SubjectNo<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span> `subject`</span><br><span class="line"><span class="keyword">WHERE</span> SubjectName<span class="operator">=</span><span class="string">&#x27;课程设计&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>排序和分页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序列表 <span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span></span><br><span class="line"><span class="comment">-- asc 升序 desc降序 order by的位置一般放在查询语句的最后（除limit语句之外）</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="常用函数"><a class="header-anchor" href="#常用函数"></a>常用函数</h2> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数学运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>); <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">5.1</span>); <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">5.1</span>); <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND(); <span class="comment">-- 返回0~1之间的一个随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>); <span class="comment">-- 返回一个数的符号;0返回0;正数返回1;负数返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;我喜欢你&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;喜欢&#x27;</span>,<span class="string">&#x27;你&#x27;</span>); <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我喜欢&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;超级&#x27;</span>) <span class="comment">-- INSERT(str,pos,len,newstr) 从str的pos位置开始替换为长度为len的newstr</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;zsr&#x27;</span>); <span class="comment">-- 转大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;ZSR&#x27;</span>); <span class="comment">-- 转小写</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;zsrs&#x27;</span>,<span class="string">&#x27;s&#x27;</span>); <span class="comment">-- 返回第一次出现字串索引的位置</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;加油就能胜利&#x27;</span>,<span class="string">&#x27;加油&#x27;</span>,<span class="string">&#x27;坚持&#x27;</span>); <span class="comment">-- 替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;坚持就是胜利&#x27;</span>,<span class="number">3</span>,<span class="number">6</span>); <span class="comment">-- 返回指定的字符串(源字符串,截取位置,截取长度)</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;rsz&#x27;</span>); <span class="comment">-- 反转字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> now(); <span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>(); <span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE(); <span class="comment">-- 系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a class="header-anchor" href="#聚合函数"></a>聚合函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(StudentName) <span class="keyword">FROM</span> student; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`StudentResult`) <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`StudentResult`) <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`StudentResult`) <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`StudentResult`) <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="事务"><a class="header-anchor" href="#事务"></a>事务</h2><ol><li>原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性（Consistency）事务前后数据的完整性必须保持一致。</li><li>隔离性（Isolation）事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</li><li>持久性（Durability）事务一旦被提交则不可逆，被持久化到数据库中，接下来即使数据库发生故障也不应该对其有任何影响</li><li>默认MySQL的事务是自动提交的，执行一条DML语句，MySQL会隐式的提交事务</li></ol><h3 id="导致的问题"><a class="header-anchor" href="#导致的问题"></a>导致的问题</h3><table><thead><tr><th><strong>脏读</strong></th><th>指一个事务读取了另外一个事务未提交的数据。</th></tr></thead><tbody><tr><td><strong>不可重复读</strong></td><td>在一个事务内读取表中的某一行数据，多次读取结果不同。</td></tr><tr><td><strong>虚读(幻读)</strong></td><td>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</td></tr></tbody></table><table><thead><tr><th><strong>事务隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p><strong>可重复读是MySQL默认的隔离级别</strong></p><p>操作代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line"><span class="comment">--  事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"><span class="comment">-- 成功则提交，失败则回滚</span></span><br><span class="line"><span class="comment">-- 提交：持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">1</span>; <span class="comment">-- 开启自动提交</span></span><br><span class="line"><span class="comment">-- 其他操作</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名; <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名; <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名; <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure><h2 id="索引"><a class="header-anchor" href="#索引"></a>索引</h2><ol><li>什么是索引： 是帮助MySQL高效获取数据的<strong>数据结构</strong>。</li><li>索引设计原则<ol><li><strong>选择性原则</strong>：索引列应该具有高选择性，即列中不同值的数量与表中总行数的比例高。这样可以减少索引中的重复值，提高查询效率。</li><li><strong>最左前缀匹配原则</strong>：对于组合索引，MySQL会从左到右使用索引中的列。因此，将选择性最高的列放在最左边，可以最大化索引的使用效率。</li><li><strong>索引列的顺序</strong>：在组合索引中，列的顺序应该基于查询条件中列的出现顺序和选择性。</li><li><strong>避免冗余索引</strong>：如果一个索引包含了另一个索引的所有列，那么后者就是冗余的，应该删除。</li><li><strong>考虑查询模式</strong>：根据应用的查询模式设计索引。如果某些查询非常频繁，应该为这些查询创建索引。</li><li><strong>索引维护成本</strong>：索引虽然可以提高查询效率，但会增加插入、删除和更新操作的开销。因此，需要权衡索引带来的性能提升和维护成本。</li><li><strong>使用合适的索引类型</strong>：根据数据的特性和查询需求选择合适的索引类型。</li><li><strong>监控和优化</strong>：定期监控索引的使用情况，移除不常用的索引，优化常用的索引。</li><li><strong>考虑列的数据类型</strong>：某些数据类型（如VARCHAR）在创建索引时需要指定前缀长度，这会影响索引的效率。</li><li><strong>避免全表扫描</strong>：尽可能设计索引以避免全表扫描，特别是在大数据量的表中。</li></ol></li><li>使用索引的好处<ol><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化</li></ol></li></ol><h3 id="使用索引的优缺点"><a class="header-anchor" href="#使用索引的优缺点"></a>使用索引的优缺点</h3><ol><li>优点<ul><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul></li><li>缺点<ul><li>占据空间</li><li>提高了查询的效率，但降低了更新表的速度</li></ul></li><li>支持索引的引擎<ul><li>Memory引擎支持hash索引</li><li>InnoDB使用B+tree索引结构，具有自适应hash功能，hash索引根据B+Tree索引在指定条件下自动构建</li></ul></li><li>为什么InnoDB使用B+tree<ul><li>相对于二叉树，层级更少，搜索效率更高</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致<br>页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的<br>高度，导致性能降低;</li><li>相对Hash索引，B+tree支持范围匹配及排序操作</li></ul></li></ol><h3 id="索引分类"><a class="header-anchor" href="#索引分类"></a>索引分类</h3><ol><li><p>主键索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">唯一的标识，主键不可重复，只有一个列作为主键</span><br><span class="line">最常见的索引类型，不允许为空值</span><br><span class="line">确保数据记录的唯一性</span><br><span class="line">确定特定数据记录在数据库中的位置</span><br><span class="line"><span class="comment">-- 创建表的时候指定主键索引</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> tableName(</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">PRIMARY</span> INDEX (columeName)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构添加主键索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> tableName <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> INDEX (columnName)</span><br></pre></td></tr></table></figure></li><li><p>普通索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index 和 key 关键字都可以设置常规索引</span><br><span class="line">应加在查询找条件的字段</span><br><span class="line">不宜添加太多常规索引,影响数据的插入,删除和修改操作</span><br><span class="line"><span class="comment">-- 直接创建普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> tableName (columnName)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表的时候指定普通索引</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> tableName(</span><br><span class="line">  ......</span><br><span class="line">  INDEX [indexName] (columeName)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构添加普通索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> tableName <span class="keyword">ADD</span> INDEX indexName(columnName)</span><br></pre></td></tr></table></figure></li><li><p>唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值</span><br><span class="line">与主键索引的区别：主键索引只能有一个、唯一索引可以有多个</span><br><span class="line"><span class="comment">-- 直接创建唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> tableName(columnName)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表的时候指定唯一索引</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> tableName(  </span><br><span class="line">......</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX [indexName] (columeName)  </span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构添加唯一索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> tableName <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX [indexName] (columnName)</span><br></pre></td></tr></table></figure></li><li><p>全文索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">快速定位特定数据（百度搜索就是全文索引）</span><br><span class="line">在特定的数据库引擎下才有：MyISAM</span><br><span class="line">只能用于<span class="type">CHAR</span> , <span class="type">VARCHAR</span> , TEXT数据列类型</span><br><span class="line">适合大型数据集</span><br><span class="line"><span class="comment">-- 增加一个全文索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> `student` <span class="keyword">ADD</span> FULLTEXT INDEX `StudentName`(`StudentName`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXPLAIN 分析sql执行的情况</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(StudentName) AGAINST(<span class="string">&#x27;d&#x27;</span>); <span class="comment">-- 全文索引</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="索引的使用"><a class="header-anchor" href="#索引的使用"></a>索引的使用</h3><ol><li><p>使用原则</p><ul><li>索引不是越多越好，小数据量的表不需要加索引</li><li>不要对经常变动的数据增加索引</li><li>索引一般加在经常要查询的列上</li></ul></li><li><p>索引的创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名 (</span><br><span class="line">    字段名<span class="number">1</span> 数据类型 [完整性约束条件…],</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 [完整性约束条件…],</span><br><span class="line">    [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL] INDEX<span class="operator">|</span>KEY [索引名] (字段名[(长度)] [<span class="keyword">ASC</span> <span class="operator">|</span><span class="keyword">DESC</span>])</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>查看索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> <span class="keyword">table</span> name ;</span><br></pre></td></tr></table></figure></li><li><p>创建后添加索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法一：CREATE在已存在的表上创建索引</span></span><br><span class="line">       <span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL] INDEX 索引名</span><br><span class="line">       <span class="keyword">ON</span> 表名 (字段名[(长度)] [<span class="keyword">ASC</span> <span class="operator">|</span><span class="keyword">DESC</span>]) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二：ALTER TABLE在已存在的表上创建索引</span></span><br><span class="line">       <span class="keyword">ALTER TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL] </span><br><span class="line">       INDEX 索引名 (字段名[(长度)] [<span class="keyword">ASC</span> <span class="operator">|</span><span class="keyword">DESC</span>]) ;</span><br></pre></td></tr></table></figure></li><li><p>索引的删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名 <span class="keyword">ON</span> 表名;</span><br><span class="line"><span class="comment">-- 删除主键索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY KEY</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="存储引擎"><a class="header-anchor" href="#存储引擎"></a>存储引擎</h2><img src="/MySQL/QQ_1734499976631.png"  alt="QQ_1734499976631" style="zoom:50%;" /><ol><li><p>早期MySQL使用MyISAM引擎，5.5后InnoDB是MySQL默认的存储引擎</p></li><li><p>InnoDB特点</p><ul><li>DML操作遵循ACID模型，支持事务</li><li>行级锁，提高并发访问性能</li><li>支持外键FOREIGN KEY 约束，保证数据的完整性和正确性</li></ul></li><li><p>MyISAM</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul></li><li><p>Memory</p><ul><li>内存存放</li><li>hash索引</li></ul></li><li><p>InnoDB根据索引的存储形式，分为以下两种</p><img src="/MySQL/QQ_1734501073821.png"  alt="QQ_1734501073821" style="zoom:50%;" /></li><li><p>其他</p><img src="/MySQL/QQ_1734500515023.png"  alt="QQ_1734500515023" style="zoom:50%;" /></li></ol><h2 id="视图"><a class="header-anchor" href="#视图"></a>视图</h2><ol><li>是一种虚拟存在的表，视图中的数据并不在数据库中实际存在，行和列的数据来自定义视图的查询中使用的表，并且实在使用视图时动态产生的</li><li>视图只保存查询的SQL逻辑，不保存查询结果</li><li>可以一个视图创建另一个视图</li><li>好处<ul><li>简单：简化用户对数据的理解，简化他们的操作</li><li>安全：用户只能查询和修改他们所能见到的数据</li><li>数据独立：帮助用户屏蔽真实表结构带来的影响</li></ul></li></ol><h3 id="视图操作"><a class="header-anchor" href="#视图操作"></a>视图操作</h3><ol><li><p>创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE]<span class="keyword">VIEW</span> 视图名称((列名列表)】<span class="keyword">AS</span> <span class="keyword">SELECT</span>语句[<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure></li><li><p>查询视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看创建视图语句:<span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line">查看视图数据:<span class="keyword">SELECT</span><span class="operator">*</span><span class="keyword">FROM</span> 视图名称</span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方式一:<span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE]<span class="keyword">VIEW</span> 视图名称(列名列表)】<span class="keyword">AS</span> <span class="keyword">SELECT</span>语句[<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span>]<span class="keyword">CHECK</span> OPTION]</span><br><span class="line">方式二:<span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名称((列名列表)<span class="keyword">AS</span> <span class="keyword">SELECT</span>语句[<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span>]<span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] 视图名称  [,视图名称]...</span><br></pre></td></tr></table></figure></li></ol><h3 id="视图的更新"><a class="header-anchor" href="#视图的更新"></a>视图的更新</h3><img src="/MySQL/QQ_1734501671125.png"  alt="QQ_1734501671125" style="zoom:50%;" />## 存储过程<h3 id="概述和特点"><a class="header-anchor" href="#概述和特点"></a>概述和特点</h3><ol><li>事先经过编译并存储在数据库中的一段SQL语句的集合</li><li>数据库SQL语言层面的代码封装和复用</li><li>简化开发人员的工作</li><li>减少数据在数据库和应用程序之间的传输</li><li><strong>特点</strong><ul><li>封装，复用</li><li>可以接受参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul></li></ol><h3 id="使用"><a class="header-anchor" href="#使用"></a>使用</h3><ol><li><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称([.参数列表 ])</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SOL语句</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> 名称([参数]);</span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.ROUTINES <span class="keyword">WHERE</span> ROUTINE_SCHEMA<span class="operator">=</span><span class="string">&#x27;xx&#x27;</span>;<span class="comment">--查询指定数据库的存储过程及状态信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称;<span class="comment">--查询某个存储过程的定义</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> [if <span class="keyword">exists</span>] 存储过程的名称；</span><br></pre></td></tr></table></figure></li><li><p>命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在命令行中，执行创建存储过程的SQL时,</span><br><span class="line">需要通过关键字 delimiter 指定SQL语句的结束符。</span><br><span class="line">用$$结束</span><br></pre></td></tr></table></figure></li></ol><h3 id="变量"><a class="header-anchor" href="#变量"></a>变量</h3><ol><li><p>系统变量是MySQL服务器提供的，不是用户定义的，属于服务器层面，分为全局变量(GLOBAL)、会话变量(SESSION)</p></li><li><p>查看系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [SESSION<span class="operator">|</span><span class="keyword">GLOBAL</span>] VARIABLES；<span class="comment">-- 查看所有系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> [SESSION <span class="operator">|</span><span class="keyword">GLOBAL</span>] VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;.......&#x27;</span>;<span class="comment">-- 可以通过LKE模糊匹配方式查找变量</span></span><br><span class="line"><span class="keyword">SELECT</span> @@[SESSION<span class="operator">|</span><span class="keyword">GLOBAL</span>] 系统变量名;<span class="comment">-- 查看指定变量的值</span></span><br></pre></td></tr></table></figure></li><li><p>设置系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [SESSION<span class="operator">|</span><span class="keyword">GLOBAL</span>]系统变量名<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">SET</span> @@[SESSION<span class="operator">|</span><span class="keyword">GLOBAL</span>]系统变量名<span class="operator">=</span>值,</span><br></pre></td></tr></table></figure></li><li><p>如果没有指定SESSION/GLOBAL，默认是SESSION会话变量，mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 /etc/mny.cnf 中配置</p></li><li><p>用户定义变量</p><ul><li><p>作用域为当前连接</p></li><li><p>赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@var</span> name <span class="operator">=</span>expr [, <span class="variable">@var_name</span> <span class="operator">=</span> expr] ... ;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@var</span> name :<span class="operator">=</span>expr [, <span class="variable">@var</span> name :<span class="operator">=</span> expr]...</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@var</span> name :<span class="operator">=</span> expr [, <span class="variable">@var</span> name :<span class="operator">=</span> expr]...</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">INTO</span> <span class="variable">@var_name</span> <span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>用户定义变量无需声明或初始化，没有初始化取到的值为NULL</strong></p></li></ul></li><li><p>局部变量</p><ul><li><p>作用域为begin…end块</p></li><li><p>访问之前需要用DECLARE声明</p></li><li><p>参数</p><img src="/MySQL/QQ_1734502811637.png"  alt="QQ_1734502811637" style="zoom:50%;" /></li><li><p>用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称([<span class="keyword">IN</span><span class="operator">/</span><span class="keyword">OUT</span><span class="operator">/</span>INQUT 参数名 参数类型 ])</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">END</span> ;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="游标"><a class="header-anchor" href="#游标"></a>游标</h3><ol><li><p><strong>用来存储查询的结果集的数据类型</strong></p></li><li><p>存储过程和函数中可以使用游标对结果集进行循环的处理</p></li><li><p>具体使用</p><ul><li><p>声明游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 游标名称 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> 查询语句</span><br></pre></td></tr></table></figure></li><li><p>打开游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> 游标名称;</span><br></pre></td></tr></table></figure></li><li><p>获取游标记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fetch</span> 游标名称 info 变量[,变量];</span><br></pre></td></tr></table></figure></li><li><p>关闭游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">close</span> 游标名称;</span><br></pre></td></tr></table></figure><img src="/MySQL/QQ_1734503174402.png"  alt="QQ_1734503174402" style="zoom:50%;" /></li></ul></li></ol><h2 id="存储函数"><a class="header-anchor" href="#存储函数"></a>存储函数</h2><ol><li><p>有返回值的存储过程，存储函数的参数类型只能是IN类型的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 存储函数名称([参数列表])</span><br><span class="line"><span class="keyword">RETURNS</span> type [characteristic ...</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">RETURN</span> ....</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line">characteristic说明:</span><br><span class="line"><span class="keyword">DETERMINISTIC</span>:相同的输入参数总是产生相同的结果</span><br><span class="line"><span class="keyword">NO</span> SOL:不包含 <span class="keyword">SQL</span>语句。</span><br><span class="line"><span class="keyword">READS</span> SOL DATA:包含读取数据的语句，但不包含写入数据的语句</span><br></pre></td></tr></table></figure></li></ol><h2 id="触发器"><a class="header-anchor" href="#触发器"></a>触发器</h2><h3 id="定义"><a class="header-anchor" href="#定义"></a>定义</h3><p>数据库对象在执行insert/update/delete之前或之后，触发并执行触发器中定义的SQL语句的集合</p><p>保证数据的完整性、日志记录、数据校验</p><h3 id="类型"><a class="header-anchor" href="#类型"></a>类型</h3><img src="/MySQL/QQ_1734503410657.png"  alt="QQ_1734503410657" style="zoom:50%;" /><h3 id="语法"><a class="header-anchor" href="#语法"></a>语法</h3><ol><li><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="keyword">trigger</span> name</span><br><span class="line">BEFORE<span class="operator">/</span>AFTER <span class="keyword">INSERT</span><span class="operator">/</span><span class="keyword">UPDATE</span><span class="operator">/</span><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> tbl name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">--行级触发器</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">trigger</span> stmt ;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> triggers [schema_name.] trigger_name; <span class="comment">-- 没有指定schema_name就是当前数据库</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="锁"><a class="header-anchor" href="#锁"></a>锁</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制，锁冲突是影响数据库并发访问性能的一个重要因素</p><h3 id="分类"><a class="header-anchor" href="#分类"></a>分类</h3><ol><li><p>全局锁:锁定数据库中的所有表。</p><ul><li>加锁后整个实例就处于只读状态，后续的DML,DDL,已经更新的操作事务语句都会被阻塞</li><li>做全库的逻辑备份，获取一致的视图性，保证数据的完整性</li><li>特点<ol><li>在主库上备份，备份期间都不能执行更新，业务停摆</li><li>在从库上备份，备份期间从库不能执行主库同步过来的二进制日志，主从延迟</li></ol></li></ul></li><li><p>表级锁:每次操作锁住整张表。</p><ul><li><p>发生锁冲突的概率最高，并发度最低</p></li><li><p>分为表锁，元数据锁，意向锁</p><ol><li><p>表锁</p><ul><li><p>表共享读锁(read lock)：不会阻塞其他客户端读，会阻塞写</p></li><li><p>表独占写锁(write lock) ：只在本地客户端可读可写</p></li><li><p>语法</p><img src="/MySQL/QQ_1734504218984.png"  alt="QQ_1734504218984" style="zoom:50%;" /></li></ul></li><li><p>元数据锁（MDL）</p><ul><li>系统自动控制，无需显式使用，访问任意一张表时会自动加上</li><li>维护表元数据的一致性</li><li>MySQL5.5中引入了MDL<ol><li>对一张表进行增删改查时加MDL读锁(共享)</li><li>对表结构进行变更操作时加MDL写锁(排他)</li></ol></li></ul></li><li><p>意向锁</p><ul><li>解决InnoDB中行锁和表锁冲突的问题</li><li>使得表锁不用检查每行数据是否加锁，使用意向锁减少表锁的检查</li><li><img src="/MySQL/QQ_1734504607748.png"  alt="QQ_1734504607748" style="zoom:33%;" /></li></ul></li></ol></li></ul></li><li><p>行级锁:每次操作锁住对应的行数据。</p><ul><li>InnoDB通过对索引上的索引项加锁实现的,没有索引对所有字段加锁升级为表锁</li><li>分为行锁，间隙锁，临键锁</li><li>InnoDB实现了两种类型的行锁<ul><li>共享锁(s)：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁</li><li>排他锁(x)：允许获取排他锁的事务更新数据，阻止其他事务获得相同的数据集的共享锁和排他锁</li></ul></li><li>间隙锁唯一目的是为了防止其他事务插入间隙，间隙锁可以共存，一个事务采用间隙锁不会阻止另一个事务在同一间隙上采用间隙锁</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/SpringBoot/"/>
      <url>/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a class="header-anchor" href="#SpringBoot"></a>SpringBoot</h1><blockquote><ol><li>简化Spring开发的框架</li></ol></blockquote><h2 id="优点"><a class="header-anchor" href="#优点"></a>优点</h2><blockquote><ol><li>可以快速独立的创建Spring及主流框架集成的项目。</li><li>使用了嵌入式的Servlet容器,无需生成WAR包</li><li>我们在使用SpringBoot进行开发时可以使用Starts启动依赖，而SpringBoot会自动地把所需要的其他相关技术jar包导入.</li><li>.大量的自动配置，极大地简化了我们的开发。</li><li>无需XML文件的大量编写,也不会生成代码，底层是利用SpringBoot写好的API来调用实现,开箱即用</li><li>SpringBoot也有运维监控项目的功能</li><li>SpringBoot与云计算的集成</li></ol></blockquote><h2 id="具体实现"><a class="header-anchor" href="#具体实现"></a>具体实现</h2><blockquote><ol><li>相关依赖</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>命令行启动需要依赖maven插件支持</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>程序启动,会提供主程序启动类</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot06ConfigFileApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot06ConfigFileApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>其他注意的点</li></ol><ul><li>SpringBoot在创建项目的时候，采用jar的打包方式</li><li>引导类就是项目入口，运行main方法就可以启动项目</li><li>引导类起到配置类的作用，它会将它及其所在的子包全部扫描一遍</li></ul></blockquote><h2 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h2><blockquote><ol><li><p>核心配置文件名为application</p></li><li><p>配置文件加载顺序</p></li></ol><p>application.properties&gt;application.yml&gt;application.yaml</p><ol start="3"><li>yaml</li></ol><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格(不允许使用Tab键)</li><li>属性值前面添加空格(属性名与属性值之间使用冒号+空格作为分隔</li><li>#表示注释</li><li>核心规则:数据前面要加空格与冒号隔开</li></ul><ol start="4"><li>如何使用</li></ol><ul><li><p>设置属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装yaml对象格式数据必须先声明当前实体类受Spring管控</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//使用@ConfigurationProperties注解定义当前实体类读取配置属性信息，通过prefix属性设置读取哪个数据</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>还可以通过vauel注入的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@Value读取单一属性数据</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String lesson;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer port;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String subject_00;</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><strong>多环境配置</strong></li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Spring和Maven多环境兼容"><a class="header-anchor" href="#Spring和Maven多环境兼容"></a>Spring和Maven多环境兼容</h2><blockquote><ol><li>Maven设置中设置多环境</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol start="2"><li>SpringBoot中</li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">$&#123;profile.active&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="SpringBoot整合SSM"><a class="header-anchor" href="#SpringBoot整合SSM"></a>SpringBoot整合SSM</h2><h3 id="整合JUnit"><a class="header-anchor" href="#整合JUnit"></a>整合JUnit</h3><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">package</span> <span class="string">com.itheima.service;</span></span><br><span class="line"></span><br><span class="line"><span class="string">import</span> <span class="string">com.itheima.domain.Book;</span></span><br><span class="line"><span class="string">import</span> <span class="string">org.junit.jupiter.api.Test;</span></span><br><span class="line"><span class="string">import</span> <span class="string">org.springframework.beans.factory.annotation.Autowired;</span></span><br><span class="line"><span class="string">import</span> <span class="string">org.springframework.boot.test.context.SpringBootTest;</span></span><br><span class="line"><span class="string">import</span> <span class="string">java.util.List;</span></span><br><span class="line"></span><br><span class="line"><span class="string">@SpringBootTest</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">@Autowired</span></span><br><span class="line">    <span class="string">private</span> <span class="string">BookService</span> <span class="string">bookService;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">@Test</span></span><br><span class="line">    <span class="string">public</span> <span class="string">void</span> <span class="string">testGetById()</span>&#123;</span><br><span class="line">        <span class="string">Book</span> <span class="string">book</span> <span class="string">=</span> <span class="string">bookService.getById(2);</span></span><br><span class="line">        <span class="string">System.out.println(book);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">@Test</span></span><br><span class="line">    <span class="string">public</span> <span class="string">void</span> <span class="string">testGetAll()</span>&#123;</span><br><span class="line">        <span class="string">List&lt;Book&gt;</span> <span class="string">all</span> <span class="string">=</span> <span class="string">bookService.getAll();</span></span><br><span class="line">        <span class="string">System.out.println(all);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="整合Mybatis"><a class="header-anchor" href="#整合Mybatis"></a>整合Mybatis</h3><blockquote><ol><li>配置数据库连接</li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><ol start="2"><li>@Mapper代替Mybatis扫包的动作</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 简化Spring开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven进阶</title>
      <link href="/Maven%E8%BF%9B%E9%98%B6/"/>
      <url>/Maven%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven进阶"><a class="header-anchor" href="#Maven进阶"></a>Maven进阶</h1><h2 id="分模块开发"><a class="header-anchor" href="#分模块开发"></a>分模块开发</h2><blockquote><ol><li><p>通过<code>install</code>指令安装模块到本地仓库</p></li><li><p>导入分出去模块的坐标</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--      依赖domain运行 j 跟加入jar包一样--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h2><h3 id="依赖管理"><a class="header-anchor" href="#依赖管理"></a>依赖管理</h3><blockquote> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置管理的模块名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_04_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="依赖传递"><a class="header-anchor" href="#依赖传递"></a>依赖传递</h3><blockquote><ul><li>直接依赖:在当前项目中通过依赖配置建立的依赖关系</li></ul><p>A-&gt;B,B直接引用A中的依赖</p><ul><li>间接依赖:被资源的资源如果依赖其他资源，当前项目间接依赖其他资源</li></ul><p>A-&gt;B-&gt;C,C可以用A中的依赖</p></blockquote><h3 id="依赖冲突"><a class="header-anchor" href="#依赖冲突"></a>依赖冲突</h3><blockquote><ol><li>通过Maven提供的依赖调解原则</li></ol><ul><li>路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul><ol start="2"><li>通过锁定版本解决冲突问题</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取版本号, 以后修改方便--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--锁定jar包版本--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br></pre></td></tr></table></figure><ol start="3"><li>排除依赖</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖dao运行--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_04_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="可选依赖"><a class="header-anchor" href="#可选依赖"></a>可选依赖</h3><blockquote><ol><li>不透明</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="聚合和继承"><a class="header-anchor" href="#聚合和继承"></a>聚合和继承</h2><h3 id="聚合"><a class="header-anchor" href="#聚合"></a>聚合</h3><blockquote><ol><li><p>聚合模块管理的打包方式 <strong>pom</strong></p></li><li><p>设置管理的模块名称</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置管理的模块名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_04_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>作用</li></ol><p>使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建</p></blockquote><h3 id="继承"><a class="header-anchor" href="#继承"></a>继承</h3><blockquote><ol><li><p>依赖关系的继承</p></li><li><p>子工程使用父工程中的可选依赖时，无需指定版本号，由父工程提供，子工程也可以定义父工程中没有的依赖</p></li><li><p>配置</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置当前工程继承自parent工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_01_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="两者之间的区别"><a class="header-anchor" href="#两者之间的区别"></a>两者之间的区别</h3><blockquote><ol><li>聚合简化了构建过程，允许一次性构建多个模块</li><li>继承则通过父POM消除了配置重复，子模块可继承父POM的配置</li><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li><li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li><li><strong>一般模块的父类也是管理聚合的模块</strong></li></ol></blockquote><h2 id="工程版本"><a class="header-anchor" href="#工程版本"></a>工程版本</h2><p>SNAPSHOT(快照版本)<br>项目开发过程中临时输出的版本，称为快照版本快照版本会随着开发的进展不断更新<br>RELEASE(发布版本)<br>项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</p><h2 id="多环境开发"><a class="header-anchor" href="#多环境开发"></a>多环境开发</h2><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置多环境 在父工程中配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--设定是否为默认启动环境--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置资源目录，并设置能够解析$&#123;&#125;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--排除掉不参与测试的内容--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/BookServiceTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="私服"><a class="header-anchor" href="#私服"></a>私服</h2><blockquote><ol><li><p>独立的服务器，解决团队间的资源共享</p></li><li><p>nexus服务器</p></li><li><p>具体实现</p></li></ol>  <img src="/Maven%E8%BF%9B%E9%98%B6/QQ_1734420048593.png" class="" title="QQ_1734420048593"><ol start="4"><li>mvn deploy 发布到私服上</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 分模块开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring进阶（二）</title>
      <link href="/Spring%E8%BF%9B%E9%98%B6%E4%BA%8C/"/>
      <url>/Spring%E8%BF%9B%E9%98%B6%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring进阶（二）"><a class="header-anchor" href="#Spring进阶（二）"></a>Spring进阶（二）</h1><h2 id="利用AOP进行异常处理"><a class="header-anchor" href="#利用AOP进行异常处理"></a>利用AOP进行异常处理</h2><ol><li><p>出现异常的原因</p><ul><li>框架内部抛出的异常:因使用不合规导致</li><li>数据层抛出的异常:因外部服务器故障导致(例如:服务器访问超时)</li><li>业务层抛出的异常:因业务逻辑书写错误导致(例如:遍历业务书写操作，导致索引异常等</li><li>表现层抛出的异常:因数据收集、校验等规则导致(例如:不匹配的数据类型间导致异常)</li><li>工具类抛出的异常:因工具类书写不严谨不够健壮导致(例如:必要释放的连接长期未释放等)</li></ul></li><li><p>将所有异常都抛到表现层</p></li></ol><h3 id="异常处理器"><a class="header-anchor" href="#异常处理器"></a>异常处理器</h3><ul><li><p>集中统一的处理项目中的异常</p></li><li><p>具体实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"> <span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">     <span class="comment">//@ExceptionHandler用于设置当前处理器类对应的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">     <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">         <span class="comment">//记录日志</span></span><br><span class="line">         <span class="comment">//发送消息给运维</span></span><br><span class="line">         <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">     <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">     <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">     <span class="keyword">public</span> Result <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">         <span class="comment">//记录日志</span></span><br><span class="line">         <span class="comment">//发送消息给运维</span></span><br><span class="line">         <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOW_ERR,<span class="literal">null</span>,<span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>自定义异常,自己对项目异常分类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.exception;</span><br><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring整合SSM"><a class="header-anchor" href="#Spring整合SSM"></a>Spring整合SSM</h2><h3 id="整合流程"><a class="header-anchor" href="#整合流程"></a>整合流程</h3><blockquote><ol><li><p>创建工程</p></li><li><p>SSM整合</p></li></ol><ul><li><p>Spring</p><p>SpringConfig</p></li><li><p>Mybatis</p><p>MybatisConfig</p><p>JdbcConfig</p><p>jdbc.properties</p></li><li><p>SpringMVC</p><p>ServletConfig</p><p>SpringMvcConfig</p></li></ul><ol start="3"><li>功能模块</li></ol><ul><li><p>表与实体类</p></li><li><p>dao(接口+实现类)</p></li><li><p>service(接口+实现类)</p><p>业务层接口测试（整合Junit）</p></li><li><p>controller</p><p>表现层接口测试（PostMan）</p><p>表现层数据封装（Result设置统一数据返回格式）</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring整合SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST概述</title>
      <link href="/REST%E9%A3%8E%E6%A0%BC/"/>
      <url>/REST%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="REST概述"><a class="header-anchor" href="#REST概述"></a>REST概述</h1><h2 id="什么是REST"><a class="header-anchor" href="#什么是REST"></a>什么是REST</h2><blockquote><ol><li>一种软件架构风格</li><li>资源在网络中以某种表现形式进行状态转移</li><li>一种组织Web服务的架构</li><li>目标是为了创建具有良好扩展性的分布式系统</li></ol></blockquote><h2 id="核心原则"><a class="header-anchor" href="#核心原则"></a>核心原则</h2><blockquote><ul><li><p>无状态性(Statelessness) ：服务器端不保存客户端的状态信息</p></li><li><p>资源导向(Resource-Orientation) ：将系统的功能抽象为资源的集合，并通过唯一的标识符（URI）来访问和操作这些资源</p></li><li><p>统一接口(Uniform Interface)  ：使用统一的接口规范来定义资源的操作方式</p></li><li><p>分层系统(Layered System)：将网络中的组件分为多个层次，每个层次都只关注自己的功能</p></li><li><p>可缓存(Cacheable) ：使用缓存来改善系统的性能和可伸缩性。服务器可以通过在响应中添加Cache-Control头部来指示响应是否可以被缓存。</p></li></ul></blockquote><h2 id="优缺点"><a class="header-anchor" href="#优缺点"></a>优缺点</h2><blockquote><ul><li>优点</li></ul><ol><li>书写简化</li><li>可扩展性</li><li>可移植性</li><li>可测试性</li><li>隐藏了资源的访问行为</li></ol><ul><li>缺点</li></ul><ol><li>无状态约束</li><li>标准化程度不足</li><li>性能问题</li><li>缺乏灵活性</li></ol></blockquote><h2 id="具体使用"><a class="header-anchor" href="#具体使用"></a>具体使用</h2><blockquote><ol><li>使用行为动作区分对资源的操作</li></ol><ul><li>GET (查询)</li><li>POST (新增)</li><li>DELETE (删除)</li><li>PUT (修改)</li></ul><ol start="2"><li><p>描述模块通常使用复数，加s</p></li><li><p><strong>常用注解</strong></p></li></ol><ul><li>@ResstController  取代Controller和ResponseBody,表示启用REST风格</li><li>@RequestParam用于接收url地址传参或表单传参   ？后面的</li><li>@RequestBody用于接收json数据</li><li>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li></ul><ol start="4"><li>具体使用</li></ol><p>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody应用较广<br>如果发送非json格式数据，选用@RequestParam接收请求参数<br>采用RESTfu1进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</p><ol start="5"><li>入门案例</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Book;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一每一个控制器方法返回值</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.SAVE_OK:Code.SAVE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.UPDATE_OK:Code.UPDATE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.DELETE_OK:Code.DELETE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookService.getAll();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,bookList,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>一般会定义一个Result类，<strong>统一数据返回结果</strong>，设置统一数据返回结果编码，code也可以自己设置成常量的形式</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后端统一返回结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.data = object;</span><br><span class="line">        result.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt;     <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.msg = msg;</span><br><span class="line">        result.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件架构风格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件架构风格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring进阶（一）</title>
      <link href="/Spring%E8%BF%9B%E9%98%B6%E4%B8%80/"/>
      <url>/Spring%E8%BF%9B%E9%98%B6%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring进阶（一）"><a class="header-anchor" href="#Spring进阶（一）"></a>Spring进阶（一）</h1><h2 id="Spring整合Mybatis"><a class="header-anchor" href="#Spring整合Mybatis"></a>Spring整合Mybatis</h2><blockquote><ol><li>将MyBatis的DataSource交给Spring IoC容器创建并管理，使用第三方数据库连接池(Druid，C3P0等)代替MyBatis内置的数据库连接池</li><li>将MyBatis的SqlSessionFactory交给Spring IoC容器创建并管理，使用spring-mybatis整合jar包中提供的SqlSessionFactoryBean类代替项目中的MyBatisUtil工具类</li><li>将MyBatis的接口代理方式生成的实现类，交给Spring IoC容器创建并管理</li></ol></blockquote><h3 id="Mybatis核心对象分析"><a class="header-anchor" href="#Mybatis核心对象分析"></a>Mybatis核心对象分析</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionfactoryBuilder</span>()</span><br><span class="line"><span class="comment">//2.加载SqlMapconfig.xml配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);,</span><br><span class="line"><span class="comment">//3.创建sqlSessionFactory对象</span></span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span></span><br><span class="line"> <span class="operator">=</span>sqlSessionFactoryBuilder.build(inputstream);</span><br><span class="line"> <span class="comment">//4.获取sqlSession</span></span><br><span class="line"> SqlSession sqlSession=sqlsessionFactory.openSession();</span><br><span class="line"> <span class="comment">//5.执行SqlSession对象执行查询，获取结果user</span></span><br><span class="line"> <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span>sqlSession.getMapper(AccountDao.class)</span><br><span class="line"> <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span>accountDao.findById(<span class="number">2</span>);</span><br><span class="line"> System.out.println(ac);</span><br><span class="line"> <span class="comment">//释放资源</span></span><br><span class="line"> sqlsession.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hngy.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hngy.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="利用Spring开始整合"><a class="header-anchor" href="#利用Spring开始整合"></a>利用Spring开始整合</h3><blockquote><ol><li>导入相应的maven坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- MyBatis核心Jar包 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- MySql驱动 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok工具 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- Spring核心 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- Spring-test测试 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- slf4j日志包 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- druid阿里的数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- Spring整合ORM 自动导入spring-orm，spring-jdbc，spring-tx--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- Spring整合MyBatis --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>设置配置文件</li></ol><ul><li><p>设置Spring配置，通过<strong>注解</strong>的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//要扫的包</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//@PropertySource：加载类路径jdbc.properties文件</span></span><br><span class="line">  <span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="comment">//将jdbc和mybatis的配置加入到要扫的包下</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置jdbc.properties,创建jdbcConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">      <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库池连接对象</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置MybatisConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">    <span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line">    <span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">          <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">          <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">              <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">              <span class="comment">//设置MyBatis的别名解析路径，MyBatis会在这个包下查找类，并为这些类创建别名</span></span><br><span class="line">              ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">              ssfb.setDataSource(dataSource);</span><br><span class="line">              <span class="keyword">return</span> ssfb;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">          <span class="meta">@Bean</span></span><br><span class="line">          <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">              <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">             <span class="comment">//设置要扫的包</span></span><br><span class="line">                  msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">             <span class="keyword">return</span> msc;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">- 使用</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">      <span class="keyword">import</span> com.itheima.config.SpringConfig;</span><br><span class="line">  <span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line">  <span class="keyword">import</span> com.itheima.service.AccountService;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line">           </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App2</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">           </span><br><span class="line">              <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line">           </span><br><span class="line">          <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">          System.out.println(ac);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">           </span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="SpringMvc"><a class="header-anchor" href="#SpringMvc"></a>SpringMvc</h2><blockquote><ol><li><p>一种基于Java实现MVC模型的轻量级Web框架</p></li><li><p>web程序工作流程、</p></li></ol><p>三层架构</p><ul><li><p>web程序通过浏览器访问前端页面，发送异步请求到后端服务器</p></li><li><p>后台服务器采用三层架构进行功能开发</p><ul><li>表现层负责接收请求和数据然后将数据转交给业务层</li><li>业务层负责调用数据层完成数据库表的增删改查，并将结果返给表现层</li><li>表现层将数据转换成json格式返回给前端</li></ul></li><li><p>前端页面将数据进行解析最终展示给用户。</p></li></ul><p>表现层与数据层的技术选型:</p><ul><li>数据层采用Mybatis框架</li><li>变现层采用SpringMVC框架，SpringMVC<mark>主要</mark>负责的内容有:<ul><li>controller如何接收请求和数据</li><li>如何将请求和数据转发给业务层</li><li>如何将响应数据转换成json发回到前端</li></ul></li></ul></blockquote><h3 id="SpringMVC程序流程"><a class="header-anchor" href="#SpringMVC程序流程"></a>SpringMVC程序流程</h3><blockquote><p>1.浏览器发送请求到Tomcat服务器</p><p>2.Tomcat服务器接收到请求后，会将请求交给SpringMVC中的==DispatcherServlet[前端控制器]==来处理请求</p><p>3.DispatcherServlet不真正处理请求，只是按照对应的规则将请求分发到对应的Bean对象</p><p>4.Bean对象是有我们自己编写来处理不同的请求，每个Bean中可以处理一个或多个不同的请求url</p><p>5.DispatcherServlet和Bean对象都需要交给Spring容器来进行管理</p></blockquote><h3 id="拦截器"><a class="header-anchor" href="#拦截器"></a>拦截器</h3><blockquote><ol><li>拦截器和过滤器的区别</li></ol><p>归属不同:Filter属于servlet技术，Interceptor属于SpringMVc技术<br>拦截内容不同:Filter对所有访问进行增强，Interceptor仅针对SpringMVc的访问进行增强</p><ol start="2"><li>拦截器执行顺序</li></ol><p>preHandle<br>return true<br>controller<br>postHandle<br>afterCompletion<br>return false<br>结束</p><ol start="3"><li><p>拦截器链的运行顺序<br>preHandle:与配置顺序相同，必定运行<br>postHandle:与配置顺序相反，可能不运行<br>aftercompletion:与配置顺序相反，可能不运行</p></li><li><p>入门案例</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment">//注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line">    <span class="comment">//返回值类型可以拦截控制的执行，true放行，false终止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>+contentType);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>配置类中配置</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.controller.interceptor.ProjectInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*静态资源过滤*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="具体实现"><a class="header-anchor" href="#具体实现"></a>具体实现</h3><blockquote><ul><li>导入坐标</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1. 导入SpringMVC与servlet的坐标--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>创建控制器类， @Controller位于SpringMVC控制器类定义上方 设定SpringMVC的核心控制器bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.制作控制器类，等同于Servlet</span></span><br><span class="line"><span class="comment">//2.1必须是一个spring管理的bean</span></span><br><span class="line"><span class="comment">//2.2定义具体处理请求的方法</span></span><br><span class="line"> <span class="comment">//2.3设置当前方法的访问路径</span></span><br><span class="line"><span class="comment">//2.4设置响应结果为json数据</span></span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">     <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.定义配置类加载Controller对应的bean</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Tomcat的Servlet容器配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.定义servlet容器的配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springMVC配置</span></span><br><span class="line">   <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line">       <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">//加载指定配置类</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Tomcat接收的请求哪些归SpringMVC处理</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置spring相关配置</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种加载方式，<mark><strong>重要</strong></mark></p></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletcontainersInitconfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="相关注解"><a class="header-anchor" href="#相关注解"></a>相关注解</h3><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span> 设置当前控制器方法请求访问路径 位于SpringMVC控制器类或方法定义上方</span><br><span class="line"><span class="meta">@ResponseBody</span>   设置当前控制器方法响应内容为当前返回值，无需解析 位于SpringMVC控制器类或方法定义上方</span><br><span class="line"><span class="meta">@Controller</span> 定SpringMVC的核心控制器bean 位于SpringMVC控制器类定义上方</span><br><span class="line"><span class="meta">@ComponentScan</span> 设置spring配置类扫描路径，用于加载使用注解格式定义的bean 位于类定义上方</span><br><span class="line"><span class="meta">@EnableWebMvc</span> 开启json数据类型自动转换</span><br><span class="line"><span class="meta">@RequestParam</span> 当形参和表单提交过来的元素名称不对应时</span><br><span class="line"><span class="meta">@ExceptionHandler</span> 设置指定异常的处理方案，功能等同于控制器方法，出现异常后终止原始控制器执行，并转入当前方法执行  专用于异常处理器的上方</span><br><span class="line"><span class="meta">@Transactional</span> 开启事务</span><br></pre></td></tr></table></figure><ol start="6"><li>相关方法的作用</li></ol><ul><li>AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化Web3.0容器的抽象类</li><li>AbstractDispatcherServletInitializer提供三个接口方法供用户实现</li><li>createRootApplicationContext()方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当前方法进行，使用方式同createServletApplicationContext()</li><li>createServletApplicationContext()方法，创建Servlet容器时，加载SpringMVC对应的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用范围为ServletContext范围，即整个web容器范围</li><li>ngetServletMappings()方法，设定SpringMVC对应的请求映射路径，设置为/表示拦截所有请求，任意请求都将转入到SpringMVC进行处理</li><li>createServletApplicationContext用来加载SpringMVC环境</li><li>createRootApplicationContext用来加载Spring环境</li></ul></blockquote><h3 id="避免Spring错误的加载到bean"><a class="header-anchor" href="#避免Spring错误的加载到bean"></a>避免Spring错误的加载到bean</h3><blockquote><ul><li><p>SpringMVC相关的bean(表现层bean)</p></li><li><p>Spring控制的bean</p><ol><li>业务bean(service)</li></ol></li></ul><ol start="2"><li>功能bean(DataSoure)</li></ol><ul><li><p>SpringMVC加载的bean对应的包都在com.xxx.controller包内</p></li><li><p>方法</p><ol><li><p>将spring加载bean的范围为com.xxx,排除掉controller包内的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">@configuration</span></span><br><span class="line">     <span class="comment">//@ComponentScan(&#123;&quot;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span></span><br><span class="line">      <span class="meta">@Componentscan(value=&quot;com.itheima&quot;,</span></span><br><span class="line"><span class="meta">     excludeFilters =@ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">     type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">     classes =controllerfclass</span></span><br><span class="line"><span class="meta">     public class springconfig &#123;</span></span><br><span class="line"><span class="meta">     &#125;</span></span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta"> spring加载的bean设定扫面的范围为精准范围</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">### 其他需要注意的</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;- 当**使用ajax提交**时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以 直接接收集合数据而**无需使用POJO进行包装**</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;- SpringMVC的前端控制器 DispatcherServlet的url-pattern配置的是/,代表对所有的资源都进行过滤操作，通过以下配置放行静态资源</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> ```xml</span></span><br><span class="line"><span class="meta">  &lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;/&gt; </span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">  &lt;mvc:default-servlet-handler/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>配置类配置</strong></p></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.itheima.config;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">     <span class="comment">//设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//当访问/pages/????时候，从/pages目录下查找内容</span></span><br><span class="line">         registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">         registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>封装集合对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;集合参数传递 likes ==&gt; &quot;</span>+ likes);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list param&#x27;&#125;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//SpringMVC将List看做是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象，所以会报错</span></span><br><span class="line"> <span class="comment">//:使用`@RequestParam`注解</span></span><br></pre></td></tr></table></figure><ul><li>JSON数据,用POJO类的话属性名对应上就行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list common(json)参数传递 list ==&gt; &quot;</span>+likes);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数带@RequestBody的区别</strong></p><ul><li><p>带注解的方法通常用于处理JSON格式的数据，不带注解的方法可以处理任何类型的请求参数，只要它们能够与<code>pojo</code>对象的属性名匹配</p></li><li><p>带注解的方法从请求体中接收JSON数据并将其转为POJO对象，不带注解的从请求参数中获取数据，并将其绑定到POJO对象</p></li><li><p>字符串的返回</p></li></ul><img src="/Spring进阶一/undefined"  alt="QQ_1734395514145" style="zoom:50%;" /></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简化开发 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring初级</title>
      <link href="/Spring%E5%88%9D%E9%98%B6/"/>
      <url>/Spring%E5%88%9D%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring初阶"><a class="header-anchor" href="#Spring初阶"></a>Spring初阶</h1><h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2><ul><li><p>Spring是一款主流的Java EE 轻量级开源框架，目的是用于简化Java企业级引用的开发难度和开发周期</p></li><li><p>Spring框架是一个分层的面向切面的Java应用程序的一站式解决框架</p></li><li><p>两个核心模块：IOC和AOP</p><p>IOC：控制反转，将对象交给spring容器管理</p><p>AOP：面向切面编程，封装多个类公共行为</p></li><li><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象</p></li><li><p>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</p></li><li><p>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库</p></li><li><p>系统架构</p><img src="/Spring%E5%88%9D%E9%98%B6/QQ_1733962956440.png" class="" title="QQ_1733962956440"></li></ul><h2 id="IOC"><a class="header-anchor" href="#IOC"></a>IOC</h2><ul><li><p>什么是控制反转：由主动new产生对象转换为由外部提供对象，将对象创建权由程序转到外部</p></li><li><p>spring提供了一个IOC容器用来充当外部</p><ul><li>IOC容器负责对象的创建和初始化等一系列工作，被IOC容器管理的对象叫做Bean</li></ul></li><li><p>DI：依赖注入  在容器中建立bean和bean之间的依赖关系的整个过程</p><img src="/Spring%E5%88%9D%E9%98%B6/QQ_1733963752220.png" class="" title="依赖注入"></li></ul><h3 id="具体实现"><a class="header-anchor" href="#具体实现"></a>具体实现</h3><ol><li><p>导入Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring context依赖</span></span><br><span class="line"><span class="comment">             当引入此依赖后，表示将Spring的基础依赖引入了</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在bean.xml文件中配置要创建的bean,<strong>id属性上下文不能重复</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--完成user对象创建</span></span><br><span class="line"><span class="comment">        id属性：唯一标识</span></span><br><span class="line"><span class="comment">        class属性：要创建的对象所在类的绝对路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tedu.spring.User&quot;</span>&gt;</span></span><br><span class="line">        指定简单类型的值</span><br><span class="line">        注意，这里的name为speed和price，不是因为属性名就是speed和price，</span><br><span class="line">     而是set方法分别为setSpeed和setPrice，名称是通过将set删除，然后将第一个字母变小写得出；</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旺财&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    定义bean的作用范围，可选范围如下,scope属性</span><br><span class="line">singleton:单例(默认)</span><br><span class="line">prototype:非单例</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">示范</span><br><span class="line"><span class="comment">&lt;!-- 定义user这个bean 复杂数据类型注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- car是引用类型，所以这里使用ref为其注入值，注入的就是上面定义的myCar </span></span><br><span class="line"><span class="comment">         基本数据类型或Java包装类型使用value，</span></span><br><span class="line"><span class="comment">         而引用类型使用ref，引用另外一个bean的id </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myCar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 扫描 com.ttpfx.entity.t2 包下的所有bean 通过注解注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ttpfx.entity.t2&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>初始化IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.加载spring配置文件，进行对象创建,通过类路径创建</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.获取spring创建好的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.使用对象调用方法测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实例化bean的三种方式</p><ul><li><p>构造注入</p><p>提供可访问的构造方法</p><p>无参方法不存在会抛出 BeanCreationException异常</p><p><strong>name属性，指定构造器参数的名称，用index属性匹配构造器的参数下标指定</strong></p><p><strong>通过type属性匹配参数类型</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过constructor-arg的name属性，指定构造器参数的名称，为参数赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;speed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99999.9&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         和之前一样，基本数据类型或Java包装类型使用value，</span></span><br><span class="line"><span class="comment">         而引用类型使用ref，引用另外一个bean的id </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myCar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>set注入</p><p>在bean中定义属性类型提供相应的set方法</p><p><strong>name是set方法将set删除第一个字母小写得到的</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义car这个bean，id为myCar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        为car的属性注入值，因为speed和price都是基本数据类型，所以使用value为属性设置值；</span></span><br><span class="line"><span class="comment">        注意，这里的name为speed和price，不是因为属性名就是speed和price，</span></span><br><span class="line"><span class="comment">        而是set方法分别为setSpeed和setPrice，名称是通过将set删除，然后将第一个字母变小写得出；</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;speed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99999.9&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line"><span class="comment">&lt;!-- 定义user这个bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- car是引用类型，所以这里使用ref为其注入值，注入的就是上面定义的myCar </span></span><br><span class="line"><span class="comment">         基本数据类型或Java包装类型使用value，</span></span><br><span class="line"><span class="comment">         而引用类型使用ref，引用另外一个bean的id </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myCar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>静态工厂</p><p>静态工厂注入就是我们编写一个静态的工厂方法，这个工厂方法会返回一个我们需要的值，然后在配置文件中，我们指定使用这个工厂方法创建<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注意，这里的配置并不是创建一个SimpleFactory对象，取名为myCar，</span></span><br><span class="line"><span class="comment">    这一句配置的意思是，调用SimpleFactory的getCar方法，创建一个car实例对象，</span></span><br><span class="line"><span class="comment">    将这个car对象取名为myCar。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.factory.SimpleFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>/&gt;</span></span><br><span class="line">                    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name和age使用set注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将上面配置的car，注入到user的car属性中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">  - 使用实例工厂注入</span><br><span class="line">                </span><br><span class="line">要实例对象才能调用工厂方法</span><br><span class="line">           </span><br><span class="line">```xml</span><br><span class="line">  <span class="comment">&lt;!-- 声明实例工厂bean，Spring容器需要先创建一个SimpleFactory对象，才能调用工厂方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.factory.SimpleFactory&quot;</span> /&gt;</span></span><br><span class="line">               </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    通过实例工厂的工厂方法，创建三个bean，通过factory-bean指定工厂对象，</span></span><br><span class="line"><span class="comment">    通过factory-method指定需要调用的工厂方法</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span> /&gt;</span></span><br><span class="line">                </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将上面通过实例工厂方法创建的bean，注入到user中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                </span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过bean加载配置文件</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.开启context命名空间--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.使用context空间加载properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--3.使用属性占位符$&#123;&#125;读取properties文件中的属性--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverclassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--加载多个properties配置文件，NEVER设置系统环境变量不生效，去除和配置文件中起冲突的--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--加载properties文件标准准格式--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>有关bean的属性</li></ol>   <img src="/Spring%E5%88%9D%E9%98%B6/QQ_1733967374299.png" class="" title="QQ_1733967374299"><h3 id="通过注解注入"><a class="header-anchor" href="#通过注解注入"></a>通过注解注入</h3><p>注解解释<br>@Configuration标记的类是配置类<br>@ComponentScan(“包”)  指定哪个包只能添加一次，多个数据用{，，}形式，就扫描哪个包下的注解并识别。声明是spring管理的组件<br>@Autowired      Bean的自动装配,可以标注在类的属性、方法及构造函数上。<strong>依赖注入</strong><br>@Component   把普通类标记为Bean，加入到容器里，并且是单例模式。<br>@Bean       定义一个Bean对象，加入到Spring容器里,配置第三方bean<br>@Order(数字)   容器加载Bean的优先级，数字越小优先级越高</p><ol><li><p><strong>属性注入时，private私有属性，Spring是通过反射去加载它到Spring容器里的。</strong></p></li><li><p><strong>只有@ComponentScan扫描的包下的被@Component标记的类才能识别为Bean。</strong></p></li><li><p><strong>@Component是单例模式的。</strong></p></li><li><p>定义bean的方式</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Controller</span>   表现层</span><br><span class="line"><span class="meta">@Service</span>  业务层</span><br><span class="line"> <span class="meta">@Repository</span>  数据层</span><br></pre></td></tr></table></figure><ol start="5"><li>bean名称相同怎么办</li></ol>   <img src="/Spring%E5%88%9D%E9%98%B6/QQ_1733968115701.png" class="" title="QQ_1733968115701"><ol start="6"><li><p>自动装配基于反射设计对应属性为私有属性初始化数据，因此无需提供setter方法</p></li><li><p>自动装配建议使用无参构造方法创建对象(默认)，如果不提供对应构造方法，请提供唯一的构造方法创建对象并暴力反射</p></li><li><p>@Value实现简单类型注入</p></li><li><p>@PropertySource(“classpath:jdbc.properties”),加载配置文件</p></li><li><p>使用@Import(JdbcConfig.class)注解手动加入配置类到核心配置，此注解只能添加一次，多个数据请用数组格式</p></li></ol><h2 id="AOP"><a class="header-anchor" href="#AOP"></a>AOP</h2><ol><li><p>具体是什么：面向切面编程，实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术，是对面向对象编程（OOP）的一种补充</p></li><li><p>使用的好处：</p><ul><li>取代了传统纵向继承机制的重复性代码，其应用主要体现在事务处理、日志管理、权限控制、异常处理等方面</li><li>减少对业务代码的侵入，增强代码的可读性和可维护性</li><li>可以拦截指定的方法，并且对方法增强，无需侵入到业务代码中，使业务与非业务处理逻辑分离</li></ul></li></ol><h3 id="核心概念"><a class="header-anchor" href="#核心概念"></a>核心概念</h3><ol><li>连接点：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等，springAop为方法的执行</li><li>切入点：匹配连接点的式子（可以匹配一个方法也可以匹配多个方法）</li><li>通知（Advice）：在切入点处执行的操作，共性功能，springAop中功能以方法呈现</li><li>切面（Aspect）:描述通知与切入点的关系</li></ol><h3 id="工作流程"><a class="header-anchor" href="#工作流程"></a>工作流程</h3><ul><li><p>spring容器启动</p></li><li><p>读取所有切面配置中的切入点</p></li><li><p>初始化bean,判定bean对应的类中的方法是否匹配到任意切入点</p><p>失败：创建对象</p><p>成功：创建原始对象(目标对象)的代理对象</p></li><li><p>获取bean的执行方法</p><p>获取bean,调用方法并执行</p><p>获取的是bean的代理对象，根据代理的对象的运行模式运行原始方法和增强内容</p></li></ul><h3 id="使用"><a class="header-anchor" href="#使用"></a>使用</h3><ol><li><p>切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切入点表达式标准格式:动作关键字(访问修饰符 返回值 包名.类/接口名.方法名(参数)异常名</span></span><br><span class="line">execution (<span class="keyword">public</span> User com,itheima.service.UserService.findById (<span class="type">int</span>))</span><br><span class="line"><span class="comment">//可以使用通配符描述切入点，快速描述</span></span><br><span class="line"><span class="comment">//单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</span></span><br><span class="line"><span class="comment">//*：匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</span></span><br><span class="line">execution(<span class="keyword">public</span> *com.itheima.*.UserService.find*(*))</span><br><span class="line"></span><br><span class="line"><span class="comment">//...：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</span></span><br><span class="line"><span class="comment">//匹配com包下的任意包中的UserService类或接口中所有名称为findByld的方  </span></span><br><span class="line">execution(<span class="keyword">public</span> User com..UserService.findById(..))</span><br><span class="line"><span class="comment">//+：专用于匹配子类类型</span></span><br><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure><p>书写技巧</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.所有代码按照标准规范开发，否则以下技巧全部失效</span><br><span class="line">2.描述切入点通常描述接口，而不描述实现类</span><br><span class="line">3.访问控制修饰符针对接口开发均采用public描述(可省略访问控制修饰符描述</span><br><span class="line">4.返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</span><br><span class="line">5.包名书写尽量不使用..匹配，效率过低，常用*做单个包描述匹配，或精准匹配</span><br><span class="line">6.接口名/类名书写名称与模块相关的采用*匹配，例如UserService书写成*Service，绑定业务层接口名</span><br><span class="line">7.方法名书写以动词进行精准匹配，名词采用*匹配，例如getByld书写成getBy*,selectAll书写成selectAl</span><br><span class="line">8.参数规则较为复杂，根据业务方法灵活调整</span><br><span class="line">9.通常不使用异常作为匹配规则</span><br></pre></td></tr></table></figure></li><li><p>通知类型</p><ul><li>前置通知：在目标方法执行之前执行的逻辑</li><li>后置通知：在目标方法执行之后执行的逻辑，不管目标方法是否抛出异常</li><li>环绕通知：在目标方法执行前后都可以执行的逻辑，它可以完全控制目标方法的执行</li><li>返回后通知：在目标方法正常返回时执行的逻辑</li><li>抛出异常后通知：在目标方法抛出异常时执行的逻辑</li></ul></li><li><p><strong>使用</strong></p><ul><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义切面和切点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 当前类是一个切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个切点（设置拦截规则）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.springaop.controller.UserController.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现通知方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 当前类是一个切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个切点（设置拦截规则）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.springaop.controller.UserController.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">                        </span><br><span class="line">    <span class="comment">// 定义 pointcut 切点的前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                        </span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                        </span><br><span class="line">    <span class="comment">// 返回之后通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行返回之后通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                        </span><br><span class="line">    <span class="comment">// 抛出异常之后通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行抛出异常之后通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Spring-事务"><a class="header-anchor" href="#Spring-事务"></a>Spring 事务</h2><ol><li><p>事务作用:在数据层保障一系列的数据库操作同成功同失败<br>Spring事务作用:在数据层或业务层保障一系列的数据库操作同成功同失败</p></li><li><p>开启注解事务注解</p><img src="/Spring初阶/QQ_1733974260867.png"  alt="QQ_1733974260867" style="zoom:80%;" /></li><li><p>在业务层接口上添加Spring事务管理,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合</span></span><br><span class="line"><span class="comment">//注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(string out,string in ,Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相关配置</p><img src="/Spring%E5%88%9D%E9%98%B6/QQ_1733974416733.png" class="" title="Spring事务配置"></li><li><p><mark><strong>事务的传播行为</strong></mark></p><p>在Spring事务配置<code>@Transactional</code>注解有两个属性</p><ul><li>rollbackFor 事务回滚异常，默认情况下只有出现<code>RuntimeException</code>时才会回滚异常，如果在程序中抛出其他的异常，就会导致事务不会回滚，一定要注意这个点，指定<code>Exception.class</code>就会包含所有的异常</li><li>propagation 设置事务的传播行为 ，事务具有传播性，如果在一个开启了事务的类中使用的一个方法也开启了事务的话，当前的事务会传播到下一个事务，该属性的默认值为<code>REQUIRED</code>，也就是会将后面的事务加入到前面的事务当中，如果在方法中出现了异常也会将后面的事务回滚，但在我们记录日志的过程中无论成功还是失败都需要记录一下日志信息，也就是要开启一个新事务，而不是将后面需要事务的代码加入到当前的事务中，所以要设置这个属性的值为<code>REQUIRES_NEW</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简化开发 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven初级</title>
      <link href="/Maven%E5%88%9D%E7%BA%A7/"/>
      <url>/Maven%E5%88%9D%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven初级"><a class="header-anchor" href="#Maven初级"></a>Maven初级</h1><h2 id="什么是Maven"><a class="header-anchor" href="#什么是Maven"></a>什么是Maven</h2><blockquote><ul><li>是一个基于项目对象模型(POM)概念的项目管理工具</li><li>主要用于管理Java项目，进行依赖管理和项目构建</li><li>能够分模块开发，提高开发的效率</li><li>通过在pom文件中编写坐标导入依赖</li></ul></blockquote><h3 id="使用Mavne"><a class="header-anchor" href="#使用Mavne"></a>使用Mavne</h3><blockquote><ul><li><p>本地安装Maven,解压的目录<strong>不能有中文路径</strong></p></li><li><p>配置 <code>settings.xml</code>文件,主要是本地仓库的配置</p></li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0   http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 选择一个磁盘目录，作为本地仓库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Program Files\maven\myrepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>访问中央仓库慢，配置阿里云的公共仓库</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在idea中更改，里面内置了Maven，将其改成本地的</li></ul> <img src="/Maven初级/undefined"  alt="QQ_1733930194375" style="zoom:50%;" /><ul><li><strong>常用命令</strong></li></ul><ol><li>compile：编译</li><li>clean：清理</li><li>test：测试</li><li>package：打包</li><li>install：安装</li><li>deploy：上传到私服</li></ol><ul><li><strong>生命周期</strong></li></ul><p>clean：清理工作</p><p>default：核心工作，编译，测试，打包，安装等</p><p>site：产生报告，发布站点等</p> <img src="/Maven%E5%88%9D%E7%BA%A7/QQ_1733930580222.png" class="" title="三种生命周期"></blockquote><h2 id="仓库的概念"><a class="header-anchor" href="#仓库的概念"></a>仓库的概念</h2><blockquote><ul><li>存储依赖的地方，体现形式就是本地的一个目录。</li><li>仓库中不仅存放依赖，而且管理着每个依赖的唯一标识(坐标)，Java项目凭坐标获取依赖</li><li>类型：</li></ul><ol><li>本地仓库：存储从远程仓库或中央仓库下载的插件和 jar 包</li><li>远程仓库：本地仓库没有，默认去远程仓库下载</li><li>中央仓库：包含了世界上大部分流行的开源项目构件，由 Maven 团队自己维护</li></ol><ul><li>访问顺序 本地-&gt;私服(有的话)-&gt;远程-&gt;中央</li></ul></blockquote><h2 id="POM文件配置"><a class="header-anchor" href="#POM文件配置"></a>POM文件配置</h2><blockquote><ul><li>基本配置</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> &gt;</span> ：文件的根节点 .</span><br><span class="line"><span class="tag">&lt;<span class="name">modelversion</span> &gt;</span> ： pom.xml 使用的对象模型版本</span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> &gt;</span> ：项目名称，一般写项目的域名</span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> &gt;</span> ：模块名称，子项目名或模块名称</span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> &gt;</span> ：产品的版本号 .</span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span> &gt;</span> ：打包类型，一般有 jar、war、pom 等</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> &gt;</span> ：项目的显示名，常用于 Maven 生成的文档。</span><br><span class="line"><span class="tag">&lt;<span class="name">description</span> &gt;</span> ：项目描述，常用于 Maven 生成的文档</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> ：项目依赖构件配置，配置项目依赖构件的坐标</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> ：项目构建配置，配置编译、运行插件等。</span><br></pre></td></tr></table></figure><ul><li>统一配置jar包版本，后面讲到分模块开发时有用</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">在 pom.xml 文件中锁定 jar 包版本配置</span><br><span class="line"><span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本（可省略） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="依赖的生命周期"><a class="header-anchor" href="#依赖的生命周期"></a>依赖的生命周期</h2><blockquote><p>Jar包生效的时间段，即Jar的生命周期</p><p><strong>依赖范围</strong><br>在 pom.xml 文件中添加坐标时需要指定依赖范围（scope标签），依赖范围包括：</p><p>compile：编译范围，指 A在编译时依赖 B，此范围为默认依赖范围。编译范围的依赖会用在<br>编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</p><p>provided：provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用， provided 依<br>赖在编译和测试时需要，在运行时不需要，比如：servlet api 被 tomcat 容器提供。</p><p>runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc<br>的驱动包。由于运行时需要所以 runtime 范围的依赖会被打包。</p><p>test：test 范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，<br>比如：junit。由于运行时不需要所以test范围依赖不会被打包。</p><p>system：system 范围依赖与 provided 类似，但是你必须显式的提供一个对于本地系统中 JAR<br>文件的路径，需要指定 systemPath 磁盘路径，system依赖不推荐使用</p><p><strong>比如</strong>,导入web项目相关的依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生命周期 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet编译环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生命周期 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生命周期 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2><blockquote><ol><li><p>导入maven项目只要将项目下的pom.xml文件导入</p></li><li><p>打成jar包包含自己项目所用的依赖</p></li></ol><ul><li>配置或添加spring-boot-maven-plugin插件，使打包后的jar包内不包含依赖。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span><span class="comment">&lt;!-- 如果没有该配置，devtools不会生效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>修改pom.xml向其中添加一插件，作用是把依赖都拷贝到lib文件夹下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                       <span class="comment">&lt;!-- lib依赖包输出目录，打包的时候不打进jar包里 --&gt;</span></span><br><span class="line">                                                         <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span>            <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3. 分离打包后服务器启动脚本</span><br></pre></td></tr></table></figure></li><li><p>分离打包前，使用java -jar xxx.jar</p></li><li><p>分离打包后，要指定lib的路径java -Dloader.path=“lib/” -jar xxx.jar</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC和三层架构</title>
      <link href="/MVC%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
      <url>/MVC%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC和三层架构"><a class="header-anchor" href="#MVC和三层架构"></a>MVC和三层架构</h1><p><strong>前言</strong></p><blockquote><p>MVC中的C相当于粘合剂，将M的逻辑展示到V上，M继续往下分可划分为dao,domian,service等，进一步降低了程序中的耦合,MVC可以作为三层架构中的表现层</p><p><strong>参考文章</strong>：<a href="https://zhuanlan.zhihu.com/p/35680070">深入理解MVC - 知乎</a></p></blockquote><h2 id="什么是MVC"><a class="header-anchor" href="#什么是MVC"></a>什么是MVC</h2><blockquote><ol><li>MVC是一种分层开发的模式</li></ol><ul><li>M：model ,业务逻辑，处理业务</li><li>V：view,视图，界面展示</li><li>C：Controller,控制器，处理请求，调用模型和视图</li></ul><ol start="2"><li>使用MVC架构的好处</li></ol><ul><li>职责单一，互不影响</li><li>有利于分工协作</li><li>有利于组件重组</li><li>有利于标准化</li><li>可以<strong>降低</strong>层与层之间的<strong>依赖</strong></li></ul><ol start="3"><li><p><strong>MVC要实现的目标是将软件用户界面和业务逻辑分离以使代码可扩展性、可复用性、可维护性、灵活性加强</strong></p></li><li><p><strong>是一种软件设置模式</strong></p></li><li><p>流程图</p></li></ol>  <img src="/MVC模式和三层架构/undefined"  alt="QQ_1733897973919" style="zoom:50%;" /></blockquote><h2 id="什么是三层架构"><a class="header-anchor" href="#什么是三层架构"></a>什么是三层架构</h2><blockquote><ol><li>将业务应用划分为三层</li></ol><ul><li>数据访问层(DAL)：对数据库的CRUD基本操作，dao</li><li>业务逻辑层(nll)：对业务逻辑进行封装，组合数据访问层中的基本功能，形成复杂的业务逻辑功能serlvet,service</li><li>表现层(ULI)：展示给用户的界面，jsp/html</li></ul><ol start="2"><li>示意图</li></ol>  <img src="/MVC模式和三层架构/undefined"  alt="QQ_1733899984562" style="zoom:50%;" /><ol start="3"><li>是一种分层性的软件体系架构设计</li></ol><blockquote><p>三层架构的出现是为了<strong>降低耦合度</strong>，在这里，使用面向抽象编程，也就是<strong>上层对下层的调用，直接通过接口来完成，下层对上层的真正服务提供者，是下层实现的接口实现类。</strong><br>实现类是可以更换的，这就实现了层间的解耦合</p></blockquote></blockquote><h2 id="MVC和三层架构之间的关系"><a class="header-anchor" href="#MVC和三层架构之间的关系"></a>MVC和三层架构之间的关系</h2><blockquote><ol><li>三层架构是一个分层式的软件体系架构设计，是针对整个<em><strong>软件系统</strong></em>的解耦，各层之间通过接口进行交互；而 MVC 是一个软件设计模式，是针对 <strong>Web 系统</strong>的解耦</li><li><strong>MVC</strong>是 Model-View-Controller，<strong>严格说这三个加起来以后才是三层架构中的表现层</strong> ，<em>也就是说，</em> <em>MVC把三层架构中</em> 的<strong>表现层再度进行了分化</strong>，分成了<strong>控制器</strong>、<strong>视图、实体</strong>三个部分</li><li><strong>MVC</strong>可以是三层中的一个<strong>表现层框架</strong>，属于表现层。<strong>三层和mvc可以共存</strong></li><li>三层是基于<strong>业务逻辑</strong>来分的，而MVC是基于<strong>页面</strong>来分的</li><li>三层架构的分层模式是典型的上下关系，<strong>上层依赖于下层</strong>。但MVC作为表现模式是不存在上下关系的，而是<strong>相互协作关系</strong></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> 三层架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈JavaWeb</title>
      <link href="/%E6%B5%85%E8%B0%88JavaWeb/"/>
      <url>/%E6%B5%85%E8%B0%88JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈JavaWeb"><a class="header-anchor" href="#浅谈JavaWeb"></a>浅谈JavaWeb</h1><h2 id="什么是Javaweb"><a class="header-anchor" href="#什么是Javaweb"></a>什么是Javaweb</h2><ol><li><p>web：万维网(www),能够通过浏览器访问的网站</p></li><li><p>JavaWeb：用java技术解决相关web互联网领域的技术栈</p><img src="/浅谈JavaWeb/undefined"  alt="QQ_1733885855693" style="zoom:50%;" />- 采用B/S架构，浏览器/服务器 架构模式，特点：客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端，浏览器只需要请求服务器，获取web资源，服务器把web资源发送给浏览器即可。好处：易于维护升级，服务器端升级后，客户端无需任何部署就可以使用最新版本<ul><li><p>静态资源:HTML、CSS、JavaScript、图片等。负责页面展现</p></li><li><p>动态资源:Servlet、JSP等。负责逻辑处理</p></li><li><p>数据库:负责存储数据</p></li><li><p>HTTP协议:定义通信规则,<strong>一次响应对应一次请求</strong></p><ol><li><p>对事务没有记忆能力</p></li><li><p>每次请求和响应都是独立的</p></li><li><p>访问速度快</p></li><li><p>多次请求间不能共享数据，Java中使用<strong>会话技术</strong>(cookie,session)来解决这个问题</p></li><li><p>分为POST请求(参数在请求体中)和GET请求(参数在请求行中，有大小限制)</p></li><li><p>常见的HTTP 响应头</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:表示该响应内容的类型，例如text/html</span><br><span class="line">image/jpeg;</span><br><span class="line">Content-Length:表示该响应内容的长度(字节数)</span><br><span class="line">Content-Encoding:表示该响应压缩算法，例如gzip;</span><br><span class="line">Cache-Control:指示客户端应如何缓存，例如max-age=300</span><br><span class="line">表示可以最多缓存300秒</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Web服务器:负责解析 HTTP 协议，解析请求数据，并发送响应数据</p></li></ul></li></ol><h2 id="使用Java操作"><a class="header-anchor" href="#使用Java操作"></a>使用Java操作</h2><h3 id="认识Serlvet"><a class="header-anchor" href="#认识Serlvet"></a>认识Serlvet</h3><ol><li><p>Servlet是用Java编写的服务器端程序，其主要功能在于<strong>交互式地浏览和修改数据</strong>，生成动态Web内容</p></li><li><p>Servlet是指任何实现了这个Servlet接口的类</p></li><li><p>工作模式</p><ul><li>客户端发送请求至服务器</li><li>服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器</li><li>服务器将响应返回客户端</li></ul></li><li><p>工作原理</p><ul><li>Servlet接口定义了<em><strong>Servlet</strong></em>与<strong>servlet容器</strong>之间的约定</li><li>Servlet容器将Servlet类载入内存，并产生Servlet实例和调用它具体的方法</li><li><em><strong>在一个应用程序中，每种Servlet类型只能有一个实例</strong></em></li><li>ServletRequest中封装了当前的Http请求，ServletResponse表示当前用户的Http响应</li><li>对于每一个应用程序，<em><strong>Servlet容器还会创建一个ServletContext对象。这个对象中封装了上下文（应用程序）的环境详情。每个应用程序只有一个ServletContext。每个Servlet对象也都有一个封装Servlet配置的ServletConfig对象</strong></em></li><li>通过编写实现Servlet的Servlet类进行操作</li></ul></li><li><p>体系结构</p><img src="/浅谈JavaWeb/undefined"  alt="QQ_1733886752000" style="zoom:50%;" /></li></ol><h3 id="Servlet具体使用"><a class="header-anchor" href="#Servlet具体使用"></a>Servlet具体使用</h3><ol><li><p>创建一个类实现Servlet接口，重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123; </span><br><span class="line"><span class="comment">//初始化方法 </span></span><br><span class="line">        <span class="comment">//当Servlet第一次被请求时，Servlet容器就会开始调用这个方法来初始化一个Servlet对象出来，但是这个方法在后续请求中不会在被Servlet容器调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123; </span><br><span class="line"><span class="comment">//处理get/post请求的方法 </span></span><br><span class="line">        <span class="comment">//每当请求Servlet时，Servlet容器就会调用这个方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="comment">//销毁的方法 </span></span><br><span class="line">        <span class="comment">//要销毁Servlet时，Servlet容器就会调用这个方法</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他的方法</span></span><br><span class="line"><span class="comment">//getServletInfo（ ），这个方法会返回Servlet的一段描述，可以返回一段字符串。getServletConfig（ ），这个方法会返回由Servlet容器传给init（ ）方法的ServletConfig对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>web.xml</code>文件中配置<code>Servlet</code>的映射关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //3</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>处理请求的类的完整路径<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> //4</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!-- mapping 表示映射 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //2</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>请求名<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> //1</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解的方式开发<code>Servlet 3.0</code>版本后支持，<strong>注意/和/*的区别</strong></p><ul><li>当我们的项目中的Servet配置了“/”，会覆盖掉tomcat中的DefaultSerlet，当其他的 url-pattern都匹配不上时都会走这个Servlet，导致静态资源访问不到</li><li>当我们的项目中配置了“/*”，意味着匹配任意访问路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">    //name和value属性不能同时出现</span></span><br><span class="line"><span class="meta">        name = &quot;TestWebServlet&quot;,</span></span><br><span class="line"><span class="meta">        /*value = &#123;&quot;/demo&quot;, &quot;/web&quot;&#125;,*/</span></span><br><span class="line"><span class="meta">    //配置的路径，配置规则</span></span><br><span class="line"><span class="meta">    //urlPattern 配置规则</span></span><br><span class="line"><span class="meta">//精确匹配 目录匹配 扩展名匹配 任意匹配</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/demo01&quot;, &quot;/web01&quot;&#125;,</span></span><br><span class="line"><span class="meta">    //servlet的加载顺序</span></span><br><span class="line"><span class="meta">        loadOnStartup = 1,</span></span><br><span class="line"><span class="meta">    //指定一组Servlet初始化参数</span></span><br><span class="line"><span class="meta">        initParams = &#123;</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;username&quot;, value = &quot;root&quot;),</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;password&quot;, value = &quot;123456&quot;),</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li><li><p>在日常使用中我们都继承<code>HttpServlet</code>接口</p><ol><li><code>HttpServlet</code>内部自己实现了<code>serlvet</code>方法，把接收到的ServletRequsest类型的对象转换成了HttpServletRequest类型的对象，把ServletResponse类型的对象转换成了HttpServletResponse类型的对象，把两个转换后的对象传入了另一个service方法</li><li>自己的serlvet方法会解析HttpServletRequest中的方法参数，调用以下方法之一：doGet,doPost,doHead,doPut,doTrace,doOptions和doDelete</li><li>我们在实现的时候只需要覆盖doGet或者doPost方法</li></ol></li><li><p><code>HttpServlet</code>的一些常用方法</p><ul><li><p>请求常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span><span class="comment">// 根据表单组件名称获取提交数据 name和表单name相同</span></span><br><span class="line">String[ ] getParameterValues(String name) <span class="comment">//获取表单组件对应多个值时的请求数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String charset)</span> <span class="comment">//指定每个请求的编码(针对post请求才起作用)，解决乱码问题</span></span><br><span class="line">RequestDispatcher <span class="title function_">getRequestDispatcher</span><span class="params">(String path)</span>.forward(req,resp) <span class="comment">//--转发，带有原有的请求参数</span></span><br><span class="line">request.setAttribute(“key”,value);<span class="comment">//存值，还有通过get方法取值</span></span><br></pre></td></tr></table></figure></li><li><p>响应常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addCookie</span><span class="params">(Cookie var1)</span>;<span class="comment">//给这个响应添加一个cookie</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String var1)</span> ;<span class="comment">//重定向，不带请求参数，地址栏会改变</span></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span><span class="comment">// 获得字符流，通过字符流的write(String s)方法可以将字符串设置到response 缓冲区中，服务器将内容组成HTTP响应返回给客户端显示</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;<span class="comment">//解决乱码问题</span></span><br></pre></td></tr></table></figure></li><li><p>转发属于一次请求一次响应,重定向属于两次请求，两次响应</p></li></ul></li><li><p><strong>重写<code>HttpServlet</code>中的<code>Servlet</code>方法，使用请求路径进行方法的分发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改分发的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求路径</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        <span class="comment">//获取最后一段路径 比如brand-case/brand/selectAll 中的selectAll</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uri.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(index + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取继承BaseServlet的字节码对象 Class</span></span><br><span class="line">        <span class="comment">//谁调用this所在的方法，this就代表谁</span></span><br><span class="line">         Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过反射获取方法对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//调用cls实例上的方法</span></span><br><span class="line">                method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="通过Tomcat管理Servlet"><a class="header-anchor" href="#通过Tomcat管理Servlet"></a>通过Tomcat管理Servlet</h2><ol><li><p>Tomcat是独立运行的Servlet容器，内置了Servlet的API</p></li><li><p>Servlet需要依赖Tomcat才能运行</p></li><li><p>流程图</p><img src="/浅谈JavaWeb/undefined"  alt="QQ_1733896197827" style="zoom:50%;" /></li><li><p>如何使用</p><ul><li><p>本地安装tomcat</p></li><li><p>配置相应的工件和web框架</p></li><li><p>使用maven插件，pom文件的打包方式为war</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">   &lt;plugin&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">           &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">           &lt;port&gt;<span class="number">8080</span>&lt;/port&gt;</span><br><span class="line">       &lt;uriEncoding&gt;UTF-<span class="number">8</span>&lt;/uriEncoding&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">   &lt;/plugin&gt;</span><br><span class="line"> &lt;/plugins&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="会话跟踪技术"><a class="header-anchor" href="#会话跟踪技术"></a>会话跟踪技术</h2><h3 id="概述"><a class="header-anchor" href="#概述"></a>概述</h3><ol><li><p>HTTP协议是无状态的，每次请求都会视为新的请求，通过会话跟踪技术实现会话内数据共享</p></li><li><p>什么是会话：</p></li></ol><blockquote><p>用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应</p></blockquote><ol start="3"><li>会话跟踪：</li></ol><blockquote><p>一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话<br>的多次请求间共享数据</p></blockquote><ol start="4"><li>实现方式</li></ol><blockquote><p>客户端：Cookie</p><p>服务端：Session</p></blockquote><h3 id="Cookie基本使用"><a class="header-anchor" href="#Cookie基本使用"></a>Cookie基本使用</h3><ol><li><p>将数据保存在客户端，以后每次请求都携带Cookie数据进行访问</p></li><li><p>基本使用</p></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Cookie对象，设置数据</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//2.发送Cookie到客户端:使用response对象</span></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"><span class="comment">//3.获取客户端携带的所有Cookie，使用request对象</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//4.遍历数组，获取每一个Cookie对象:for</span></span><br><span class="line"><span class="comment">//5.使用Cookie对象方法获取数据</span></span><br><span class="line">cookie.getName();</span><br><span class="line">cookie.getValue();</span><br></pre></td></tr></table></figure><ol start="3"><li>原理</li></ol><blockquote><p>Cookie的实现是基于HTTP协议的<br>响应头:set-cookie<br>请求头:cookie</p></blockquote><ol start="4"><li><p>使用细节</p><ul><li><p>存活时间：默认存放在浏览器内存中，浏览器关闭内存释放，自动销毁</p></li><li><p>setMaxAge(int seconds)：设置Cookie的存活时间</p><blockquote><p>正数:将 Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除<br>负数:默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</p><p>零:删除对应 Cookie</p></blockquote></li><li><p><strong>不能直接存储中文，需要进行URL编码</strong></p></li></ul></li><li><p>优缺点</p><p>优点：HTTP协议中支持的内容</p><p>缺点：</p><ul><li>移动端APP无法使用</li><li>用户可以自己禁用Cookie</li><li>不能跨域，<strong>跨域分为三个维度:协议、IP/域名、端口，一个不同都算跨域</strong></li></ul></li></ol><h3 id="Session的使用"><a class="header-anchor" href="#Session的使用"></a>Session的使用</h3><ol><li><p>服务端会话技术,将数据保存在服务端</p></li><li><p>JavaEE 提供 HttpSession接口，来实现一次会话的多次请求间数据共享功能</p></li><li><p>使用</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取Session对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">//2.Session对象功能:</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object o)</span><span class="comment">//存储数据到 session 域中</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span><span class="comment">//根据 key，获取值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span><span class="comment">//根据 key，删除该键值对</span></span><br></pre></td></tr></table></figure><ol start="4"><li>原理</li></ol><blockquote><p>基于Cookie实现的<br>同一会话的两次请求访问的session是同一对象tomcat会将创建的session当做cookie对象发送到请求头中，而后在请求时访问的就是已经有的session对象</p></blockquote><ol start="5"><li>使用细节</li></ol><blockquote><p>Session的钝化:服务器正常关闭后,Tomcat会自动将Session数据写入硬盘</p><p>​ 活化:再次启动服务器后,从文件中加载数据到Session中</p><p>Session的销毁:默认无操作,30分钟后销毁,调用invalidate()方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置文件配置</span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ol start="6"><li><p>优缺点</p><p>优点：存储在服务端，安全</p><p>缺点：服务器集群环境下无法直接使用，包含Cookie的所有缺点</p></li></ol><h3 id="两者的相同和区别"><a class="header-anchor" href="#两者的相同和区别"></a>两者的相同和区别</h3><blockquote><ol><li>都是来完成一次会话内多次请求间数据共享的</li><li>区别:</li></ol><ul><li>存储位置:Cookie 是将数据存储在客户端，Session 将数据存储在服务端</li><li>安全性:Cookie不安全，Session安全</li><li>数据大小:Cookie最大3KB，Session无大小限制</li><li>存储时间:Cookie 可以长期存储，Session默认30分钟</li><li>服务器性能:Cookie 不占服务器资源，Session 占用服务器资源</li></ul></blockquote><h3 id="JWT令牌"><a class="header-anchor" href="#JWT令牌"></a>JWT令牌</h3><ul><li><p>概述</p><blockquote><p>全称：<a href="https://jwt.io/">JSON Web Token</a></p><p>定义了一种简洁，可自定义的格式，通过JSON格式进行封装在通信双方间进行传输，以数字签名保证信息的安全性</p></blockquote></li><li><p>具体组成</p></li><li><p>使用</p><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建配置类进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sky.jwt&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 管理端员工生成jwt令牌相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="keyword">private</span> String adminSecretKey;</span><br><span class="line">    <span class="comment">//设置jwt过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> adminTtl;</span><br><span class="line">    <span class="comment">//设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String adminTokenName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yml配置文件中设置,到时候通过自动装配的形式将配置加载到JwtProperties bean中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="comment"># 设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="attr">admin-secret-key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="comment"># 设置jwt过期时间</span></span><br><span class="line">    <span class="attr">admin-ttl:</span> <span class="number">7200000000000000</span></span><br><span class="line">    <span class="comment"># 设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="attr">admin-token-name:</span> <span class="string">token</span></span><br></pre></td></tr></table></figure><p>创建加密和解密的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Serlvet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis简化JDBC</title>
      <link href="/Mybatis%E7%AE%80%E5%8C%96Jdbc/"/>
      <url>/Mybatis%E7%AE%80%E5%8C%96Jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis简化JDBC"><a class="header-anchor" href="#Mybatis简化JDBC"></a>Mybatis简化JDBC</h1><h2 id="JDBC"><a class="header-anchor" href="#JDBC"></a>JDBC</h2><blockquote><ol><li><p>概念：就是使用Java语言操作关系型数据库的一套API</p></li><li><p>本质：使用JDBC接口编程，驱动jar包中的实现类</p></li><li><p>好处：</p></li></ol><ul><li>各数据库厂商使用相同的接口，Java代码不需要根据不同的数据库而变化</li><li>随时更换底层数据库，Java代码基本不变</li></ul><ol start="4"><li>使用：</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00.</span>创建工程，导入驱动jar包</span><br><span class="line">mysql-connector-java-<span class="number">8.0</span><span class="number">.33</span>.jar</span><br><span class="line"><span class="number">01.</span>注册驱动</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>):</span><br><span class="line"><span class="number">2.</span>获取连接</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, passw</span><br><span class="line"><span class="number">3.</span>定义SQL语句</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> “update...</span><br><span class="line"><span class="number">4.</span>获取执行SQL对象</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"> <span class="comment">//防止sql注入</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);                     </span><br><span class="line"><span class="number">5.</span>执行SQL</span><br><span class="line"> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line"><span class="number">6.</span>处理返回结果,rs中就是操作的结果集，通过next()方法移动游标</span><br><span class="line"> rs.next()</span><br><span class="line">                                             </span><br><span class="line"><span class="number">7.</span>释放资源,注意关闭顺序</span><br><span class="line">  conn.close()</span><br><span class="line">  stmt.close()</span><br><span class="line">  rs.close()</span><br></pre></td></tr></table></figure><ol start="5"><li>事务管理</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection接口定义了三个对应的方法</span><br><span class="line">开启事务:setAutoCommit(<span class="type">boolean</span> autoCommit):<span class="literal">true</span>为自动提交事务;<span class="literal">false</span>为手动提交事务，即为开启事务</span><br><span class="line">在<span class="keyword">try</span> carh 中进行数据回滚的操作</span><br><span class="line">提交事务:</span><br><span class="line">commit()</span><br><span class="line">回滚事务:rollback()</span><br></pre></td></tr></table></figure><ol start="6"><li>创建工具类通过静态代码块获取连接对象，防止多次创建数据库连接对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL=<span class="string">&quot;jdbc:mysql://localhost:3306/数据库名称?characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(DRIVER);<span class="comment">//静态代码块</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Connection <span class="title function_">getCon</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;<span class="comment">//获取数据库连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLDataException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title function_">getRs</span><span class="params">(String sql)</span>&#123;<span class="comment">//懂得都懂</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span>  getCon().prepareStatement(sql);</span><br><span class="line">            <span class="keyword">return</span> ps.executeQuery();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeCon</span><span class="params">(Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(con!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closepstm</span><span class="params">(PreparedStatement pstem)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pstem!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstem.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">colseRes</span><span class="params">(ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>通过数据库连接池连接数据库</li></ol><p>好处：资源复用、提升系统响应速度、避免数据库连接遗漏</p><p>Druid连接池</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>通过<strong>配置文件</strong>获取连接池对象</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/db_book</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialsize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><p>代码实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//使用类加载器获取资源流，而不是直接使用 FileInputStream，这样可以避免路径问题</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> dome.class.getClassLoader().getResourceAsStream(<span class="string">&quot;DB.properties&quot;</span>);</span><br><span class="line">        properties.load(in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>工具类实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidUtil</span> &#123;</span><br><span class="line">    <span class="comment">//druid连接池对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> DruidUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;DB.properties&quot;</span>);</span><br><span class="line">            properties.load(in);</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close(); <span class="comment">// 归还连接给连接池</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="使用Mybatis"><a class="header-anchor" href="#使用Mybatis"></a>使用Mybatis</h2><blockquote><ol><li><p>一款优秀的的持久化框架</p></li><li><p>maven坐标</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;x.x.x&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件,配置文件的顺序有要求</li></ol>  <img src="/Mybatis简化Jdbc/undefined"  alt="QQ_1733880187375" style="zoom:33%;" />  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hngy.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hngy.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>配置文件放置目录，<strong>目录结构和上方java代码包结构相一致</strong>，注意配置文件的名称<strong>mybatis-config.xml</strong>，<em><strong>软件包分隔用/</strong></em></li></ol>  <img src="/Mybatis简化Jdbc/undefined"  alt="QQ_1733880264709" style="zoom:67%;" /><ol start="5"><li>使用静态代码块创建工厂连接对象，解决多次创建共厂的问题</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置路经</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>通过连接对象操作，<strong>增删改要手动提交事务</strong></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandService</span> &#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">/*查询结果*/</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectBrandAll</span><span class="params">()</span>&#123;</span><br><span class="line">        sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//BrandMapper.class放置自己编写的sql语句</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        List&lt;Brand&gt; brands = mapper.selectBrands();</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//sqlSession.commit();增删改要手动提交事务</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="使用配置文件编写sql语句"><a class="header-anchor" href="#使用配置文件编写sql语句"></a>使用配置文件编写sql语句</h3><blockquote><ol><li><p>简单sql语句采用注解的形式书写</p></li><li><p>实体类属性名和数据包字段名不一致需要用resultMap映射，可以配置开启自动驼峰命名映射</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--resultType:返回类型  resultMap：映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hngy.pojo.User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">      select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--执行后添加属性的主键值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解上使用  @ResultMap(&quot;brandResultMap&quot;)--&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>用param注解的方式，告诉下面的SQL语句，传递过来的参数代表的占位符，封装对象传递属性要和字段名相对应</p></li><li><p>动态SQL标签,<strong>动态标签中的列名必须用数据库中的字段名</strong>，开启了驼峰映射也没有用</p></li><li><if></li><li><where></li><li><set></li><li><choose></li><li><foreach></li></ol></blockquote><h2 id="Mybatis是如何简化JDBC的"><a class="header-anchor" href="#Mybatis是如何简化JDBC的"></a>Mybatis是如何简化JDBC的</h2><blockquote><ol><li>JDBC 中，每次进行数据库操作都需要手动获取连接、创建 Statement 或者 PreparedStatement、执行 SQL 语句、处理结果集，并且需要手动关闭连接和释放资源,在 MyBatis 中，这些步骤都被封装在 SqlSession ,只需要通过 SqlSession 获取 Mapper 接口对象，然后调用方法即可</li><li>MyBatis 中，SQL 语句通过 XML 或注解的形式进行编写和处理，支持动态SQL</li><li>通过配置 resultMap 或使用注解等方式将查询结果集映射到 Java 对象中</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> MyBatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 简化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%8E%A2%E9%99%A9%E8%AE%B0(%E4%B8%80)/"/>
      <url>/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%8E%A2%E9%99%A9%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="苍穹外卖项目实战总结（后端）"><a class="header-anchor" href="#苍穹外卖项目实战总结（后端）"></a>苍穹外卖项目实战总结（后端）</h1><p><strong>前言</strong></p><blockquote><p>​前前后后花了将近一个月的时间将苍穹外卖这个项目实战完成了，本来以为是从零开始研发，但大部分东西都是现成的，相当于自己只是根据接口文档完成了作业，熟悉了前后端分离的开发模式，要想自己完整的开发这样一个项目估计是要花费很多时间的，在做项目的过程中相当于将前面学习的SSM技术和SpringBoot技术做了一次整合</p><p>​在学习的过程中我发现自己也有很多拉下的知识点，如反射、全局异常处理器、AOP、Steam流，总之希望自己在能一直保持这样的学习状态和热情(也许还不够热情)😁</p></blockquote><h2 id="项目整体架构和技术选型"><a class="header-anchor" href="#项目整体架构和技术选型"></a>项目整体架构和技术选型</h2><h3 id="整体架构"><a class="header-anchor" href="#整体架构"></a>整体架构</h3><ul><li><p>通过maven的聚合和继承进行分模块开发，分为pojo、common、server、take-out</p></li><li><p>POJO模块下各种包的含义，一般用DTO接受前端传递回来的数据，VO封装数据返回</p></li><li><p>common模块：constant常量类，context项目上下文，enumeration枚举类，exception异常类，json处理json转换的类，properties是Springboot中的一些配置属性类，会把配置文件中的配置项封装成对象，result后端的返回结果，utils工具类。</p></li><li><p>在各个模块下又根据功能的不同分为不同的包，代码结构清晰</p></li></ul><h3 id="技术选型"><a class="header-anchor" href="#技术选型"></a>技术选型</h3><ul><li>用户层：主要使用node.js、Vue2、ElementUI组件、微信小程序、apache echarts技术进行前端页面的开发</li><li>网关层：使用<strong>Nginx</strong>服务器进行反向代理，保障后端服务器的安全，提高访问速度，进行负载均衡</li><li>应用层：主要技术有SpringBoot、SpringMVC、SpringTask、SpringCache、JWT、WebSocket、Swagger、阿里云OSS</li><li>数据层：MySQL、Redis、Mybatis、Spring data redis、pagehelper</li></ul><h3 id="代码调试"><a class="header-anchor" href="#代码调试"></a>代码调试</h3><blockquote><p>在实际项目开发中前端和后端工程应该是同步开发的，在进行测试的话一般是通过接口文档的方式对功能进行测试，而在本项目中前端工程的代码已经给出了，所以用前后端联调的方式进行测试</p><p>要注意的是，前后端请求的地址并不一致器，前端请求地址为http://localhost/api,后端请求地址为：http://localhost:8080/,使用的是nginx反向代理的方式将前端的请求发送给后端的</p></blockquote><h2 id="具体功能的开发"><a class="header-anchor" href="#具体功能的开发"></a>具体功能的开发</h2><blockquote><p>这里只会讲自己在开发过程中遇到的问题和一些不懂的点，具体视频讲解b站上都有</p><p>本项目约定管理端发出的请求统一用：/admin作为前缀，用户端统一用：/user</p><p>通过 application.yml 和application-dev.yml来进行不同环境之间的配置</p><p>controller中的bean不能相同，可以指定名称区分<code>@RestController(&quot;userDishController&quot;)</code></p></blockquote><h3 id="接口文档的开发"><a class="header-anchor" href="#接口文档的开发"></a>接口文档的开发</h3><blockquote><p>我使用的是Apifox导入的资料中的接口文档，所以在代码开发中就没有写过接口文档</p></blockquote><ul><li><p><a href="https://swagger.io/">Swagger</a>,生成接口文档和在线接口调试页面</p></li><li><p>Knife4j为MVC框架集成Swagger的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupld</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置类中加入Knife4j的相关配置，设置静态资源映射,都是在server模块的config包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//Swagger用来定义API文档的元信息，如标题、版本和描述</span></span><br><span class="line">       <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">               .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">               .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .build();</span><br><span class="line">       <span class="comment">//这是Swagger的配置类，用于配置Swagger的文档信息。</span></span><br><span class="line">       <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">               .apiInfo(apiInfo)</span><br><span class="line">               .select()</span><br><span class="line">           <span class="comment">//指定扫描的包路径，这里只扫描com.sky.controller包下的控制器。</span></span><br><span class="line">               .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">           <span class="comment">//指定扫描的路径，这里使用PathSelectors.any()表示扫描所有路径。</span></span><br><span class="line">               .paths(PathSelectors.any())</span><br><span class="line">               .build();</span><br><span class="line">       <span class="keyword">return</span> docket;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置静态资源映射</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Swagger的文档页面doc.html的静态资源映射。当访问/doc.html时，Spring MVC会从classpath:/META-INF/resources/路径下寻找资源       </span></span><br><span class="line">      registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>常用注解</p></li></ul><h3 id="员工登录校验功能"><a class="header-anchor" href="#员工登录校验功能"></a>员工登录校验功能</h3><ul><li><p>对密码进行加密后保存在数据库中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//密码比对</span></span><br><span class="line">       <span class="comment">//md5加密密码，不可逆</span></span><br><span class="line">  </span><br><span class="line">       password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">if</span> (!password.equals(employee.getPassword())) &#123;</span><br><span class="line">           <span class="comment">//密码错误，自定义异常和常量字符串</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordErrorException</span>(MessageConstant.PASSWORD_ERROR);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JWT令牌校验"><a class="header-anchor" href="#JWT令牌校验"></a>JWT令牌校验</h4><ol><li><p>导入jwt的maven坐标</p></li><li><p>创建配置类，利用yml文件加载配置类的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sky.jwt&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 管理端员工生成jwt令牌相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String adminSecretKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> adminTtl;</span><br><span class="line">    <span class="keyword">private</span> String adminTokenName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户端微信用户生成jwt令牌相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String userSecretKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> userTtl;</span><br><span class="line">    <span class="keyword">private</span> String userTokenName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="comment"># 设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="attr">admin-secret-key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="comment"># 设置jwt过期时间</span></span><br><span class="line">    <span class="attr">admin-ttl:</span> <span class="number">7200000000000000</span></span><br><span class="line">    <span class="comment"># 设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="attr">admin-token-name:</span> <span class="string">token</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">user-secret-key:</span> <span class="string">itheima</span></span><br><span class="line">    <span class="attr">user-ttl:</span> <span class="number">7200000000000000</span></span><br><span class="line">    <span class="attr">user-token-name:</span> <span class="string">authentication</span></span><br></pre></td></tr></table></figure></li><li><p>创建加密和解密工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间，ttlMillis就是过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据库匹配成功后发放jwt令牌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//登录成功后，生成jwt令牌</span></span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//JwtClaimsConstant.EMP_ID自定义的常量类</span></span><br><span class="line">        claims.put(JwtClaimsConstant.EMP_ID, employee.getId());</span><br><span class="line"><span class="comment">//通过创建的工具类生成token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(</span><br><span class="line">                jwtProperties.getAdminSecretKey(),</span><br><span class="line">                jwtProperties.getAdminTtl(),</span><br><span class="line">                claims);</span><br><span class="line"></span><br><span class="line">        <span class="type">EmployeeLoginVO</span> <span class="variable">employeeLoginVO</span> <span class="operator">=</span> EmployeeLoginVO.builder()</span><br><span class="line">                .id(employee.getId())</span><br><span class="line">                .userName(employee.getUsername())</span><br><span class="line">                .name(employee.getName())</span><br><span class="line">                .token(token)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure></li><li><p>利用拦截器拦截请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt令牌校验的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenAdminInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、从请求头中获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、校验令牌</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br><span class="line">            log.info(<span class="string">&quot;当前员工id：&#123;&#125;&quot;</span>, empId);</span><br><span class="line">            <span class="comment">//利用线程空间存值</span></span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、通过，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">//4、不通过，响应401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//TODO 为什么不使用implements WebMvcConfigurer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(jwtTokenUserInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/user/login&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/shop/status&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展MVC的消息转换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">            <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，将Java对象转为json字符串</span></span><br><span class="line">        converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将我们自己的转换器放入Spring Mvc框架的容器中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,converter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="思考"><a class="header-anchor" href="#思考"></a>思考</h4><ol><li><p>过滤器和拦截器之间的区别</p><ul><li><p>拦截器是Spring提供的组件，过滤器是Servlet提供的组件</p></li><li><p>过滤器实现Filter接口，拦截器实现HandlerInterceptor接口</p></li><li><p>过滤器的范围更广，拦截器执行在过滤器之后</p></li><li><p>实现的方法不一样，过滤器分为初始化方法，执行方法，销毁方法，拦截器分为资源运行前方法，运行后方法，视图渲染完毕后运行方法</p></li><li><p>过滤器放行后如果在执行方法中还有代码放行运行完后会继续回到放行处向下运行，而拦截器直接return true，结束了方法的执行</p></li><li><p>要在Spring框架中使用过滤器，得再启动类上加上<code>@ServletComponentScan</code>注解开启servlet组件支持</p></li><li><p>过滤器Filter会拦截所有资源，Interceptor只会拦截Spring环境中的资源</p></li></ul></li><li><p><strong>拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调</strong></p><p><strong>截器中可以注入 Spring 的 Bean，能够获取到各种需要的 Service 来处理业务逻辑，而过滤器则不行。</strong></p></li></ol><h3 id="线程"><a class="header-anchor" href="#线程"></a>线程</h3><p><mark><strong>进程是操作系统分配资源的单位，线程是调度的基本单位，线程之间共享进程资源</strong></mark></p><h4 id="什么是线程"><a class="header-anchor" href="#什么是线程"></a>什么是线程</h4><blockquote><p>线程是指在一个进程内执行的独立执行路径，一个进程中可以有多个线程</p></blockquote><h4 id="线程的特点"><a class="header-anchor" href="#线程的特点"></a>线程的特点</h4><ol><li><strong>轻量级</strong>：相比于进程，线程是更轻量级的执行单元。创建和销毁线程的开销较小，可以在短时间内创建大量线程。</li><li><strong>共享资源</strong>：线程在同一个进程内共享进程的内存空间和系统资源。这意味着多个线程可以直接访问和修改同一份数据，更容易实现数据共享和通信。</li><li><strong>并发执行</strong>：多个线程可以并发执行，实现任务的同时进行。不同线程之间可以按照特定的调度算法分配CPU时间片，从而实现并发处理。</li><li><strong>上下文切换</strong>：由于线程是并发执行的，操作系统需要在不同线程之间进行上下文切换。上下文切换是指将一个线程的执行状态保存起来，并恢复另一个线程的执行状态，这个过程会带来一定的开销。</li><li><strong>线程同步</strong>：多个线程访问共享资源时可能会出现竞态条件和数据不一致的问题。为了保证数据的一致性和正确性，需要使用线程同步机制，如互斥锁、信号量、条件变量等。</li><li><strong>可以实现并行性</strong>：在多核处理器上，多个线程可以并行执行，提高程序的执行效率。通过线程的并行执行，可以将任务划分为多个子任务并同时进行处理，加快任务的完成速度。</li></ol><p><mark>这里就简单了解下吧，主要是具体在项目中的使用，到时候学到操作系统的时候在单独在写一篇博客</mark></p><h4 id="项目中的使用"><a class="header-anchor" href="#项目中的使用"></a>项目中的使用</h4><p>通过<strong>ThreadLocal</strong>线程变量存储管理端和用户端的<strong>ID</strong>值</p><ol><li><p>原理</p><blockquote><p>ThreadLocal变量对其他线程而言是隔离的，也就是说该变量是当前线程独有的变量，ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量,<strong>用于线程中的数据隔离</strong></p></blockquote></li><li><p>实现,通过调用类中的静态方法存储用户ID和取出ID，得到谁在操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="全局异常处理器"><a class="header-anchor" href="#全局异常处理器"></a>全局异常处理器</h3><p>处理数据库中主键冲突的问题，如录入的用户名已存在会抛出sql异常</p><h4 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器，处理项目中抛出的业务异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕获业务异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(BaseException ex)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;异常信息：&#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> Result.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理SQL异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result   <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">      <span class="comment">//  Duplicate entry &#x27;zhangsan&#x27; for key &#x27;employee.idx_username&#x27;，</span></span><br><span class="line">        <span class="comment">//这就处理了所有使用sql语句插入时，插入的值违反了唯一约束的条件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">final</span> String[] s = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//利用字符串分割拿到违反唯一约束的数据的值</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> s[<span class="number">2</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> username+ MessageConstant.ALREADY_EXITS;</span><br><span class="line">            <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="细节讲解"><a class="header-anchor" href="#细节讲解"></a>细节讲解</h4><ol><li><p><code>@RestControllerAdvice</code>相当于集成了<code>@ControllerAdvice</code>和<code>@ResponseBody</code>，<code>@ControllerAdvice</code>表示这是一个全局的控制器增强器，可以处理全局的请求，而<code>@ResponseBody</code>表示方法的返回值会自动作为HTTP响应的正文</p></li><li><p>通过返回统一的<code>Result</code>对象，可以确保应用对外的错误响应格式一致，前端将错误消息返回到页面上。</p><ol><li>BaseException是自定义的异常，它继承非受查异常（编译器不会强制开发者捕获或抛出这种类型的异常，<strong>在运行时被检测到并且通常是由程序逻辑错误引起的异常</strong>）<strong>其他自定义的异常类继承它就行了</strong>，然后通过全局异常处理器，将获得的异常消息返回给前端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="统一对日期格式处理"><a class="header-anchor" href="#统一对日期格式处理"></a>统一对日期格式处理</h3><h4 id="定制-JSON-的序列化和反序列化行为"><a class="header-anchor" href="#定制-JSON-的序列化和反序列化行为"></a>定制 JSON 的序列化和反序列化行为</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="comment">//public static final String DEFAULT_DATE_TIME_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="加入到MvcConfig中去"><a class="header-anchor" href="#加入到MvcConfig中去"></a>加入到MvcConfig中去</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展MVC的消息转换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">            <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，将Java对象转为json字符串</span></span><br><span class="line">        converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将我们自己的转换器放入Spring Mvc框架的容器中，0代表第一个</span></span><br><span class="line">        converters.add(<span class="number">0</span>,converter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="细节处理"><a class="header-anchor" href="#细节处理"></a>细节处理</h4><ol><li>通过<code>configure</code>和<code>getDeserializationConfig().withoutFeatures</code>方法，确保在解析 JSON 时忽略未知属性，避免因为 JSON 中的额外字段导致解析失败。</li><li>提供自定义的序列化和反序列化格式，而不是使用 Jackson 默认的格式</li><li><code>SimpleModule</code>：这是 Jackson 库中的一个类，用于注册自定义的序列化和反序列化处理器。</li><li>converters.add(0,converter);，0代表第一个，优先使用自定义的</li><li>没有将自定义的<code>ObjectMapper</code>注册为消息转换器的一部分，Spring MVC将使用其默认的<code>ObjectMapper</code>，只有将这个转换器添加到Spring MVC的消息转换器列表中时，自定义配置才会生效。确保所有通过Spring MVC处理的JSON数据都会使用自定义<code>ObjectMapper</code></li></ol><h3 id="自动填充公共字段"><a class="header-anchor" href="#自动填充公共字段"></a>自动填充公共字段</h3><p>填充数据库中重复出现的字段，如创建人，修改人，创建时间，修改时间</p><h4 id="具体实现"><a class="header-anchor" href="#具体实现"></a>具体实现</h4><ol><li>自定义注解AutoFill,标识需要进行公共字段填充的方法</li><li>自定义切面类拦截加入了AutoFill注解的方法</li><li>通过反射为方法赋值</li><li>通过枚举定义数据库操作类型</li><li>在Mapper方法上添加AutoFil注解，并指定操作类型</li></ol><p><strong>代码</strong></p><ol><li><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解，公共字段填充</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//指定只能挂载在方法上</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="comment">//注解的保留策略</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    <span class="comment">//定义数据库操作方法</span></span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库操作类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperationType</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UPDATE,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 插入操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        INSERT</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>切面类，AutoFillConstant.SET_CREATE_TIME是定义的常量类，里面放的是方法名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义切面，实现公共字段填充的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//切面的注解</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//锁定Mapper包下的所有方法并加了AutoFill注解的</span></span><br><span class="line">        <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..))&amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行公共字段的填充：&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前被拦截到数据库操作的操作类型</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="comment">//方法签名对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">AutoFill</span> <span class="variable">annotation</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="comment">//获取方法上的注解对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">OperationType</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();<span class="comment">//操作的数据库类型</span></span><br><span class="line">        <span class="comment">//获取到当前被拦截的参数  实体对象</span></span><br><span class="line">        <span class="keyword">final</span> Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span>(args == <span class="literal">null</span> || args.length == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//默认实体参数在第一位</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备赋值的数据</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据不同的操作类型进行赋值，反射原理</span></span><br><span class="line">        <span class="keyword">if</span>(value == OperationType.INSERT)&#123;</span><br><span class="line">            <span class="comment">//是插入操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取set方法</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">                <span class="comment">//通过反射属性为对象属性赋值</span></span><br><span class="line">                setCreateUser.invoke(entity,currentId);</span><br><span class="line">                setCreateTime.invoke(entity,now);</span><br><span class="line">                setUpdateTime.invoke(entity,now);</span><br><span class="line">                setUpdateUser.invoke(entity,currentId);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value == OperationType.UPDATE)&#123;</span><br><span class="line">            <span class="comment">//更新操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">                <span class="comment">//通过反射属性为对象属性赋值</span></span><br><span class="line">                setUpdateTime.invoke(entity,now);</span><br><span class="line">                setUpdateUser.invoke(entity,currentId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相关常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共字段自动填充相关常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillConstant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体类中的方法名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_CREATE_TIME</span> <span class="operator">=</span> <span class="string">&quot;setCreateTime&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_UPDATE_TIME</span> <span class="operator">=</span> <span class="string">&quot;setUpdateTime&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_CREATE_USER</span> <span class="operator">=</span> <span class="string">&quot;setCreateUser&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_UPDATE_USER</span> <span class="operator">=</span> <span class="string">&quot;setUpdateUser&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper包下的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, create_time,  create_user, status)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;values&quot;+</span></span><br><span class="line"><span class="meta">            &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;createUser&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class="line"><span class="comment">//表示是插入操作</span></span><br><span class="line">    <span class="meta">@AutoFill(value = OperationType.INSERT)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="注意细节"><a class="header-anchor" href="#注意细节"></a>注意细节</h4><ol><li>自定义注解时，注解的挂载位置和保留策略</li><li>切入点的位置，锁定的位置一定要正确</li><li>通过不同的操作类型填充不同的参数</li><li>编写SQL语句还是要带有这些被填充的字段，只是可以不需要传递值</li></ol><h3 id="Redis缓存菜品数据"><a class="header-anchor" href="#Redis缓存菜品数据"></a>Redis缓存菜品数据</h3><h4 id="具体实现-v2"><a class="header-anchor" href="#具体实现-v2"></a>具体实现</h4><ol><li>导入Spring Cache和Redis相关maven坐标</li><li>在用户端接口SetmealController的list方法上加入<code>@Cacheable</code>注解，表示方法执行前先查询缓存中有没有数据，有直接返回缓存数据，没有就将方法返回值放到缓存中</li><li>在管理端接口SetmealController有关菜品数据更新，启停售的方法上加入<code>@CacheEvict</code>,将一条或多条数据从缓存中删除</li></ol><p><strong>代码</strong></p><p>redis数据库配置,通过 application.yml 和application-dev.yml来进行不同环境之间的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis数据库配置</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">$&#123;sky.redis.host&#125;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;sky.redis.port&#125;</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">$&#123;sky.redis.database&#125;</span></span><br></pre></td></tr></table></figure><p>用户端<code>@Cacheable(cacheNames = &quot;setmealCache&quot;,key = &quot;#categoryId&quot;)</code></p><p>管理端<code>@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</code></p><h4 id="使用细节"><a class="header-anchor" href="#使用细节"></a>使用细节</h4><ol><li><p>使用Spring Cache框架，换数据库只需在maven中更改坐标，yml中改一下配置，不需要改动代码</p></li><li><p>allEntries = true是删除setmealCache下的所有数据</p></li><li><p>使用注解的方式开发相当于是在Redis中创建了一个setmealCache的包，下面存放着key对应的值</p></li></ol><h3 id="小程序开发"><a class="header-anchor" href="#小程序开发"></a>小程序开发</h3><h4 id="HttpClient"><a class="header-anchor" href="#HttpClient"></a>HttpClient</h4><blockquote><p>客户端编程工具包，相当于在Java程序中自定义发送get或post请求到指定url地址</p><p>从 Java 11 开始，<code>HttpClient</code> 被包含在 java.net.http 包中</p></blockquote><h5 id="使用方法"><a class="header-anchor" href="#使用方法"></a>使用方法</h5><ol><li><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建HttpClient对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br></pre></td></tr></table></figure></li><li><p>创建Http请求对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">HttpPost</span> <span class="variable">postRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://example.com&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送请求,并接受响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(request);</span><br><span class="line"><span class="type">StatusLine</span> <span class="variable">statusLine</span> <span class="operator">=</span> response.getStatusLine();</span><br><span class="line"><span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> statusLine.getStatusCode();</span><br><span class="line"><span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (statusCode == HttpStatus.SC_OK) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(entity, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请求失败，状态码：&quot;</span> + statusCode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">response.close();</span><br><span class="line">httpclient.close();</span><br></pre></td></tr></table></figure></li></ol><h5 id="工具类"><a class="header-anchor" href="#工具类"></a>工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Http工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">int</span> <span class="variable">TIMEOUT_MSEC</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送GET方式请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url,Map&lt;String,String&gt; paramMap)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建Httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">URIBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(url);</span><br><span class="line">            <span class="keyword">if</span>(paramMap != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (String key : paramMap.keySet()) &#123;</span><br><span class="line">                    builder.addParameter(key,paramMap.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建GET请求</span></span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断响应状态</span></span><br><span class="line">            <span class="keyword">if</span>(response.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">                result = EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送POST方式请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, String&gt; paramMap)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resultString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Http Post请求</span></span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建参数列表</span></span><br><span class="line">            <span class="keyword">if</span> (paramMap != <span class="literal">null</span>) &#123;</span><br><span class="line">                List&lt;NameValuePair&gt; paramList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; param : paramMap.entrySet()) &#123;</span><br><span class="line">                    paramList.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(param.getKey(), param.getValue()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 模拟表单</span></span><br><span class="line">                <span class="type">UrlEncodedFormEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(paramList);</span><br><span class="line">                httpPost.setEntity(entity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            httpPost.setConfig(builderRequestConfig());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行http请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            resultString = EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//设置连接参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> RequestConfig <span class="title function_">builderRequestConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(TIMEOUT_MSEC)</span><br><span class="line">                .setConnectionRequestTimeout(TIMEOUT_MSEC)</span><br><span class="line">                .setSocketTimeout(TIMEOUT_MSEC).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">WEIXI_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getOpenid</span><span class="params">(UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//通过临时登录凭证 code 调用接口</span></span><br><span class="line">        Map&lt;String,String&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        param.put(<span class="string">&quot;appid&quot;</span>,weChatProperties.getAppid());</span><br><span class="line">        param.put(<span class="string">&quot;secret&quot;</span>,weChatProperties.getSecret());</span><br><span class="line">        param.put(<span class="string">&quot;js_code&quot;</span>, userLoginDTO.getCode());</span><br><span class="line">        param.put(<span class="string">&quot;grant_type&quot;</span>,<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line"><span class="comment">//将官方文档中的地址和自己小程序的参数传递过去</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> HttpClientUtil.doGet(WEIXI_LOGIN, param);</span><br><span class="line">        <span class="comment">//解析成JSON字符串</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">JSONObject</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSONObject.parseObject(json);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> jsonString.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> openid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="小程序相关配置"><a class="header-anchor" href="#小程序相关配置"></a>小程序相关配置</h4><ol><li><p><strong>yml</strong>,主要是appid和secret,可以自己在微信开发者工具中查看，注释的部分是配置微信支付的参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">$&#123;sky.wechat.appid&#125;</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">$&#123;sky.wechat.secret&#125;</span></span><br><span class="line"><span class="comment">#    mchid: $&#123;sky.wechat.mchid&#125; </span></span><br><span class="line"><span class="comment">#    mchSerialNo: $&#123;sky.wechat.mchid&#125;</span></span><br><span class="line"><span class="comment">#    privateKeyFilePath: $&#123;sky.wechat.privateKeyFilePath&#125;</span></span><br><span class="line"><span class="comment">#    apiV3Key: $&#123;sky.wechat.apiV3Key&#125;</span></span><br><span class="line"><span class="comment">#    weChatPayCertFilePath: $&#123;sky.wechat.weChatPayCertFilePath&#125;</span></span><br><span class="line"><span class="comment">#    notifyUrl: $&#123;sky.wechat.notifyUrl&#125;</span></span><br><span class="line"><span class="comment">#    refundNotifyUrl: $&#123;sky.wechat.refundNotifyUrl&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>配置类，通过依赖注入的形式将参数导入到配置类,后续要在代码中使用只要自动装配就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sky.wechat&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appid; <span class="comment">//小程序的appid</span></span><br><span class="line">    <span class="keyword">private</span> String secret; <span class="comment">//小程序的秘钥</span></span><br><span class="line">    <span class="keyword">private</span> String mchid; <span class="comment">//商户号</span></span><br><span class="line">    <span class="keyword">private</span> String mchSerialNo; <span class="comment">//商户API证书的证书序列号</span></span><br><span class="line">    <span class="keyword">private</span> String privateKeyFilePath; <span class="comment">//商户私钥文件</span></span><br><span class="line">    <span class="keyword">private</span> String apiV3Key; <span class="comment">//证书解密的密钥</span></span><br><span class="line">    <span class="keyword">private</span> String weChatPayCertFilePath; <span class="comment">//平台证书</span></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl; <span class="comment">//支付成功的回调地址</span></span><br><span class="line">    <span class="keyword">private</span> String refundNotifyUrl; <span class="comment">//退款成功的回调地址</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>微信支付相关功能需要认证的商户号，个人申请的小程序无法实现该功能</p></li></ol><h3 id="Spring-Task-定时任务框架"><a class="header-anchor" href="#Spring-Task-定时任务框架"></a>Spring Task 定时任务框架</h3><blockquote><p>定时自动执行某段Java代码</p><p>解决用户下单后一直未支付，订单一直处于未支付状态</p><p>管理端未点击完成按钮，订单一直处于派送中的状态</p></blockquote><h4 id="使用方法-v2"><a class="header-anchor" href="#使用方法-v2"></a>使用方法</h4><ol><li><p>导入maven坐标，Spring-context,springBoot本身的maven坐标中就包含了</p></li><li><p>启动类添加<code>@EnableScheduling</code>开启任务调度</p></li><li><p>自定义定时任务类</p><ul><li>cron表达式：配置定时任务触发时间  <code>0 0 12 * * ?</code>：每天的12点整执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  定时任务类，定时处理订单信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Params</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:  XiaoYu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:  2024/12/25 上午9:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrdersMapper ordersMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:  定时处理超时订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Params</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:  XiaoYu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>:  2024/12/25 上午9:02</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * ?&quot;)</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = &quot;1/5 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTimeoutOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理超时订单：&#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">15</span>);</span><br><span class="line">        <span class="comment">//付款超时订单 status=1 order_time&lt; 当前时间-15分钟</span></span><br><span class="line">       List&lt;Orders&gt; ordersList =  ordersMapper.getStatusAndOrderTime(Orders.PENDING_PAYMENT,localDateTime);</span><br><span class="line">        <span class="comment">//TODO isEmpty方法并不会检查集合是否为空，只会判断集合的长度是否为0</span></span><br><span class="line">       <span class="keyword">if</span>(ordersList!=<span class="literal">null</span>&amp;&amp;!ordersList.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">for</span>(Orders orders:ordersList)&#123;</span><br><span class="line">               orders.setStatus(Orders.CANCELLED);</span><br><span class="line">               orders.setCancelReason(<span class="string">&quot;付款超时，订单自动取消&quot;</span>);</span><br><span class="line">               orders.setCancelTime(LocalDateTime.now());</span><br><span class="line">               ordersMapper.update(orders);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:  处理一直处于派送中的订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Params</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:  XiaoYu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>:  2024/12/25 上午9:14</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = &quot;0/5 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processDeliveryOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理一直处于派送中订单：&#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">60</span>);</span><br><span class="line">        List&lt;Orders&gt; ordersList =  ordersMapper.getStatusAndOrderTime(Orders.DELIVERY_IN_PROGRESS,localDateTime);</span><br><span class="line">        <span class="keyword">if</span>(ordersList!=<span class="literal">null</span>&amp;&amp;!ordersList.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">for</span>(Orders orders:ordersList)&#123;</span><br><span class="line">                orders.setStatus(Orders.COMPLETED);</span><br><span class="line">                ordersMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="WebSocket"><a class="header-anchor" href="#WebSocket"></a>WebSocket</h3><blockquote><p>基于TCP一种新的网络协议，一次握手两者之间就可以建立持久性的连接，并进行双向数据传输</p><p>在本项目是用户向服务端推送消息，比如下单提醒、催单提醒</p><p>约定服务端发送来到格式为JSON，有type、orderld、content三个字段</p><p>type: 消息类型  1 来单  2 催单</p><p>orderld: 订单ID</p><p>content: 消息内容</p></blockquote><h4 id="使用方法-v3"><a class="header-anchor" href="#使用方法-v3"></a>使用方法</h4><ol><li><p>导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.websocket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.websocket-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入服务端组件，用于和客户端通信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  webSocket组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Params</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:  XiaoYu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:  2024/12/25 上午9:40</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放会话对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端： &#123;&#125;  建立连接&quot;</span>,sid);</span><br><span class="line">        sessionMap.put(sid, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到来自客户端：&#123;&#125;的信息:&#123;&#125;&quot;</span>,sid,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;连接断开:&#123;&#125;&quot;</span> , sid);</span><br><span class="line">        sessionMap.remove(sid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAllClient</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Collection&lt;Session&gt; sessions = sessionMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Session session : sessions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//服务器向客户端发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导入WebSocketConfiguration配置类，注册WebSocket的服务端组件，加载SpringBoot时就会自动调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>客户支付成功后调用群发的API实现服务端向客户端发送消息，客户端浏览器解析前端推送过来的消息，判断操作类型，进行相应的语音播报</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给商家发送来单提醒</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">       map.put(<span class="string">&quot;type&quot;</span>,<span class="number">1</span>);<span class="comment">//1 来单 2 催单</span></span><br><span class="line">       <span class="comment">//根据订单号查出订单id</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">Orders</span> <span class="variable">byNumber</span> <span class="operator">=</span> ordersMapper.getByNumber(ordersPaymentDTO.getOrderNumber());</span><br><span class="line">       map.put(<span class="string">&quot;orderId&quot;</span>,byNumber.getId());<span class="comment">//订单Id</span></span><br><span class="line">       map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span>+ordersPaymentDTO.getOrderNumber());</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSONObject.toJSONString(map);</span><br><span class="line">       <span class="comment">//推送到前端页面</span></span><br><span class="line">       webSocketServer.sendToAllClient(jsonString);</span><br></pre></td></tr></table></figure></li></ol><h4 id="细节"><a class="header-anchor" href="#细节"></a>细节</h4><ol><li>前端发送的请求是到nginx服务器,通过nginx服务器反向代理的形式在将请求转发到后端服务器</li><li>具体群发的代码应该写在支付成功后的回调函数中，但没有实现支付这个功能，所以写在了支付方法中</li></ol><h3 id="Apache-ECharts"><a class="header-anchor" href="#Apache-ECharts"></a><a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></h3><blockquote><p>基于JavaScript的数据可视化图表库，直观、生动、可交互</p><p>在本项目中主要是实现各个维度的数据统计以图表的形式展示，我们根据前端定义的接口将数据横纵坐标的值传递过去</p><p>主要是遍历每天得到数据，还有就是SQL语句的编写，利用map集合封装数据对数据库</p></blockquote><h4 id="具体代码解析"><a class="header-anchor" href="#具体代码解析"></a>具体代码解析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *以订单数据统计为例，通过DateTimeFormat注解指定日期时间的格式化模式</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/ordersStatistics&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;OrderReportVO&gt; <span class="title function_">ordersStatistics</span><span class="params">(</span></span><br><span class="line"><span class="params">           <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin ,</span></span><br><span class="line"><span class="params">           <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;订单数据统计：&#123;&#125;，&#123;&#125;&quot;</span>,begin,end);</span><br><span class="line">    <span class="keyword">return</span> Result.success(reportService.ordersStatistics(begin,end));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//serviceImpl中的方法</span></span><br><span class="line"> <span class="comment">/*订单数据统计*/</span></span><br><span class="line">    <span class="keyword">public</span> OrderReportVO <span class="title function_">ordersStatistics</span><span class="params">(LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="comment">//这个是自定义方法是将begin和结束的时间分割为列表，以天为单位</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;LocalDate&gt; dateList = getLocalDates(begin,end);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; orderCountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//订单总数列表</span></span><br><span class="line">        List&lt;Integer&gt; validOrderCountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//有效订单数</span></span><br><span class="line">        <span class="keyword">for</span> (LocalDate localDate : dateList) &#123;</span><br><span class="line">          <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span>   LocalDateTime.of(localDate,LocalTime.MIN);</span><br><span class="line">          <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span>  LocalDateTime.of(localDate,LocalTime.MAX);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">orderCount</span> <span class="operator">=</span> getOrderCount(beginTime,endTime,<span class="literal">null</span>);<span class="comment">//当天订单总数</span></span><br><span class="line">            <span class="comment">//这种判断形式还可以优化 Optional类</span></span><br><span class="line">            orderCount =  orderCount == <span class="literal">null</span> ? <span class="number">0</span>:orderCount;</span><br><span class="line">          <span class="type">Integer</span> <span class="variable">validOrderCount</span> <span class="operator">=</span>  getOrderCount(beginTime,endTime,Orders.COMPLETED);;<span class="comment">//当天的有效订单数</span></span><br><span class="line">          validOrderCount =   validOrderCount == <span class="literal">null</span> ? <span class="number">0</span>:validOrderCount;</span><br><span class="line">          orderCountList.add(orderCount);</span><br><span class="line">          validOrderCountList.add(validOrderCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用steam流得到订单总数和有效订单总数</span></span><br><span class="line">         <span class="type">Integer</span> <span class="variable">totalOrderCount</span> <span class="operator">=</span> orderCountList.stream().reduce(Integer::sum).get();</span><br><span class="line">        totalOrderCount = totalOrderCount == <span class="literal">null</span> ? <span class="number">0</span>:totalOrderCount;</span><br><span class="line"></span><br><span class="line">         <span class="type">Integer</span> <span class="variable">validOrderCount</span> <span class="operator">=</span> validOrderCountList.stream().reduce(Integer::sum).get();</span><br><span class="line">        validOrderCount = validOrderCount == <span class="literal">null</span> ? <span class="number">0</span>:validOrderCount;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">orderCompletionRate</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(totalOrderCount!=<span class="number">0</span>)&#123;</span><br><span class="line">             orderCompletionRate = validOrderCount.doubleValue()/totalOrderCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//StringUtils利用这个工具包对列表进行分割·</span></span><br><span class="line">        <span class="keyword">return</span> OrderReportVO.builder()</span><br><span class="line">                .dateList(StringUtils.join(dateList,<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                .orderCountList(StringUtils.join(orderCountList,<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                .validOrderCountList(StringUtils.join(validOrderCountList,<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                .totalOrderCount(totalOrderCount)</span><br><span class="line">                .validOrderCount(validOrderCount)</span><br><span class="line">                .orderCompletionRate(orderCompletionRate)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Apache-POI"><a class="header-anchor" href="#Apache-POI"></a><a href="https://www.w3ccoo.com/apache_poi/index.html">Apache POI</a></h3><blockquote><p>使用POI在Java程序中对Misrcosoft Office各种文件进行读写操作</p></blockquote><h4 id="具体使用"><a class="header-anchor" href="#具体使用"></a>具体使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*导出报表*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//导出最近30天的数据</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">LocalDate</span> <span class="variable">beginTime</span> <span class="operator">=</span> LocalDate.now().minusDays(<span class="number">30</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">LocalDate</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalDate.now().minusDays(<span class="number">1</span>);</span><br><span class="line">       <span class="type">BusinessDataVO</span> <span class="variable">businessDataVO</span> <span class="operator">=</span>  workspaceService.businessData(LocalDateTime.of(beginTime,LocalTime.MIN),LocalDateTime.of(endTime,LocalTime.MAX));</span><br><span class="line">      <span class="comment">//TODO 从类路径（classpath）中加载</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/运营数据报表模板.xlsx&quot;</span>);</span><br><span class="line">       <span class="comment">//基于模板文件创建一个新的excel文件</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br><span class="line">       <span class="comment">//获取第一个sheet页</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//写入概述数据 第二行第二列</span></span><br><span class="line">      sheet.getRow(<span class="number">1</span>).getCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;时间：&quot;</span>+beginTime+<span class="string">&quot;至&quot;</span>+endTime);</span><br><span class="line">       <span class="comment">//获取第四行</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(<span class="number">3</span>);</span><br><span class="line">       row.getCell(<span class="number">2</span>).setCellValue(businessDataVO.getTurnover());<span class="comment">//营业额</span></span><br><span class="line">       row.getCell(<span class="number">4</span>).setCellValue(businessDataVO.getOrderCompletionRate());<span class="comment">//订单完成率</span></span><br><span class="line">       row.getCell(<span class="number">6</span>).setCellValue(businessDataVO.getNewUsers());<span class="comment">//新增用户数</span></span><br><span class="line">       <span class="comment">//第五行</span></span><br><span class="line">       row = sheet.getRow(<span class="number">4</span>);</span><br><span class="line">       row.getCell(<span class="number">2</span>).setCellValue(businessDataVO.getValidOrderCount());<span class="comment">//有效订单</span></span><br><span class="line">       row.getCell(<span class="number">4</span>).setCellValue(businessDataVO.getUnitPrice());<span class="comment">//平均单价</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//开始时间</span></span><br><span class="line">       <span class="comment">//填充明细数据,生成30天的数据报表</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">           <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> beginTime.plusDays(i);</span><br><span class="line">           <span class="comment">//查询某一天订单营业数据</span></span><br><span class="line">           <span class="keyword">final</span> <span class="type">BusinessDataVO</span> <span class="variable">dataVO</span> <span class="operator">=</span> workspaceService.businessData(LocalDateTime.of(date, LocalTime.MIN), LocalDateTime.of(date, LocalTime.MAX));</span><br><span class="line"></span><br><span class="line">           row = sheet.getRow(<span class="number">7</span>+i);</span><br><span class="line">           row.getCell(<span class="number">1</span>).setCellValue(date.toString());<span class="comment">//日期</span></span><br><span class="line">           row.getCell(<span class="number">2</span>).setCellValue(dataVO.getTurnover());<span class="comment">//营业额</span></span><br><span class="line">           row.getCell(<span class="number">3</span>).setCellValue(dataVO.getValidOrderCount());<span class="comment">//有效订单</span></span><br><span class="line">           row.getCell(<span class="number">4</span>).setCellValue(dataVO.getOrderCompletionRate());<span class="comment">//订单完成率</span></span><br><span class="line">           row.getCell(<span class="number">5</span>).setCellValue(dataVO.getUnitPrice());<span class="comment">//平均单价</span></span><br><span class="line">           row.getCell(<span class="number">6</span>).setCellValue(dataVO.getNewUsers());<span class="comment">//新增用户数</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将数据写入报表</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">       excel.write(outputStream);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//关闭资源</span></span><br><span class="line">       outputStream.close();</span><br><span class="line">       excel.close();</span><br><span class="line">       in.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="使用细节-v2"><a class="header-anchor" href="#使用细节-v2"></a>使用细节</h4><ol><li>一般来说表格的格式直接导入模板进行绘制，在spring boot中模板文件要放在resource包下</li><li>重点是表格中如何填充数据</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>走进Nginx</title>
      <link href="/%E8%B5%B0%E8%BF%9BNginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/%E8%B5%B0%E8%BF%9BNginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="走进Nginx服务器"><a class="header-anchor" href="#走进Nginx服务器"></a>走进Nginx服务器</h1><h2 id="何为Nginx"><a class="header-anchor" href="#何为Nginx"></a>何为Nginx</h2><blockquote><ol><li><code>Nginx</code>是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</li><li>一款<strong>轻量级</strong>的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</li><li>支持热部署，启动简单,其中master 管理进程与 worker 工作进程的分离设计，可以在不间断服务下对软件版本或者配置进行升级，可以做到7*24小时不间断运行</li><li>可以作为 Web 服务端、HTTP 反向代理、负载均衡和前端缓存服务等场景使用</li><li>使用 BSD 许可协议，免费使用，且可修改源码</li><li>占有内存少，并发能力强</li></ol></blockquote><h2 id="Nginx的负载均衡"><a class="header-anchor" href="#Nginx的负载均衡"></a>Nginx的负载均衡</h2><blockquote><ol><li>负载均衡（Load Balance）就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</li><li>缓解原先服务器的压力</li><li>Nginx的方式</li></ol><ul><li>轮询法(默认方法)：每个请求按时间顺序逐一分配到不同的后端服务器</li><li>weight权重模式(加权轮询)：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的<br>情况。</li><li>ip_hash：如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器，每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</li><li>least_conn：根据最少连接方式，把请求优先分配给连接数量少的后端服务</li><li>url_hash：根据url的分配方式，相同的url会被分配到同一个后端服务</li><li>fair：根据响应时间方式，响应时间段的服务将会被优先分配</li></ul></blockquote><h2 id="Nginx实现动静分离"><a class="header-anchor" href="#Nginx实现动静分离"></a>Nginx实现动静分离</h2><blockquote><p>原理：动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式</p><center>   <img src="/走进Nginx服务器/undefined"  alt="QQ_1733847218709" style="zoom: 33% ;" /></center><p><strong>基本配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">10000</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">#拦截后台请求</span></span><br><span class="line">      <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http:// <span class="number">192.168.112.101:8888</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#拦截静态资源</span></span><br><span class="line">      <span class="comment">#使用正则表达式匹配</span></span><br><span class="line">      <span class="comment">#这些请求被定向到 /static/ 目录下。autoindex on; 指令允许 Nginx 自动为目录提供索引页面</span></span><br><span class="line">      <span class="section">location</span> <span class="regexp">~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /static/;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="Nginx实现反向代理"><a class="header-anchor" href="#Nginx实现反向代理"></a>Nginx实现反向代理</h2><h3 id="基本介绍"><a class="header-anchor" href="#基本介绍"></a>基本介绍</h3><blockquote><img src="/走进Nginx服务器/undefined"  alt="QQ_1733842287284" style="zoom:50%;" /><ol><li>正向代理：在本地搭建一个服务器来帮助我们去访问，像VPN 就是正向代理(浏览器中配置代理服务器)</li><li>反向代理：搭建一个过渡服务器，反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器的地址，是在网络中将客户端的请求转发给后端服务器的技术(在服务器中配置代理服务器)</li></ol></blockquote><h3 id="使用反向代理的好处"><a class="header-anchor" href="#使用反向代理的好处"></a>使用反向代理的好处</h3><blockquote><ol><li>对客户端暴露的其实是一个 VIP，不是真实的 Web 服务器的 IP，隐藏了真实服务器的地址，<strong>保证后端服务安全</strong></li><li>反向代理的对象是 Web 服务器端，代理服务器和 Web 服务端属于同一个LAN，对客户端来说是透明的</li><li>可以在多个后端服务器之间分配客户端请求，从而实现<strong>负载均衡</strong></li><li>客户端不需要任何配置就可以访问</li><li>提高访问速度</li></ol></blockquote><h3 id="配置方式"><a class="header-anchor" href="#配置方式"></a>配置方式</h3><blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;...              <span class="comment">#全局块:配置影响 nginx 全局的指令。一般有运行 nginx 服务器的用户组，nginx 进程 pid 存放路径，日志存放路径，配置文件引入，允许生成 worker process 数等</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="section">events</span> &#123;         <span class="comment">#events块:配置影响 nginx 服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等</span></span><br><span class="line"> ...</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="attribute">http</span>      <span class="comment">#http块 可以嵌套多个 server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type 定义，日志自定义，是否使用 sendfile 传输文件，连接超时时间，单连接请求数等</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">  ...   <span class="comment">#http全局块</span></span><br><span class="line">  <span class="attribute">server</span>        <span class="comment">#server块 配置虚拟主机的相关参数，一个 http 中可以有多个 server</span></span><br><span class="line">  &#123; </span><br><span class="line">      ...       <span class="comment">#server全局块</span></span><br><span class="line">      <span class="section">location</span> [PATTERN]   <span class="comment">#location块 配置请求的路由，以及各种页面的处理情况</span></span><br><span class="line">      &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="section">location</span> [PATTERN] </span><br><span class="line">      &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span></span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...     <span class="comment">#http全局块</span></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>反向代理的配置方式</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="comment"># 监听80端口</span></span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">      <span class="comment">#服务器名称</span></span><br><span class="line">      <span class="attribute">server_name</span>  localhost;</span><br><span class="line"><span class="comment"># 设置字符集</span></span><br><span class="line">      <span class="comment">#charset koi8-r; </span></span><br><span class="line"><span class="comment"># 设置访问日志的路径和格式</span></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求根 URL (/) 时，Nginx 会从 html/sky 目录提供服务，并查找index.html作为默认页面 </span></span><br><span class="line">      <span class="section">location</span> / &#123;</span><br><span class="line">          <span class="attribute">root</span>   html/sky;</span><br><span class="line">          <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># 自定义错误页面 显示 html/50x.html 页面</span></span><br><span class="line">       <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">      <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">          <span class="attribute">root</span>   html;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 反向代理,处理管理端发送的请求 将所有 /api/ 下的请求代理到 http://localhost:8080/admin/</span></span><br><span class="line"></span><br><span class="line">      <span class="section">location</span> /api/ &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span>   http://localhost:8080/admin/;</span><br><span class="line">          <span class="comment">#proxy_pass   http://webservers/admin/;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向代理,处理用户端发送的请求</span></span><br><span class="line">      <span class="section">location</span> /user/ &#123;</span><br><span class="line">          <span class="attribute">proxy_pass</span>   http://webservers/user/;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># WebSocket</span></span><br><span class="line"><span class="comment">#配置了对 WebSocket 的支持。Nginx 会将所有 /ws/ 下的请求代理到 http://webservers/ws/，并设置必要的头部来支持 WebSocket 握手</span></span><br><span class="line"><span class="section">location</span> /ws/ &#123;</span><br><span class="line">          <span class="attribute">proxy_pass</span>   http://webservers/ws/;</span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">3600s</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;<span class="variable">$connection_upgrade</span>&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>负载均衡的配置方式</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义了一个名为 webservers 的上游服务器组</span></span><br><span class="line"><span class="comment"># Nginx 将要代理请求到的后端服务器</span></span><br><span class="line"><span class="comment">#采用weight的方式</span></span><br><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">90</span> ;</span><br><span class="line">  <span class="comment">#server 127.0.0.1:8088 weight=10 ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意存放nginx.exe文件夹路径不能有中文</strong></p></blockquote><h2 id="关闭Nginx"><a class="header-anchor" href="#关闭Nginx"></a>关闭Nginx</h2><blockquote><ul><li>nginx -s stop  快速停止,可能导致数据没有保存下来</li><li>nginx -s quit   有序停止</li><li>taskkill /F /IM nginx.exe &gt; nul  可以直接在cmd界面使用,前两个要在nginx安装路径下</li></ul><p><strong>因为浏览器有缓存,关闭后记得刷新浏览器</strong></p></blockquote><h2 id="Nginx和Tomcat的区别"><a class="header-anchor" href="#Nginx和Tomcat的区别"></a>Nginx和Tomcat的区别</h2><blockquote><ol><li>Tomcat是一个Java Servlet容器,运行在JVM之上,它可以处理HTTP请求并将其传递给Java应用程序进行处理,Tomcat提供了一个容器，用于加载、执行和管理Java Servlet、JavaServer Pages（JSP）和其他Java Web技术</li><li>Nginx是一个高性能的Web服务器和反向代理服务器。它专注于处理静态资源和负载均衡,可以处理大量的并发连接和请求</li><li>Tomcat需要配置Java环境才能运行，Nginx安装后直接就能运行</li><li>性能不同，Nginx更适用于处理静态资源，Tomcat处理动态资源更迅速，二者通常交互使用</li><li>当有多个Tomcat实例运行同一个应用程序时，Nginx可以作为负载均衡器，根据一定的策略将请求分发给不同的Tomcat实例，提高系统的可伸缩性和容错性，确保多个Tomcat实例之间均衡分担负载</li><li>Nginx支持缓存静态资源，当客户端请求相同的资源时，直接返回资源的副本，减少网络传输时间和服务器负载，还可以对响应内容进行压缩，减小传输数据的数据量，提高网络传输效率</li><li>处理请求性能的不同，Nignx采用了事件驱动模型和异步处理方式，具有出色的性能和高并发处理能力</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Redis</title>
      <link href="/Redis/"/>
      <url>/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Redis"><a class="header-anchor" href="#初识Redis"></a>初识Redis</h1><h2 id="什么是Redis数据库"><a class="header-anchor" href="#什么是Redis数据库"></a>什么是Redis数据库</h2><blockquote><ol><li><p>基于内存的key - vaule结构数据库(非关系型)</p></li><li><ul><li>Redis5及之前是单线程版本</li></ul></li></ol><ul><li>Redis6开始引入多线程版本(实际上是 单线程+多线程 版本)</li></ul><ol start="3"><li>key为字符串类型，value有5种常用的数据类型</li></ol>  <img src="/Redis/undefined"  alt="QQ_1733836105966" style="zoom:50%;" /><ul><li>字符串 String：普通字符串</li><li>列表 list：按照插入顺序排序，可以有重复元素，相当于<code>Java</code>中的<code>LinkedList</code>，先进先出</li><li>哈希 hash：散列，相当于<code>Java</code>中的<code>HashMap</code></li><li>集合 set：无序，没有重复元素，相当于<code>Java</code>中的<code>HashSet</code></li><li>有序集合 sorted set/zset：每个元素关联一个分数，通过分数(score)升序排序，没有重复的元素</li></ul><ol start="4"><li>优点</li></ol><ul><li>适合内存存储，读写性能高</li><li>适合存储热点数据</li><li>高可用、分布式</li><li>企业应用高</li></ul></blockquote><h2 id="如何使用"><a class="header-anchor" href="#如何使用"></a>如何使用</h2><h3 id="启动服务器"><a class="header-anchor" href="#启动服务器"></a>启动服务器</h3><blockquote><p>下载解压后自带的命令工具</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server#用于启动 Redis 的工具</span><br><span class="line">redis-cli #Redis命令行工具</span><br><span class="line">redis-benchmark#用于检测 Redis 在本机的运行效率</span><br><span class="line">redis-check-aof#修复 AOF 持久化文件</span><br><span class="line">redis-check-rdb#修复 RDB 持久化文件</span><br></pre></td></tr></table></figure><p>命令行工具<code>redis-cli</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br><span class="line"></span><br><span class="line">-h指定远程主机</span><br><span class="line">-p指定 Redis 服务的端口号</span><br><span class="line">-a指定密码，未设置数据库密码可以省略-a 选项</span><br><span class="line"></span><br><span class="line">若不添加任何选项表示，则使用127.0.0.1:6379连接本机上的Redis数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试工具<code>redis-benchmark</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark   [选项]    [选项值]</span><br><span class="line">-h指定服务器主机名。</span><br><span class="line">-p指定服务器端口。</span><br><span class="line">-s指定服务器 socket</span><br><span class="line">-c指定并发连接数。</span><br><span class="line">-n指定请求数。</span><br><span class="line">-d以字节的形式指定 SET/GET 值的数据大小。</span><br><span class="line">-k1=keep alive 0=reconnect 。</span><br><span class="line">-rSET/GET/INCR 使用随机 key, SADD 使用随机值。</span><br><span class="line">-P通过管道传输请求。</span><br><span class="line">-q强制退出 redis。仅显示 query/sec 值。</span><br><span class="line">–csv以 CSV 格式输出。</span><br><span class="line">-l生成循环，永久执行测试。</span><br><span class="line">-t仅运行以逗号分隔的测试命令列表。</span><br><span class="line">-IIdle 模式。仅打开 N 个 idle 连接并等待。</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">向 IP 地址为 192.168.184.10、端口为 6379 的 Redis 服务器发送 100 个并发连接与 10 万个请求测试性能</span><br><span class="line">redis-benchmark -h 192.168.184.10 -p 6379 -c 100 -n 100000</span><br><span class="line"></span><br><span class="line">测试存取大小为 100 字节的数据包的性能</span><br><span class="line">redis-benchmark -h 192.168.184.10 -p 6379 -q -d 100</span><br><span class="line"></span><br><span class="line">测试本机上 Redis 服务在进行 set 与 lpush 操作时的性能</span><br><span class="line">redis-benchmark -t set,lpush -n 100000 -q</span><br></pre></td></tr></table></figure><ol start="2"><li>操作数据类型</li></ol><ul><li><p>字符串常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET key value设置指定key的值</span><br><span class="line">GET key获取指定key的值</span><br><span class="line">SETEX key seconds value设置指定key的值，并将 key 的过期时间设为 seconds 秒</span><br><span class="line">SETNX key value只有在 key 不存在时设置 key 的值</span><br></pre></td></tr></table></figure></li><li><p>列表常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LPUSH key value1 [value2]将一个或多个值插入到列表头部</span><br><span class="line">LRANGE key start stop获取列表指定范围内的元素</span><br><span class="line">RPOP key移除并获取列表最后一个元素</span><br><span class="line">LLEN key获取列表长度</span><br><span class="line">多个元素之间用空格隔开</span><br></pre></td></tr></table></figure></li><li><p>哈希常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hash特别适合用于存储对象</span><br><span class="line">HSET key field value将哈希表 key 中的字段 field 的值设为 value</span><br><span class="line">HGET key field获取存储在哈希表中指定字段的值</span><br><span class="line">HDEL key field删除存储在哈希表中的指定字段</span><br><span class="line">HKEYS key获取哈希表中所有字段</span><br><span class="line">HVALS key获取哈希表中所有值</span><br></pre></td></tr></table></figure></li><li><p>集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SADD key member1 [member2]向集合添加一个或多个成员</span><br><span class="line">SMEMBERS key返回集合中的所有成员</span><br><span class="line">SCARD key获取集合的成员数</span><br><span class="line">SINTER key1 [key2]返回给定所有集合的交集</span><br><span class="line">SUNION key1 [key2]返回所有给定集合的并集</span><br><span class="line">SREM key member1 [member2]删除集合中一个或多个成员</span><br></pre></td></tr></table></figure></li><li><p>有序集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZADD key score1 member1 [score2 member2]向有序集合添加一个或多个成员</span><br><span class="line">ZRANGE key start stop [WITHSCORES]通过索引区间返回有序集合中指定区间内的成员</span><br><span class="line">ZINCRBY key increment member有序集合中对指定成员的分数加上增量increment</span><br><span class="line">ZREM key member [member ..]移除有序集合中的一个或多个成员</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>通用命令</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern查找所有符合给定模式( pattern)的 key</span><br><span class="line">EXISTS key检查给定 key 是否存在</span><br><span class="line">TYPE key返回 key 所储存的值的类型</span><br><span class="line">DEL key该命令用于在 key 存在是删除 key</span><br></pre></td></tr></table></figure><ol start="4"><li>事务操作</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MULTI：标记一个事务快的开始；</span><br><span class="line"></span><br><span class="line">EXEC：执行事务块中的所有命令；</span><br><span class="line"></span><br><span class="line">DISCARD：取消事务，放弃执行事务块中的所有命令；</span><br><span class="line"></span><br><span class="line">UNWATCH：取消 WATCH 命令对所有 key 的监控；</span><br><span class="line"></span><br><span class="line">在MULTI和EXEC之间放置多个命令，最后使用EXEC命令来执行这些命令。如果在执行事务期间没有出现错误，所有的命令都会被一次性执行</span><br></pre></td></tr></table></figure></blockquote><h2 id="再Java中操作Redis"><a class="header-anchor" href="#再Java中操作Redis"></a>再<code>Java</code>中操作<code>Redis</code></h2><h3 id="使用Spring-Data-Redis"><a class="header-anchor" href="#使用Spring-Data-Redis"></a>使用Spring Data Redis</h3><blockquote><ol><li>Redis在Java中的客户端常用的几种有Jedis、Lettuce、Spring Data Redis</li><li>Spring Data Redis是Spring的一部分呢，对Redis底层开发包进行了高度封装</li><li>在Spring项目中可以使用Spring Data Redis来简化操作</li></ol></blockquote><h4 id="使用方式"><a class="header-anchor" href="#使用方式"></a>使用方式</h4><blockquote><ol><li>导入maven坐标</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置Redis数据源</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;sky.redis.host&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;sky.redis.port&#125;</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">$&#123;sky.redis.database&#125;</span></span><br><span class="line">    <span class="comment"># 通过不同的运行环境配置，dataBase配置的数据库默认是DB0，Redis中默认有0~15个数据库</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置类，创建RedisTemplate对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板类&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置key的序列化器默认为JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">       <span class="comment">// 将 RedisConnectionFactory 设置为 RedisTemplate 使用的连接工厂，这样 RedisTemplate 就可以通过这个工厂获取与 Redis 服务器的连接。</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>通过RedisTemplate对象操作Redis</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue()  <span class="comment">//字符串</span></span><br><span class="line">redisTemplate.opsForHash()<span class="comment">//哈希</span></span><br><span class="line">redisTemplate.opsForList()<span class="comment">//列表</span></span><br><span class="line">redisTemplate.opsForSet()<span class="comment">//集合</span></span><br><span class="line">redisTemplate.opsForZSet()<span class="comment">//有序集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字符串值</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">// 获取字符串值,设置的是什么值就强转为什么</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hashKey</span> <span class="operator">=</span> <span class="string">&quot;user:1000&quot;</span>;</span><br><span class="line"><span class="comment">// 设置哈希字段</span></span><br><span class="line">redisTemplate.opsForHash().put(hashKey, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Kimi&quot;</span>);</span><br><span class="line">redisTemplate.opsForHash().put(hashKey, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line"><span class="comment">// 获取哈希字段</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForHash().get(hashKey, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> (Integer) redisTemplate.opsForHash().get(hashKey, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">listKey</span> <span class="operator">=</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line"><span class="comment">// 从列表左侧插入元素</span></span><br><span class="line">redisTemplate.opsForList().leftPush(listKey, <span class="string">&quot;element1&quot;</span>);</span><br><span class="line">redisTemplate.opsForList().leftPush(listKey, <span class="string">&quot;element2&quot;</span>);</span><br><span class="line"><span class="comment">// 从列表右侧插入元素</span></span><br><span class="line">redisTemplate.opsForList().rightPush(listKey, <span class="string">&quot;element3&quot;</span>);</span><br><span class="line"><span class="comment">// 从列表左侧弹出元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> (String) redisTemplate.opsForList().leftPop(listKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">setKey</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span>;</span><br><span class="line"><span class="comment">// 向集合添加元素</span></span><br><span class="line">redisTemplate.opsForSet().add(setKey, <span class="string">&quot;element1&quot;</span>, <span class="string">&quot;element2&quot;</span>);</span><br><span class="line"><span class="comment">// 获取集合中的所有元素</span></span><br><span class="line">Set&lt;String&gt; elements = redisTemplate.opsForSet().members(setKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有序集合的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sortedSetKey</span> <span class="operator">=</span> <span class="string">&quot;sortedSet&quot;</span>;</span><br><span class="line"><span class="comment">// 向有序集合添加元素</span></span><br><span class="line">redisTemplate.opsForZSet().add(sortedSetKey, <span class="string">&quot;element1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">redisTemplate.opsForZSet().add(sortedSetKey, <span class="string">&quot;element2&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 获取有序集合中的所有元素</span></span><br><span class="line">Set&lt;String&gt; sortedElements = redisTemplate.opsForZSet().range(sortedSetKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键</span></span><br><span class="line">redisTemplate.delete(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">// 检查键是否存在</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">exists</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">// 设置键的过期时间（秒）</span></span><br><span class="line">redisTemplate.expire(<span class="string">&quot;key&quot;</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">redisTemplate.multi();</span><br><span class="line"><span class="comment">// 在事务中执行多个操作</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">redisTemplate.exec();</span><br></pre></td></tr></table></figure></blockquote><h2 id="Redis和MySQL的区别"><a class="header-anchor" href="#Redis和MySQL的区别"></a>Redis和MySQL的区别</h2><blockquote><ol><li>非关系型和关系型</li><li>数据模型不同，MySQL是基于二维表，Redis是键值对</li><li>持久性不同，MySQL存储在磁盘上，Redis存储在内存上(支持持久化到磁盘，持久化机制和MySQL不同)</li><li>性能不同</li></ol><ul><li>MySQL在处理大量复杂查询和事务性数据时性能较好</li><li>Redis适合处理大量并发读写数据和缓存操作</li><li>MySQL用于持久化存储数据到硬盘，功能强大，但是速度缓慢。</li><li>Redis用于存储使用较为频繁的数据到缓存中，读取速度快。</li></ul><ol start="5"><li>事务支持不同，MySQL支持ACID(原子性、一致性、隔离性、持久性)事务</li></ol><ul><li>Redis 事务在提交之前任何指令都不会实际的被执行，所以不存在MySQL中脏写，脏读，不可重复读，幻读等问题（<strong>没有隔离级别的概念</strong>）</li><li>Redis 事务不保证原子性，Redis 不能保证所有指令同时成功和失败,可能出现部分指令执行成功但部分指令执行失败的（<strong>不保证原子性</strong>）</li><li>Redis 在执行事务的过程中，能保证事务内的命令依次执行不被其他命令插入（<strong>排它性</strong>）</li><li>Redis 事务仅仅保证事务里的操作会被连续独占的执行，Redis 命令执行是单线程架构，在执行事务内所有命令请求之前无法去执行其他客户端请求（<strong>单独的隔离操作</strong>）</li></ul><ol start="6"><li>MySQL偏向于存数据，Redis偏向于快速取数据</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件的上传和下载</title>
      <link href="/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
      <url>/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件的上传和下载"><a class="header-anchor" href="#文件的上传和下载"></a>文件的上传和下载</h1><h2 id="本地存储"><a class="header-anchor" href="#本地存储"></a>本地存储</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/dome/uploadForm&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">姓名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">年龄: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">头像: &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;image&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>前端提交过来的页面必须满足三个条件</p><ol><li>表单<code>enctype</code>属性为<code>multipart/form-data</code>,浏览器会以二进制流的方式对表单数据进行处理，由服务端对文件上传的请求进行解析和处理</li><li>表单的提交方式必须为<code>post</code></li><li>有一个表单项的<code>type</code>为<code>file</code></li></ol></blockquote><h3 id="代码"><a class="header-anchor" href="#代码"></a><strong>代码</strong></h3><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadForm01</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取上传的文件</span></span><br><span class="line">            <span class="type">Part</span> <span class="variable">filePart</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (filePart == <span class="literal">null</span> || filePart.getSize() == <span class="number">0</span>) &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;No file uploaded&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取文件名（使用兼容的方式）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> getFileName(filePart);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 防止文件名被覆盖</span></span><br><span class="line">            fileName = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文件输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">fileContent</span> <span class="operator">=</span> filePart.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定保存文件的路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">            <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">                uploadDir.mkdirs(); <span class="comment">// 如果目录不存在，则创建目录</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指定文件的完整路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> uploadPath + File.separator + fileName;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将文件保存到本地</span></span><br><span class="line">            saveFile(fileContent, filePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应上传结果</span></span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;文件上传成功: &quot;</span> + filePath);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;文件上传失败: &quot;</span> + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件名的辅助方法</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFileName</span><span class="params">(Part part)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentDisp</span> <span class="operator">=</span> part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">        String[] tokens = contentDisp.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.trim().startsWith(<span class="string">&quot;filename&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">return</span> token.substring(token.indexOf(<span class="string">&quot;=&quot;</span>) + <span class="number">2</span>, token.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown_file&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存文件的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveFile</span><span class="params">(InputStream inputStream, String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outpuStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="type">int</span> bytesRead;</span><br><span class="line">        <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outpuStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">        outpuStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要加<code>@MultipartConfig</code>这个注解，它告诉 Servlet 容器这个 Servlet 需要处理 multipart/form-data 类型的请求</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig(</span></span><br><span class="line"><span class="meta">    location=&quot;/tmp&quot;,                 // 文件存储位置</span></span><br><span class="line"><span class="meta">    fileSizeThreshold=1024*1024,    // 超过该大小的文件会被写入临时文件（1MB）</span></span><br><span class="line"><span class="meta">    maxFileSize=1024*1024*5,        // 单个文件的最大大小（5MB）</span></span><br><span class="line"><span class="meta">    maxRequestSize=1024*1024*10     // 一次请求的最大大小（10MB）</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="自定义方法"><a class="header-anchor" href="#自定义方法"></a>自定义方法</h3><blockquote><p>获取文件名的<code>getFileName</code>方法，再servlet3.1.0版本中可以用<code>filePart.getSubmittedFileName()</code>获取文件名，但由于用的是maven插件运行的tomcat7,不支持该函数，所以采用兼容的方法。这个方法的作用是从上传的文件部分（<code>Part</code>对象）中提取文件名。在处理HTTP多部分请求时，文件名并不直接作为参数传递，而是包含在HTTP请求的头部信息中。这个方法通过解析<code>content-disposition</code>头部来获取文件名。</p><p>在pom文件中自己导入servlet3.1的包可以用 request.getParameter获取文件传输的表单值，3.1以下不行</p><p>文件名通常是<code>filename=&quot;filename.jpg&quot;</code>的形式，取出文件名时我们不需要“，所以<code>token.substring(token.indexOf(&quot;=&quot;) + 2, token.length()-1)</code>跳过”。</p><p>从HTTP请求中获取上传文件的流<code>inputStream</code>,再通过输出流<code>new FileOutputStream(filePath)</code>将文件写入指定路径，创建缓冲区暂存读取的数据，最后将缓冲区中的数据写入文件</p><p><code> getServletContext().getRealPath(&quot;/uploads&quot;);</code>这行代码的作用是获取Web应用中<code>/uploads</code>虚拟路径对应的实际文件系统路径，<code>getServletContext()</code>方法：这是<code>HttpServlet</code>类的一个方法，它返回一个<code>ServletContext</code>对象的引用，也就是返回web运行时的路径，后面就是指定的路径，如果没有该文件夹就创建</p><img src="/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/QQ_1733700975417.png" class="" title="文件路径"></blockquote><h3 id="需要的maven依赖"><a class="header-anchor" href="#需要的maven依赖"></a>需要的maven依赖</h3><blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="远程上传"><a class="header-anchor" href="#远程上传"></a>远程上传</h2><blockquote><p>这里用的是阿里OSS存储服务</p><ol><li><p>注册阿里云账号，开通对象存储OSS服务</p></li><li><p>创建<code>bucketName</code>仓库</p></li><li><p>创建AccessKey得到AccessKey ID 和 AccessKey Secret</p></li><li><p>设置为系统的环境变量，注意会话有效期,设置永久有效期用管理员权限打开终端</p></li></ol> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setx ALIYUN_ACCESS_KEY_ID your_access_key_id</span><br><span class="line">setx ALIYUN_ACCESS_KEY_SECRET your_access_key_secret</span><br></pre></td></tr></table></figure><ol start="5"><li>根据阿里云的SDK创建工具类</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUntil</span> &#123;</span><br><span class="line">    <span class="comment">// Endpoint以华东1（杭州）为例，自己创建的地区，其它Region请按实际情况填写。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 填写Bucket名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;web-cangqio&quot;</span>;</span><br><span class="line">    <span class="comment">// bucket所在地域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">region</span> <span class="operator">=</span> <span class="string">&quot;cn-hangzhou&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(InputStream inputStream, String fileName)</span> <span class="keyword">throws</span> ClientException &#123;</span><br><span class="line"><span class="comment">//获取系统设置的环境变量</span></span><br><span class="line">        <span class="type">EnvironmentVariableCredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();</span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">ClientBuilderConfiguration</span> <span class="variable">clientBuilderConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientBuilderConfiguration</span>();</span><br><span class="line">        clientBuilderConfiguration.setSignatureVersion(SignVersion.V4);</span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> OSSClientBuilder.create()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentialsProvider(credentialsProvider)</span><br><span class="line">                .clientConfiguration(clientBuilderConfiguration)</span><br><span class="line">                .region(region)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObjectRequest对象</span></span><br><span class="line">            <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucketName, fileName, inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            ossClient.putObject(putObjectRequest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回访问URL</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭OSSClient</span></span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用配置文件定义环境变量，多环境配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alioss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">  <span class="attr">access-key-id:</span> <span class="string">***********************</span></span><br><span class="line">  <span class="attr">access-key-secret:</span> <span class="string">*******************</span></span><br><span class="line">  <span class="attr">bucket-name:</span> <span class="string">web-cangqio</span></span><br></pre></td></tr></table></figure><p>在你的dev环境或其他环境yml配置中配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里云配置</span></span><br><span class="line"><span class="attr">alioss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">$&#123;sky.alioss.endpoint&#125;</span></span><br><span class="line">  <span class="attr">access-key-id:</span> <span class="string">$&#123;sky.alioss.access-key-id&#125;</span></span><br><span class="line">  <span class="attr">access-key-secret:</span> <span class="string">$&#123;sky.alioss.access-key-secret&#125;</span></span><br><span class="line">  <span class="attr">bucket-name:</span> <span class="string">$&#123;sky.alioss.bucket-name&#125;</span></span><br></pre></td></tr></table></figure><p><code> application.yml</code>文件中引入  实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> com.aliyun.oss.ClientException;</span><br><span class="line">&gt;<span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line">&gt;<span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line">&gt;<span class="keyword">import</span> com.aliyun.oss.OSSException;</span><br><span class="line">&gt;<span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line">&gt;<span class="keyword">import</span> lombok.Data;</span><br><span class="line">&gt;<span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line">&gt;<span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Data</span></span><br><span class="line">&gt;<span class="meta">@AllArgsConstructor</span></span><br><span class="line">&gt;<span class="meta">@Slf4j</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String endpoint;</span><br><span class="line">   <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">   <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">   <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件上传</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] bytes, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">       <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 创建PutObject请求。</span></span><br><span class="line">           ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">       &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                   + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">           System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">           System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">           System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">           System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                   + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                   + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">           System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">               ossClient.shutdown();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//文件访问路径规则 https://BucketName.Endpoint/ObjectName</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">       stringBuilder</span><br><span class="line">               .append(bucketName)</span><br><span class="line">               .append(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">               .append(endpoint)</span><br><span class="line">               .append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">               .append(objectName);</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;文件上传到:&#123;&#125;&quot;</span>, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过SpringBoot管理需要创建配置类创建<code>AliOssUtil</code>对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，用于创建工具类AliOssUtil对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//使用@ConditionalOnMissingBean注解的方法返回的Bean类型在Spring容器中已经存在时，</span></span><br><span class="line">    <span class="comment">// 这个方法不会被调用，即不会创建新的Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">(AliOssProperties aliOssProperties)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;创建阿里云文件上传工具类对象：&#123;&#125;&quot;</span>,aliOssProperties);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(aliOssProperties.getEndpoint(),</span><br><span class="line">                              aliOssProperties.getAccessKeyId(),</span><br><span class="line">                              aliOssProperties.getAccessKeySecret(),</span><br><span class="line">                              aliOssProperties.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传入再HTTP请求中读取的文件流和文件内容就可以将文件传输到OSS存储服务创建的仓库中，也就是<code>web-cangqio</code>,并且返回生成的URL地址，可以存储到数据库中持久化保存。</p><p><strong>不建议将你的id和密钥写入配置文件中，直接设置环境变量访问更加安全</strong></p></blockquote><h2 id="使用MultipartFile-对象"><a class="header-anchor" href="#使用MultipartFile-对象"></a>使用MultipartFile 对象</h2><blockquote><ol><li>依赖</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.3</span><span class="number">.9</span>&lt;/version&gt; &lt;!-- 请根据项目需要选择合适的版本 --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>常用方法</li></ol> <img src="/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/QQ_1733704827521.png" class="" title="常用方法"><ol start="3"><li>使用</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;文件上传：&#123;&#125;&quot;</span>,file);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//原始文件名</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">       <span class="comment">//文件后缀</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">       <span class="comment">//构造新文件名</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> UUID.randomUUID().toString() + substring;</span><br><span class="line">        <span class="comment">//存储再本地</span></span><br><span class="line">       <span class="comment">//file.transferTo((new File(&quot;E:/file/&quot;+objectName)));</span></span><br><span class="line">          </span><br><span class="line">       <span class="comment">//文件的请求路径</span></span><br><span class="line">           <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> aliOssUtil.upload(file.getBytes(), objectName);</span><br><span class="line">           <span class="keyword">return</span> Result.success(filePath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;文件上传失败：&#123;&#125;&quot;</span>,e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>多文件上传</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;onfiles2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onfiles2</span><span class="params">(MultipartFile img[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;img.length;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(!img[i].isEmpty())<span class="comment">//文件不空</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//更改上传路径就可以远端上传</span></span><br><span class="line">           <span class="type">File</span> <span class="variable">imgfile</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:/fileupload/&quot;</span>+img[i].getOriginalFilename());</span><br><span class="line">           imgfile.createNewFile();</span><br><span class="line">           img[i].transferTo(imgfile);</span><br><span class="line">           logger.info(img[i].getOriginalFilename());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;sucucess&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="文件的下载"><a class="header-anchor" href="#文件的下载"></a>文件的下载</h2><blockquote><p>原理就是通过服务端向客户端返回二进制流和信息，Springmvc通过ResponseEntity完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;download/&#123;filename&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt;download(<span class="meta">@PathVariable</span> String filename) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//下载文件的路径(这里绝对路径)</span></span><br><span class="line">    String filepath= <span class="string">&quot;F:/download/&quot;</span>+filename;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(filepath);</span><br><span class="line">    <span class="comment">//创建字节输入流，这里不实用Buffer类</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="comment">//available:获取输入流所读取的文件的最大字节数</span></span><br><span class="line">    <span class="type">byte</span>[] body = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">    <span class="comment">//把字节读取到数组中</span></span><br><span class="line">    in.read(body);</span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attchement;filename=&quot;</span> + URLEncoder.encode(file.getName(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应状态</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    in.close();</span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; entity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;<span class="type">byte</span>[]&gt;(body, headers, statusCode);</span><br><span class="line">    <span class="keyword">return</span> entity;<span class="comment">//返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过点击前端的页面就能实现下载的功能</p></blockquote><h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2><blockquote><ol><li>再yml中配置上传的参数</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 允许项目中文件上传</span><br><span class="line">spring.servlet.multipart.enabled=<span class="literal">true</span></span><br><span class="line"># 上传文件的临时目录 （一般情况下不用特意修改）</span><br><span class="line">#spring.servlet.multipart.location=</span><br><span class="line"># 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可）</span><br><span class="line">spring.servlet.multipart.max-file-size=<span class="number">104857600</span></span><br><span class="line"># 上传请求最大为 10M（默认值10M 根据自身业务自行控制即可）</span><br><span class="line">spring.servlet.multipart.max-request-size=<span class="number">104857600</span></span><br><span class="line"># 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值<span class="number">0</span> 一般情况下不用特意修改）</span><br><span class="line">spring.servlet.multipart.file-size-threshold=<span class="number">0</span></span><br><span class="line"># 判断是否要延迟解析文件（相当于懒加载，一般情况下不用特意修改）</span><br><span class="line">spring.servlet.multipart.resolve-lazily=<span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/%E6%B5%8B%E8%AF%95/"/>
      <url>/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/%E6%B5%8B%E8%AF%95/QQ_1733209444388-1733209461188-2.png" alt="ces"></p><h1 id="测试"><a class="header-anchor" href="#测试"></a>测试</h1><img src="/%E6%B5%8B%E8%AF%95/QQ_1734589139421.png" class="" title="QQ_1734589139421">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MP的使用</title>
      <link href="/MP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/MP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a class="header-anchor" href="#MyBatisPlus"></a>MyBatisPlus</h1><p><em><strong>前言</strong></em></p><p>记录自己在使用MyBatisPuls时遇到的一些问题，一个找不到Bean的问题真的卡了我好久，一个上午都在解决这个问题，因为自己对于底层的实现并不了解，所以导致在报错的时候也不懂是怎么一回事😞，通过一上午的摸索，也对注解开发的过程有了一定的了解，记录下来怕自己下次又忘了，也是对自己知识的巩固</p><p><strong>简介</strong></p><p><a href="https://baomidou.com/">MyBatisPlus</a>(简称MP)是基于MyBatis框架上的增强开发工具，具有<em><strong>无侵入</strong></em>，<em><strong>支持lambda</strong></em>,<em><strong>内置通用Mapper</strong></em>,<em><strong>支持主键自动生成</strong></em>，<em><strong>内置分页插件</strong></em>等特性</p><h2 id="开发方式"><a class="header-anchor" href="#开发方式"></a>开发方式</h2><p>本文是基于SpringBoot使用MyBatisPlus,SpringBoot版本为3.4.0,Mp版本为3.5.7，可以兼容使用</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-spring-boot3-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.5</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="如何快速开发"><a class="header-anchor" href="#如何快速开发"></a>如何快速开发</h2><h3 id="快速开发实体类"><a class="header-anchor" href="#快速开发实体类"></a>快速开发实体类</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>SpringBoot默认管理了lombok的版本依赖，不需要指定版本号，<strong>记得下载lombok插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome.domain;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> lombok.Data;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> Integer id;</span><br><span class="line">     <span class="keyword">private</span> String username;</span><br><span class="line">     <span class="keyword">private</span> String password;</span><br><span class="line">     <span class="keyword">private</span> Integer role ;</span><br><span class="line">     <span class="keyword">private</span> String myname;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>​导入lombok后在使用注解，这就实体类要写的所有代码，<code>@Data</code>不包含构造方法的注解，要用什么自己添上，<strong>Lombok对静态属性不会提供get、set方法</strong>， transient修饰实体类属性（修饰的属性不会被序列化），<code>@TableField(exist=false)</code>，这个注解用来表示数据表中不存在该字段，默认是true</p></blockquote><h3 id="主键自增策略"><a class="header-anchor" href="#主键自增策略"></a>主键自增策略</h3><blockquote><p>MP的默认主键策略是基于雪花算法的自增主键，主键采用雪花算法生成值的前提是实体类的主键属性名称必须为id，数据表字段带有_的可以自动映射到驼峰式命名的属性上（t_user——》tUser）</p><ol><li>数据库名不同，在类上增加@TableName(“mp_user”)</li><li>主键ID的驼峰一般无法识别，在主键属性上增加@TableId</li><li>属性与字段名不相同,在属性上增加@TableField(“name”)</li></ol>  <img src="/MP%E7%9A%84%E4%BD%BF%E7%94%A8/id%E8%87%AA%E5%A2%9E%E6%96%B9%E5%BC%8F.png" class="" title="设置id自增方式"><p>也可以在<code>yml</code>配置文件中开启全局配置</p></blockquote><h3 id="逻辑删除和乐观锁"><a class="header-anchor" href="#逻辑删除和乐观锁"></a>逻辑删除和乐观锁</h3><blockquote><p><strong>逻辑删除</strong>：在数据设置中有一个是否可用字段，如果要删除这条数据，就将该字段设置为不可用，数据仍然保留在数据库中</p> <img src="/MP%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%88%A0%E9%99%A4%E9%80%BB%E8%BE%91%E9%85%8D%E7%BD%AE.png" class="" title="逻辑删除配置"><p><strong>乐观锁</strong>：主要用于秒杀抢单，乐观锁查询记录时不会上锁，但是会在更新记录的时候去判断下有没有人去更新了这条记录，数据库中有一个字段记录了更新的值，每次更新该字段就自增</p><ol><li><p>实现乐观锁需要在version字段上添加@Version注解</p></li><li><p>添加拦截器，<strong>一定要先查询再更新，不然乐观锁没法生效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.dome.config;</span><br><span class="line">         </span><br><span class="line">  <span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"> <span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line">         </span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">         </span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">MybatisPlusInterceptor</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">         <span class="comment">//添加具体的拦截器,这是分页拦截器，开启分页查询功能</span></span><br><span class="line">        mp.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加乐观锁插件,可以添加多个拦截器</span></span><br><span class="line">       mp.addInnerInterceptor(newOptimisticLockerInnerInterceptor());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mp;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="条件查询和分页查询"><a class="header-anchor" href="#条件查询和分页查询"></a>条件查询和分页查询</h3><blockquote><ol><li><p>使用内置的查询方法进行查询时，实体类要实现序列化接口<code>Serialzable</code></p></li><li><p>普通查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//方式一：按条件查询</span></span><br><span class="line"><span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">  <span class="comment">//方式二：lambda格式按条件查询</span></span><br><span class="line"> QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">  qw.lambda().lt(User::getAge, <span class="number">10</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">  System.out.println(userList);</span><br><span class="line">     </span><br><span class="line">  <span class="comment">//方式三：lambda格式按条件查询</span></span><br><span class="line"> LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">  lqw.lt(User::getAge, <span class="number">10</span>);</span><br><span class="line">  List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li><li><p>条件传递过来是<strong>空值</strong>怎么办</p><pre><code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">       <span class="comment">//先判定第一个参数是否为true，如果为true连接当前条件</span></span><br><span class="line">    <span class="comment">//相当于不为空的话就链接uq.get出来的值</span></span><br><span class="line">         lqw.lt(<span class="literal">null</span> != uq.getAge2(),User::getAge, uq.getAge2());</span><br><span class="line">         lqw.gt(<span class="literal">null</span> != uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line">    <span class="comment">//链式链接</span></span><br><span class="line">       lqw.lt(<span class="literal">null</span> != uq.getAge2(),User::getAge, uq.getAge2())</span><br><span class="line">                .gt(<span class="literal">null</span> != uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line">       List&lt;User&gt; userList = userDao.selectList(lqw);</span><br></pre></td></tr></table></figure></code></pre><p>3.查询投影和分组聚合</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询投影,选择自己想看的字段</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line"> QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"> <span class="comment">//分组查询聚合函数，不能用lambda</span></span><br><span class="line"> QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line"> lqw.select(<span class="string">&quot;count(*) as count, tel&quot;</span>);</span><br><span class="line"> lqw.groupBy(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line"> List&lt;Map&lt;String, Object&gt;&gt; userList = userDao.selectMaps(lqw);</span><br><span class="line"> System.out.println(userList);</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><code>LambdaQueryWrapper</code>和<code>QueryWrapper</code>都是用来构建查询条件的，一个支持lambda表达式</p></li></ol></blockquote><h3 id="代码生成器"><a class="header-anchor" href="#代码生成器"></a>代码生成器</h3><blockquote><pre><code> 官方代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">                            .globalConfig(builder -&gt; builder</span><br><span class="line">                .author(<span class="string">&quot;Baomidou&quot;</span>)</span><br><span class="line">               .outputDir(Paths.get(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)) + <span class="string">&quot;/src/main/java&quot;</span>)</span><br><span class="line">                     .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">       )</span><br><span class="line">        .packageConfig(builder -&gt; builder</span><br><span class="line">               .parent(<span class="string">&quot;com.baomidou.mybatisplus&quot;</span>)</span><br><span class="line">                .entity(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line">                .mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                .service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">                .xml(<span class="string">&quot;mapper.xml&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        .strategyConfig(builder -&gt; builder</span><br><span class="line">                .entityBuilder()</span><br><span class="line">                .enableLombok()</span><br><span class="line">        )</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())</span><br><span class="line">       .execute();</span><br></pre></td></tr></table></figure>  实现代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 FastAutoGenerator 快速配置代码生成器</span></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/my_book?serverTimezone=GMT%2B8&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                           builder.author(<span class="string">&quot;YU&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;Mp_dome02_generator\\src\\main\\java&quot;</span>); <span class="comment">// 输出目录</span></span><br><span class="line">               &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                   builder.parent(<span class="string">&quot;com.xxx&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .entity(<span class="string">&quot;domain&quot;</span>) <span class="comment">// 设置实体类包名</span></span><br><span class="line">                           .mapper(<span class="string">&quot;dao&quot;</span>) <span class="comment">// 设置 Mapper 接口包名</span></span><br><span class="line">                            .service(<span class="string">&quot;service&quot;</span>) <span class="comment">// 设置 Service 接口包名</span></span><br><span class="line">                           .serviceImpl(<span class="string">&quot;service.impl&quot;</span>) <span class="comment">// 设置 Service 实现类包名</span></span><br><span class="line">                            .xml(<span class="string">&quot;mappers&quot;</span>); <span class="comment">// 设置 Mapper XML 文件包名</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .entityBuilder()</span><br><span class="line">                            .enableLombok() <span class="comment">// 启用 Lombok</span></span><br><span class="line">                            .enableTableFieldAnnotation() <span class="comment">// 启用字段注解</span></span><br><span class="line">                            .controllerBuilder()</span><br><span class="line">                            .enableRestStyle(); <span class="comment">// 启用 REST 风格</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">VelocityTemplateEngine</span>()) <span class="comment">// 使用 Velocity 模板引擎</span></span><br><span class="line">                .execute(); <span class="comment">// 执行生成</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> 导入的坐标 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--代码生成器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">3.5</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">     </span><br><span class="line"> &lt;!--velocity模板引擎--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">                         &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">                     &lt;/dependency&gt;</span><br><span class="line">     </span><br></pre></td></tr></table></figure> **这里使用的是velocity模板，如果要导入其他模板，跟换相应的坐标，代码生成器的版本要和上面导入的坐标兼容**</code></pre></blockquote><h2 id="遇到的问题"><a class="header-anchor" href="#遇到的问题"></a>遇到的问题</h2><blockquote><ol><li>出现报错<code>Error creating bean with name </code></li></ol><blockquote><p>出现这个错误的原因是找不到bean,说明在Spring容器中并没有找到你自动装配的对象</p></blockquote><blockquote><p>一种是<code>Error creating bean with name 'dataSource' defined in class path resource</code>,这种就是数据库连接有问题，不要以为在代码中写了数据库用户密码就不要在配置中写了</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*Mapper.xml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_book?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><ol start="2"><li>还是找不到bean的问题，这次是找不到在<code>service</code>和<code>mapper</code>包下的bean</li></ol></blockquote><blockquote><p>出现这种情况的原因是没有开启注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yyy.service&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.yyy.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpTestGeneratApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MpTestGeneratApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把他们加入到扫包的行列中就解决了找不到bean的问题，在mapper包下它并没有生成<code>@Mapper</code>注解，所以直接在主运行程序导入，但在service包下有<code>@Service</code>注解它也还是会出现扫不到的问题，所以直接在主运行类上加入要扫的包是最保险的做法</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> MyBatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识JavaWeb过滤器</title>
      <link href="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="认识JavaWeb过滤器"><a class="header-anchor" href="#认识JavaWeb过滤器"></a>认识JavaWeb过滤器</h1><p>记录在一次java过滤器作业中遇到的一些问题</p><h2 id="过滤器原理"><a class="header-anchor" href="#过滤器原理"></a>过滤器原理</h2><blockquote><p>当我们使用过滤器时，过滤器会对游览器的请求进行过滤，过滤器可以动态的分为3个部分<strong>1.放行之前的代码，2.放行，3.放行后的代码</strong>，这3个部分分别会发挥不同作用。</p><ol><li><p>对浏览器请求进行第一次过滤，然后继续执行</p></li><li><p>将浏览器请求放行，如果还有过滤器，那么就继续交给下一个过滤器</p></li><li><p>对返回的Web资源再次进行过滤处理</p></li></ol><p><strong>不止请求会经过过滤器，响应也会经过过滤器</strong></p></blockquote><h3 id="执行过程"><a class="header-anchor" href="#执行过程"></a>执行过程</h3><blockquote><img src="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/1.png" class="" title="过滤器链"></blockquote><h3 id="使用过滤器"><a class="header-anchor" href="#使用过滤器"></a>使用过滤器</h3><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// filterConfig读取配置参数  filterConfig.getInitParameterNames获取键值对</span></span><br><span class="line">System.out.println(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行&quot;</span>);</span><br><span class="line"><span class="comment">//下面这行代码就是放行</span></span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="现实案例"><a class="header-anchor" href="#现实案例"></a>现实案例</h3><blockquote><p>确保所有通过该过滤器的 HTTP 请求和响应都使用 UTF-8 编码，过滤器拦截所有进入应用的请求</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="line">public class EncodeFilter implements Filter &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void init(FilterConfig filterConfig) throws ServletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void doFilter(ServletRequest req, ServletResponse resp, FilterChain filter) throws IOException, ServletException &#123;</span><br><span class="line">      req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">      resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">      filter.doFilter(req, resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void destroy() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="过滤器放行静态资源"><a class="header-anchor" href="#过滤器放行静态资源"></a>过滤器放行静态资源</h3><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">      <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">      <span class="type">HttpServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">      <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 排除静态资源请求 req.getContextPath()得到上下文路径 如：http://localhost:8080/</span></span><br><span class="line">      <span class="keyword">if</span> (uri.startsWith(req.getContextPath() + <span class="string">&quot;/static/&quot;</span>)) &#123;</span><br><span class="line">          chain.doFilter(request, response); <span class="comment">// 直接放行</span></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 检查用户是否已登录</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> req.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 用户未登录，重定向到登录页面</span></span><br><span class="line">          res.sendRedirect(req.getContextPath() + <span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 用户已登录，继续处理请求</span></span><br><span class="line">          chain.doFilter(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解中就是过滤器过滤的资源</p><p><em><strong>多个过滤器之间可以形成过滤器链</strong></em></p> <img src="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/2.png" class="" title="过滤器链"></blockquote><h2 id="出现的问题"><a class="header-anchor" href="#出现的问题"></a>出现的问题</h2><blockquote><ol><li>maven导入坐标时没加<code>provided</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>为什么？</p><blockquote><p>当我们运行程序到Tomcat容器中时，容器本身已经提供了servlet-api的实现，如果不指定<code>&lt;scope&gt;provided&lt;/scope&gt;</code>，Maven会将<code>javax.servlet-api</code>包含在最终的WAR包中，会导致冲突问题，加这个相当于表示在编译和测试中是可用的，但在运行时不要包含在最终构建的产物中</p></blockquote><ol start="2"><li><p>在运行过程中浏览器出现<code>java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</code>报错，因为之前调用过sendError()这个函数，我以为是方法调用出现的问题，在过滤器中将该代码注释后，再次运行发现还是报相同的错误，后面以为是tomcat有缓存的问题😡，因为之前也有过类似的问题，后面我又清理缓存又换tomcat的版本，后面发现他其实是<em><strong>多次response导致</strong></em>，Servlet容器会在响应结束时自动关闭输出流，这个时候再次发送response就会出现报错，进到我的代码中去看，我重写了HttpServletf分发资源的方式，按照方法名分发资源访问路径</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">               </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改分发的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">               </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uri.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(index + <span class="number">1</span>);</span><br><span class="line">         Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">               </span><br><span class="line">       <span class="comment">// super.service(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在注释的地方，调用这个方法的时候会在调用父类中的service方法，这就产生了多次响应的问题</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaWed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo框架博客的搭建</title>
      <link href="/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="基于Hexo框架博客的搭建"><a class="header-anchor" href="#基于Hexo框架博客的搭建"></a>基于Hexo框架博客的搭建</h1><h2 id="环境准备"><a class="header-anchor" href="#环境准备"></a>环境准备</h2><ol><li><p>确保电脑上有<a href="https://nodejs.org/zh-cn">Node.js</a>和<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git</a></p></li><li><p>在本地的用户文件夹下新建blog文件夹，之后有关博客的所有配置都在此文件夹中进行</p></li><li><p>安装VS Code 和Typora，便于编辑博客文章和改写博客的配置文件</p></li></ol><h2 id="博客基本配置"><a class="header-anchor" href="#博客基本配置"></a>博客基本配置</h2><ol><li><p>用git bash打开blog文件夹，<strong>一定要处在blog文件夹下</strong>,之后所有的操作都是在此文件夹下操作</p></li><li><p>输入<code>npm install -g hexo-cli</code> 指令等待安装,如果下载速度太慢可以换源<code> npm config set registry https://registry.npmmirror.com</code>,安装成功后会在blog文件夹下看到各种文件，其中<code>_config.yml</code>就是hexo框架的配置文件</p></li><li><p>启动你的博客，<code>hexo s</code>启动后在本地4000端口访问就能看到最基本的博客框架</p><blockquote><ol><li>本地访问报错，可能是缺少某些插件</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><ol start="2"><li>运行<code>hexo c</code>会<em><strong>清理</strong></em><code>public</code>文件夹下的内容，图片存储放在**<code>source</code>**文件夹下</li></ol></blockquote></li><li><h3 id="跟换博客主题，本博客采用hexo-Butterfly-主题"><a class="header-anchor" href="#跟换博客主题，本博客采用hexo-Butterfly-主题"></a>跟换博客主题，本博客采用hexo Butterfly 主题</h3><blockquote><ol><li><p>安装git插件<code>npm install --save hexo-deployer-git</code></p></li><li><p>执行安装主题命令<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></p></li><li><p>进入blog目录下的<code>_config.yml</code>文件，修改主题配置</p></li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">theme:butterfly</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>更改博客配置，参照<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文檔(一) 快速開始 </a>,也可以在网上查看快速配置的教程，如果是小白建议直接看网上的教程</p></li><li><p>如果你已经将主题配置跟换为butterfly主题，那配置文件的修改应该是在<code>blog\themes\butterfly\_config.yml</code>中修改，建议复制一份到文件根目录下，避免因更新造成需要重新配置的问题（具体可参照官方文档）</p></li></ol></blockquote></li><li><h3 id="搜索框配置-本站采用Algolia"><a class="header-anchor" href="#搜索框配置-本站采用Algolia"></a>搜索框配置,本站采用Algolia</h3><blockquote><ol><li><p>安装<a href="https://github.com/thom4parisot/hexo-algolia">hexo-algolia</a>或<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch </a></p></li><li><p>把主题配置文件中 search 的 use 配置为 <code>algolia_search</code></p></li><li><p>登录<a href="https://dashboard.algolia.com/users/sign_in?redirect_to=%2Fapps%2F8MD47LWWFK%2Fexplorer%2Fconfiguration%2Fhexo_blog_index%2Fsearchable-attributes"> Algolia</a></p></li><li><p>创建一个应用程序，得到Api密钥,和索引</p></li><li><p>设置环境变量<code>HEXO_ALGOLIA_INDEXING_KEY</code>为你的管理员<code>adminApiKey</code>,这样才能执行更新索引操作，在命令行中设置了只能在当前会话有效，建议在你电脑的环境变量中配置</p></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_ADMIN_API_KEY=<span class="string">&#x27;这里为你的管理员密匙&#x27;</span></span><br><span class="line">&amp;&amp; HEXO_ALGOLIA_INDEXING_KEY=<span class="variable">$HEXO_ALGOLIA_ADMIN_API_KEY</span> hexo algolia</span><br></pre></td></tr></table></figure><ol start="6"><li>配置博客根目录下的<code>_config.yml</code>文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;algolia:</span></span><br><span class="line"><span class="attr">applicationID:</span> <span class="string">&#x27;......&#x27;</span></span><br><span class="line"><span class="attr">apiKey:</span> <span class="string">&#x27;.............&#x27;</span></span><br><span class="line"><span class="attr">adminApiKey:</span> <span class="string">&#x27;........&#x27;</span></span><br><span class="line"><span class="attr">indexName:</span> <span class="string">&#x27;..........&#x27;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>执行下面命令上传博客内容供algolia生成索引</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo algolia</span><br></pre></td></tr></table></figure><p>每次创建文章要执行该命令，可以更改<code>package.json</code>自动上传记录,命令行执行代码<code>npm run deploy或npm run d</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &gt;<span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>algolia中可以配置创建的应用程序搜索的方式和顺序</li></ol></blockquote></li><li><h3 id="评论系统"><a class="header-anchor" href="#评论系统"></a>评论系统</h3><blockquote><ol><li><p>本站采用<a href="https://twikoo.js.org/">Twikoo </a>配置,采用<a href="https://www.mongodb.com/cloud/atlas/register">MongoDB Atlas </a>+<a href="https://app.netlify.com/">Netlify</a>的云函数部署方式</p></li><li><p>注册<code>MongoDB Atlas</code>后创建一个数据库，选择免费的创建就好，地区选择<code>us-east-1</code></p></li><li><p>创建数据库用户，设置网络访问IP地址<code>0.0.0.0/0</code></p></li><li><p>复制数据库连接字符串,将&lt;db_password&gt;改为自己的密码，注意这是我的数据库连接字符串</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb+srv://xxxxxxxx:&lt;db_password&gt;@cluster0.zgntw.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=Cluster0</span><br></pre></td></tr></table></figure><ol start="5"><li>将<a href="https://github.com/twikoojs/twikoo-netlify">twikoojs/twikoo-netlify</a>fork到自己的GitHub仓库中</li><li>注册<code>Netlify</code>并新建一个team,项目来源之前fork的项目，直接从你的GitHub仓库中读取就行</li><li>为你刚创建的项目添加环境变量，Key 输入 <code>MONGODB_URI</code>，value输入前面记录的数据库连接字符串</li><li>进入 Site overview，点击上方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</li></ol><blockquote><p>如果出现报错，可能是你的环境变量设置的有问题，记得设置完环境变量后重新部署，<code>Netlify</code>相当于生成一个网站托管你的项目，如果你自己有域名的话可以将<code>Netlify</code>生成的域名换成你自己的域名，后期也可以将你的博客部署到<code>Netlify</code>上</p></blockquote><ol start="9"><li><code>https://xxx.netlify.app/.netlify/functions/twikoo</code>就是你的环境id,在主题的<code>_config.yml</code>配置文件中配置环境参数</li></ol> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://xxx.netlify.app/.netlify/functions/twikoo</span></span><br><span class="line">   <span class="comment"># 和你数据库申请的地区一致</span></span><br><span class="line">   <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">   <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">   <span class="attr">option:</span></span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="图片资源放置"><a class="header-anchor" href="#图片资源放置"></a>图片资源放置</h3><blockquote><ol><li>开启<code>post_asset_folder: true</code>,每篇文章都会有自己的资源文件夹。让我们修改文章的图片引用方式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &gt;source/_posts/</span><br><span class="line"> &gt;├── 基于Hexo框架博客的搭建.md</span><br><span class="line"> &gt;└── 基于Hexo框架博客的搭建/</span><br><span class="line">├── preview.jpg</span><br><span class="line">└── 其他图片...</span><br></pre></td></tr></table></figure><ol start="2"><li>尝试了很多方法后发现有时候还是会找不到图片路径,我的解决方法：</li></ol><img src="/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84.png" class="" title="图片路径"><p>这样设置<code>Typora</code>后，当你复制图片到博文中时就会在同一级目录下创建相同名称的文件夹，里面放置的就是你的图片，但这样设置后你运行还是在网站上看不到图片，因为它public文件夹下中的那个文件夹没有图片资源，可以这么来看，当你用Hexo框架生成博客时，是将你的<code>Markdown</code>文章生成成静态网页，在你的<code>public</code>文件夹下又有着以你这篇博客标题名命名的文件夹，其中有生成的<code>index.html</code>的静态网页和你在博文中放置的所有图片资源，<s>所以将你的图片拷贝去public文件下的那个同名文件就行了，引用<code>/目录/图片名</code>就可以了</s></p><ol start="3"><li>使用的是<code>hexo-asset-image</code>插件需要改它js中的配置文件，在58行修改为，这个插件的作用就是将静态页面中引用图片的路径修改</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><ol start="4"><li>在markdown文件中插入图片使其显示到hexo框架的形式</li></ol><ul><li><img src="/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/QQ_1734594375033.png" class="" title="QQ_1734594375033"></li><li><img src="/基于Hexo框架博客的搭建/QQ_1734594408252.png"  alt="QQ_1734594408252" style="zoom:%;" /></li><li><mark><strong>使用的方式不同图片使用的路径也不一样</strong></mark></li><li>像封面这种图片，用png的格式，用jpg的话运行hexo c 指令会被清理掉</li></ul></blockquote><h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3><p>1.魔改主题：<a href="https://www.cnblogs.com/antmoe/p/12846393.html">Hexo博客之butterfly主题优雅魔改系列</a></p><p>2.Front-matter</p><ul><li><p>page Front-matter 用于配置你的博客文章</p></li><li><p>post Front-matter用于配置页面，如搜索标签，分类</p></li><li><p><code>sticky: true</code>配置置顶标签</p></li><li><p>首页文章简述，开启,设置为1，可定义概述</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If you set method to 2 or 3, the length need to config</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure></li><li><p>设置文章的权重值<code>weight</code>,在<code>Front-matter</code>中配置，值越小越靠前</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认文章排序方式</span></span><br><span class="line"><span class="attr">default_generator:</span></span><br><span class="line">  <span class="attr">ignore_folder:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">                    </span><br><span class="line"><span class="comment"># 首页文章排序方式</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">  <span class="attr">pagination_dir:</span> <span class="string">&#x27;page&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>关闭侧边栏中的卡片<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_tags:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>部署到<code>Netlify</code>上默认区域是<code>us-east-2</code>，而在<code>MongoDB</code>部署的是<code>us-east-1</code>,因为在主题配置评论配置中要指定地区,导致访问网站和本地之间的评论读取的不一样，也就是说网站访问的评论只能通过网站链接看到，本地和GitHub上评论的又只能在这两个评论中看到，两个评论不互通 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://xxxxxx.netlify.app/.netlify/functions/twikoo</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">  <span class="comment"># Use Twikoo visitor count as the page view count</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署到GitHub"><a class="header-anchor" href="#部署到GitHub"></a>部署到GitHub</h2><h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3><ol><li>白嫖</li><li>支持网站访问</li><li>记录版本迭代</li><li>相当于备份了一份自己的博客，本地数据丢失还能通过GitHub回溯</li><li>方便管理</li></ol><h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3><ol><li>访问速度慢，不开加速器有时候访问不了</li><li>本地没问题的功能，访问GitHub会出问题</li><li>公共仓库安全性差</li></ol><h3 id="部署方法"><a class="header-anchor" href="#部署方法"></a>部署方法</h3><ol><li><p>创建一个仓库，<strong>xxx.github.io</strong>前缀一定要和你的GitHub用户名一致</p></li><li><p>来到仓库主页复制SSH密钥</p></li><li><p>打开hexo根目录下的<code>_config.yml</code>填写<code>deploy</code>模块</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>执行命令,一定要安装好git插件✅,如果开了加速器，一定要关闭在部署，不然会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d  <span class="comment"># hexo d 表示执行部署</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署到Netlify上"><a class="header-anchor" href="#部署到Netlify上"></a>部署到<code>Netlify</code>上</h2><ol><li>直接导入在GitHub创建的仓库</li><li>设置自定义域名</li><li>如果自己购买了域名可以更换上去</li><li>支持自动构建，push了代码就会自动部署</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/JavaScript/"/>
      <url>/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h2><blockquote><p>运行在客户端的脚本语言,一种基于对象的编程语言（object-baseb）</p><p>组成：</p><ol><li><p>ECMAScript</p></li><li><p>Web APIs</p></li></ol></blockquote><h2 id="基础语法（ECMAScript）"><a class="header-anchor" href="#基础语法（ECMAScript）"></a>基础语法（ECMAScript）</h2><ol><li><p>在html文件中的script标签中书写</p></li><li><p>常用的输出语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//弹出框</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    <span class="comment">//控制台输出</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    <span class="comment">//获取用户输出</span></span><br><span class="line">    <span class="title function_">prompt</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="常用数据类型"><a class="header-anchor" href="#常用数据类型"></a>常用数据类型</h3><ol><li><p>基本数据类型</p><ul><li>字符串：String</li><li>数字：number</li><li>布尔：boolean</li><li>未定义：undefined</li><li>空：Null</li></ul></li><li><p>复杂数据类型</p><ul><li>多种数据类型的容器：Object</li><li>数组：Array</li><li>Function：函数</li><li>RegEXP：正则表达式</li><li>Date：日期</li></ul></li><li><p>利用typeof检测数据类型</p></li></ol><p>常见的就不多说了，讲一下比较特殊的几个，这也是因为JavaScript是一一种弱类型的语言导致的，对类型的检查并不严格</p><ul><li><p>undefined 用type检测为它本身，但null类型检测则为<mark>Object</mark></p></li><li><p>检测number类型时遇到科学技术法的类型会自动解析，如3e2 就是300，也会解析为number类型</p></li><li><p>检测NaN时，会返回number</p></li><li><p>检测null为Object</p></li><li><p>数组使用typeof检测也为object，不一定正确，主要就是JavaScript是一种弱类型的语言导致的</p></li><li><p>变量提升检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//undefined</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);<span class="comment">//undefined</span></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>利用字符串拼接</p><ul><li>+，两边都是字符串时就会做拼接操作，有一方为数字也会拼接为字符串，但当字符串前面有+时就会转换为number类型，通常用这种方法来转换用户通过prompt输入的值，通过这个函数获得的值为字符串类型，前面有+则为number类型，会进行隐式提升</li></ul></li></ol><h4 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h4><h5 id="常用函数"><a class="header-anchor" href="#常用函数"></a>常用函数</h5><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">charAt()</td><td style="text-align:center">得到指定位置字符串，索引越界会得到空字符串</td></tr><tr><td style="text-align:center">subString()</td><td style="text-align:center">截取字符串，前闭后开，参数不接受负数，如果传递的参数前面的比后面大会自动交换两个的位置</td></tr><tr><td style="text-align:center">substr()</td><td style="text-align:center">也是截取字符串，接受负数</td></tr><tr><td style="text-align:center">slice()</td><td style="text-align:center">提取字符串，参数可以是负数，但参数不会交换位置</td></tr><tr><td style="text-align:center">toUpperCase()</td><td style="text-align:center">全部转换为大写</td></tr><tr><td style="text-align:center">toLowerCase()</td><td style="text-align:center">转换为小写</td></tr><tr><td style="text-align:center">indexOf()</td><td style="text-align:center">检索字符串，返回指定字符串值在字符串中首次出现的位置,匹配不到返回-1</td></tr></tbody></table><h4 id="数据类型的转换"><a class="header-anchor" href="#数据类型的转换"></a>数据类型的转换</h4><ol><li>Number函数<ul><li>空字符串转换为0</li><li>不是纯数字的字符串转换为NaN</li><li>可以识别科学计数法</li><li>null也为0</li><li>undefined 为NaN</li><li>布尔类型 true为1，false为0</li></ul></li><li>parselnt函数，将字符串转换为整数<ul><li>传递的是浮点数会自动截取第一位数</li><li>不会四舍五入</li><li>不以数字开头转为NaN</li><li>以数字开头后面的文字会被截取掉</li></ul></li><li>parseFloat函数<ul><li>不四舍五入</li><li>可以将小数字符串转换为小数</li><li>自动截取掉第一个非数字字符</li></ul></li><li>String函数<ul><li>科学计数法和非十进制数字会转换为十进制的值</li></ul></li><li>toString<ul><li>几乎所有值都有toString方法，功能就是将值转换为字符串</li></ul></li><li>Boolean函数<ul><li>NaN，0，undefined为false</li></ul></li></ol><h4 id="隐式类型的转换"><a class="header-anchor" href="#隐式类型的转换"></a>隐式类型的转换</h4><ul><li><p>本质就是内部调用Number函数</p><ul><li><p>参与运算的操作数不是数字型，会自动将此操作转换为数字</p><p><code>3*'5' //15</code></p></li><li><p>true+tyue = 2</p></li><li><p>false+2 =2</p></li><li><p>3* ‘2d’ = NaN</p></li><li><p>小数运算不精准，采用指定小数位数解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">0.1</span>+<span class="number">0.2</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数学函数Math"><a class="header-anchor" href="#数学函数Math"></a>数学函数Math</h4><ul><li><p>幂运算和开根号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//8</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">4</span>)<span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p>取最大，最小值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)<span class="comment">//10</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)<span class="comment">//1</span></span><br></pre></td></tr></table></figure></li><li><p>向下向上取整</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.1</span>)<span class="comment">//2</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.9</span>)<span class="comment">//1</span></span><br></pre></td></tr></table></figure></li><li><p><mark>随机数</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()<span class="comment">//0-1之间的随机数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(b-a+<span class="number">1</span>))+a<span class="comment">//[a,b]之间的随机数</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h4 id="判断是否相等"><a class="header-anchor" href="#判断是否相等"></a>判断是否相等</h4><ul><li><p><mark>相等和全等</mark></p><p>== 表示的是不比较类型之后的结果，会进行隐式转换后比较值是否相等，也就是1和‘1’相等、</p><p>=== 不仅比较值，也比较类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="literal">true</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">1</span> === <span class="literal">true</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> === <span class="literal">false</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">0</span> === undefinde <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NaN 不自等</span></span><br><span class="line"><span class="title class_">NaN</span> == <span class="title class_">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><p><mark><strong>小知识点，逻辑运算的优先级为 非 -&gt; 与 -&gt; 或</strong></mark></p><h3 id="函数的定义和调用"><a class="header-anchor" href="#函数的定义和调用"></a>函数的定义和调用</h3><ul><li>分为有名称的函数和匿名函数，用function 定义函数</li><li>形参和实参个数可以不一样 会自动填上undefind</li></ul><h4 id="函数声明的提升"><a class="header-anchor" href="#函数声明的提升"></a>函数声明的提升</h4><ul><li><p>函数声明能被提升，也就是函数定义在下方但在函数声明上方能调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fun</span>()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数表达式不能被提升,会报错 fun is not a function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">fun</span>()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> fun =  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>函数优先提升，也就是变量声明的提升，无法覆盖函数的提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fun</span>() <span class="comment">// B</span></span><br><span class="line">  </span><br><span class="line"> <span class="keyword">var</span> fun =  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fun</span>() <span class="comment">//A</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>函数的参数</p><ol><li><p>如果有一个参数没有收到值，则该形参为undefined，undefined进行任何运算的结果都为NaN</p></li><li><p><mark>arguments</mark>参数，相当于函数中默认的属性，可变的参数，接受到的实参列表，是一个类数组对象，可以像数组一样通过下表访问元素，但不能调用数组的方法，有length属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">           <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有的参数之和为：&#x27;</span> + sum); <span class="comment">//110</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">fun</span>(<span class="number">33</span>, <span class="number">22</span>, <span class="number">55</span>)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>函数的递归调用,要有终止递归的条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="comment">//书写一个函数 函数会自己调用自己  从而形成递归</span></span><br><span class="line">     <span class="comment">//函数的功能就是计算某个阶乘 n的阶乘就是n*(n-1)的阶乘</span></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">         <span class="comment">//递归的出口 如果计算1的阶乘，可以不用递归了 直接告诉你答案1</span></span><br><span class="line">         <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         <span class="comment">//如果询问的不是1的阶乘就返回n*(n-1)!</span></span><br><span class="line">         <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> result = <span class="title function_">factorial</span>(<span class="number">6</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//720</span></span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="闭包"><a class="header-anchor" href="#闭包"></a>闭包</h4><blockquote><p>函数本身和该函数声明时所处环境状态的组合，函数能记忆住定义所处的环境，就是不在定义的环境中被调用，也能访问定义时所处的环境变量</p><p>也就是在函数中返回一个函数，返回的函数能访问到函数内部的变量，并在外部使用的时候优先调用函数内部的变量，相当于模拟私有变量</p><p>滥用闭包可能会导致内存泄漏问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">//创建一个函数</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">//定义局部变量</span></span><br><span class="line">          <span class="keyword">var</span> name = <span class="string">&#x27;慕课网&#x27;</span>;</span><br><span class="line">          <span class="comment">//返回一个局部函数</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>(name)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用外部函数就能得到内部函数</span></span><br><span class="line">      <span class="keyword">var</span> inner = <span class="title function_">fun</span>();</span><br><span class="line">      <span class="comment">//定义一个全局变量</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="string">&#x27;ABC&#x27;</span>;</span><br><span class="line">      <span class="comment">//执行inn函数 就相当于在 fun函数的外部执行了内部的函数</span></span><br><span class="line">      <span class="title function_">inner</span>()<span class="comment">//这里弹出的就是慕课网</span></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="IIFE-（立即执行函数）"><a class="header-anchor" href="#IIFE-（立即执行函数）"></a>IIFE （立即执行函数）</h4><blockquote><p>函数必须要转换为函数表达式才能被调用如  ()();  +function(){}();  -function(){}();  也可以用于命名函数</p><p>可以防止全局变量污染，代码模块化</p></blockquote><h4 id="箭头函数"><a class="header-anchor" href="#箭头函数"></a>箭头函数</h4><blockquote><p>属于表达式函数，不存在函数提升  ，只有一个参数时可以省略圆括号，只有一行代码省略花括号，并自动作为返回值返回</p><p>没有arguments动态参数，可以使用剩余参数</p><p>只会沿用自己作用域链上一级的this</p></blockquote><h3 id="深浅拷贝"><a class="header-anchor" href="#深浅拷贝"></a>深浅拷贝</h3><ul><li><p>对于基本数据类型，拷贝实在内存中产生新的副本，比较的时候也是比较值是否相等</p></li><li><p>对于引用数据类型，内存中不产生新的值，而是让新变量指向同一个对象，比较的时候也是比较内存地址是否相同</p></li><li><p><mark>当我们引用的对象内存地址是相同的时候，改变其中一个变量的值，另一个变量也会跟着改变</mark></p><p>解决方法：通过递归实现深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">      <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line">  <span class="comment">// 拷贝函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">      <span class="comment">// 处理数组的问题  一定先写数组 在写 对象 不能颠倒</span></span><br><span class="line">      <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        newObj[k] = []</span><br><span class="line">        <span class="comment">//  newObj[k] 接收 []  hobby</span></span><br><span class="line">        <span class="comment">//  oldObj[k]   [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]</span></span><br><span class="line">        <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">        newObj[k] = &#123;&#125;</span><br><span class="line">        <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//  k  属性名 uname age    oldObj[k]  属性值  18</span></span><br><span class="line">        <span class="comment">// newObj[k]  === o.uname  给新对象添加属性</span></span><br><span class="line">        newObj[k] = oldObj[k]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">deepCopy</span>(o, obj) <span class="comment">// 函数调用  两个参数 o 新对象  obj 旧对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">  o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">  o.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;篮球&#x27;</span></span><br><span class="line">  o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;老pink&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">23</span>] <span class="keyword">instanceof</span> <span class="title class_">Object</span>)</span><br><span class="line">  <span class="comment">// 复习</span></span><br></pre></td></tr></table></figure><p>通过lodash实现深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 先引用 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">family</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> o = _.<span class="title function_">cloneDeep</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;老pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>通过JSON对象实现深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">     <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">     <span class="attr">family</span>: &#123;</span><br><span class="line">       <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 把对象转换为 JSON 字符串</span></span><br><span class="line">   <span class="comment">// console.log(JSON.stringify(obj))</span></span><br><span class="line">   <span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">   o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure></li></ul><h3 id="变量"><a class="header-anchor" href="#变量"></a>变量</h3><ol><li>局部变量，在函数或语句内部定义的，如果局部变量中的变量名和全局变量变量名相同，那在函数执行过程中，变量的值以局部变量为准</li><li>全局变量，不给变量加var 或 let 在函数中定义的也是全局变量（应该就是他的父类对象为window）</li></ol><h2 id="Web-APIs"><a class="header-anchor" href="#Web-APIs"></a>Web APIs</h2><h3 id="DOM-文档对象模型"><a class="header-anchor" href="#DOM-文档对象模型"></a>DOM(文档对象模型)</h3><blockquote><p>将文档表现为节点树，根为document对象，表示整个HTML文档</p></blockquote><h4 id="document对象"><a class="header-anchor" href="#document对象"></a>document对象</h4><h5 id="节点"><a class="header-anchor" href="#节点"></a>节点</h5><h6 id="访问元素节点的常用方法"><a class="header-anchor" href="#访问元素节点的常用方法"></a>访问元素节点的常用方法</h6><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">功能</th><th style="text-align:center">兼容</th></tr></thead><tbody><tr><td style="text-align:center">document.getElementById()</td><td style="text-align:center">通过id获取元素</td><td style="text-align:center">IE6</td></tr><tr><td style="text-align:center">document.getElementByTageName()</td><td style="text-align:center">通过标签名获取元素</td><td style="text-align:center">IE6</td></tr><tr><td style="text-align:center">document.getElementByClassName()</td><td style="text-align:center">通过类名获取</td><td style="text-align:center">IE9</td></tr><tr><td style="text-align:center">document.querySelector()</td><td style="text-align:center">通过选择器获取</td><td style="text-align:center">IE8部分<br />IE9</td></tr><tr><td style="text-align:center">doocumentt.querySelectorAll()</td><td style="text-align:center">通过选择器获取元素数组</td><td style="text-align:center">IE8部分<br />IE9</td></tr></tbody></table><h6 id="节点之间的关系"><a class="header-anchor" href="#节点之间的关系"></a>节点之间的关系</h6><ol><li><p><strong>改变节点中的元素内容可以用 innerHTMl innerText 这两个属性</strong></p></li><li><p>改变元素节点的CSS样式，style.要改变的CSS属性 <strong>注意要写成驼峰的形式</strong></p></li><li><p>创建新节点并插入,删除节点，只能通过父节点删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parent =  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> child =  <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  parent.<span class="title function_">appendChild</span>(child) <span class="comment">//在父元素的末尾添加子元素</span></span><br><span class="line">  parent.<span class="title function_">insertBefore</span>(child,parent.<span class="property">children</span>[<span class="number">0</span>])<span class="comment">//在父元素的第一个子元素前添加子元素</span></span><br><span class="line">  parent.<span class="title function_">removeChild</span>(child)<span class="comment">//删除子元素</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="事件"><a class="header-anchor" href="#事件"></a>事件</h5><h6 id="事件监听"><a class="header-anchor" href="#事件监听"></a>事件监听</h6><blockquote><p>事件：用户与网页的交互动作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> oBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    <span class="comment">//给这个盒子添加点击事件监听</span></span><br><span class="line">    oBox.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你好，我是点击事件的函数&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>常见的鼠标事件监听</p><img src="/JavaScript/QQ_1735959416848.png"  alt="QQ_1735959416848" style="zoom:50%;" /></li><li><p>常见的键盘事件监听</p><img src="/JavaScript/QQ_1735959439677.png"  alt="QQ_1735959439677" style="zoom:50%;" /></li><li><p>表单事件监听</p><img src="/JavaScript/QQ_1735959466053.png"  alt="QQ_1735959466053" style="zoom:50%;" /></li></ol><h6 id="事件传播"><a class="header-anchor" href="#事件传播"></a>事件传播</h6><blockquote><p>从外到内在从内到外，JavaScript中分为捕获阶段和冒泡阶段，捕获阶段就是从外到内的过程，冒泡阶段就是从内到外的过程</p></blockquote><ol><li>有两种事件监听的方法<ul><li>document对象.onclick  DOM0级的事件，只能监听冒泡阶段，后面写的会覆盖前面写的</li><li>document对象.addEventListener(‘事件类型’，事件处理函数) DOM2级事件，会按顺序执行,匿名函数无法解绑</li><li></li></ul></li><li>事件对象，事件处理函数中有一个对象，通常用e或event表示，可以通过这个对象定位到选择的元素</li></ol><h6 id="事件委托"><a class="header-anchor" href="#事件委托"></a>事件委托</h6><img src="/JavaScript/QQ_1735960018747.png"  alt="QQ_1735960018747" style="zoom:50%;" /><h5 id="定时器和延时器"><a class="header-anchor" href="#定时器和延时器"></a>定时器和延时器</h5><h6 id="定时器"><a class="header-anchor" href="#定时器"></a>定时器</h6><blockquote><p>setInterval 以固定时间重复调用一个函数，clearInterval这个方法清除定时器，定时器开启的时候可以用一个变量来接收</p></blockquote><p>具体使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//设置一个全局变量</span></span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//为了防止定时器叠加 我们应该在设置定时器之前清除定时器</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        <span class="comment">//更改全局变量的值为一个定时器实体</span></span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        oInfo.<span class="property">innerText</span> = ++a;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)&#125;</span><br></pre></td></tr></table></figure><h6 id="延时器"><a class="header-anchor" href="#延时器"></a>延时器</h6><blockquote><p>setTimeout 设置 指定时间会执行函数一次，clearTimeout清除延时器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>  <span class="comment">// 让这个变量++</span></span><br><span class="line">    <span class="comment">// 鼠标移动函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      box.<span class="property">innerHTML</span> = ++i</span><br><span class="line">      <span class="comment">// 如果里面存在大量操作 dom 的情况，可能会卡顿</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//fn为定义的函数，为定时的时间 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timeId</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 如果有定时器就清除</span></span><br><span class="line">        <span class="keyword">if</span> (timeId) <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        <span class="comment">// 开启定时器 200</span></span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">fn</span>()</span><br><span class="line">        &#125;, t)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//mouseMove没有（） ，因为它这里被当作了参数，而不是调用函数</span></span><br><span class="line">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(mouseMove, <span class="number">200</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="抛出异常和捕获异常"><a class="header-anchor" href="#抛出异常和捕获异常"></a>抛出异常和捕获异常</h5><h6 id="抛出异常"><a class="header-anchor" href="#抛出异常"></a>抛出异常</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!x || !y) &#123;</span><br><span class="line">       <span class="comment">// throw &#x27;没有参数传递进来&#x27;</span></span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;没有参数传递过来&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> x + y</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>())</span><br></pre></td></tr></table></figure><h6 id="try-catch语句"><a class="header-anchor" href="#try-catch语句"></a>try-catch语句</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 可能发送错误的代码 要写到 try</span></span><br><span class="line">      <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.p&#x27;</span>)</span><br><span class="line">      p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 拦截错误，提示浏览器提供的错误信息，但是不中断程序的执行</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;你看看，选择器错误了吧&#x27;</span>)</span><br><span class="line">      <span class="comment">// 需要加return 中断程序</span></span><br><span class="line">      <span class="comment">// return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 不管你程序对不对，一定会执行的代码</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;弹出对话框&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h5 id="this的指向"><a class="header-anchor" href="#this的指向"></a>this的指向</h5><blockquote><p>谁调用就指向谁，注意有个父类对象window，像一些内置函数的指向就是它</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数：  谁调用我，this就指向谁</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window    </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">window</span>.<span class="title function_">fn</span>()</span><br><span class="line">   <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window </span></span><br><span class="line">   &#125;, <span class="number">1000</span>)</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// 指向 button</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// 指向 obj</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><p><strong>具体实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>[<span class="number">0</span>])</span><br><span class="line">&#125;]</span><br><span class="line">arr[<span class="number">3</span>]()</span><br></pre></td></tr></table></figure><h6 id="改变this的指向"><a class="header-anchor" href="#改变this的指向"></a>改变this的指向</h6><blockquote><p>call 和 apply 的区别 call 用,罗列参数  apply用数组</p></blockquote><ol><li><p>call函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">   <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y) <span class="comment">//NaN</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 1. 调用函数  </span></span><br><span class="line"> <span class="comment">// 2. 改变 this 指向  改变后this就指代的是obj 对象</span></span><br><span class="line"> fn.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)  </span><br><span class="line"> <span class="comment">// fn()</span></span><br></pre></td></tr></table></figure></li><li><p>apply函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// &#123;age: 18&#125;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 1. 调用函数</span></span><br><span class="line">   <span class="comment">// 2. 改变this指向 </span></span><br><span class="line">   <span class="comment">//  fn.apply(this指向谁, 数组参数)</span></span><br><span class="line">   fn.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">   <span class="comment">// 3. 返回值   本身就是在调用函数，所以返回值就是函数的返回值</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">44</span>, <span class="number">77</span>]</span><br><span class="line">   <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr) <span class="comment">//100</span></span><br><span class="line">   <span class="keyword">const</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr) <span class="comment">//44</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(max, min)</span><br><span class="line">   <span class="comment">// 使用场景： 求数组最大值</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(arr));<span class="comment">//NaN</span></span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr))<span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li><li><p>bind函数，和上面两个不同的是它的返回值是函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. bind 不会调用函数 </span></span><br><span class="line">    <span class="comment">// 2. 能改变this指向</span></span><br><span class="line">    <span class="comment">// 3. 返回值是个函数，  但是这个函数里面的this是更改过的obj</span></span><br><span class="line">    <span class="keyword">const</span> fun = fn.<span class="title function_">bind</span>(obj)</span><br><span class="line">    <span class="comment">// console.log(fun) </span></span><br><span class="line">    <span class="title function_">fun</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需求，有一个按钮，点击里面就禁用，2秒钟之后开启</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 禁用按钮</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在这个普通函数里面，我们要this由原来的window 改为 btn</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">      &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>)   <span class="comment">// 这里的this 和 btn 一样</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="BOM-浏览器对象模型"><a class="header-anchor" href="#BOM-浏览器对象模型"></a>BOM(浏览器对象模型)</h3><blockquote><p>浏览器中的每个标签页都有一个window对象，全局变量会成为window的属性，多个JS文件之间是共享作用域的，没有作用域隔离的功能，内置函数一般都是window的方法</p></blockquote><h4 id="浏览器窗口属性"><a class="header-anchor" href="#浏览器窗口属性"></a>浏览器窗口属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerHeight</span>);<span class="comment">//浏览器窗口高度</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);<span class="comment">//浏览器窗口宽度</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerHeight</span>);<span class="comment">//浏览器窗口外部高度</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>);<span class="comment">//浏览器窗口外部宽度</span></span><br></pre></td></tr></table></figure><ol><li><p>窗口大小改变后会触发resize事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> root = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(root.<span class="property">clientWidth</span>); <span class="comment">//窗口尺寸改变时，获取窗口宽度</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(root.<span class="property">clientHeight</span>); <span class="comment">//窗口尺寸改变时，获取窗口高度</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>获得卷积高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卷积事件监听</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">scrollY</span> <span class="comment">//只读</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> <span class="comment">//可以改变</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>);<span class="comment">//窗口卷积高度</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>);<span class="comment">//窗口卷积宽度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Navigator对象，包含用户使用浏览器的信息和操作系统</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appCodeName</span>); <span class="comment">//浏览器代码名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appName</span>); <span class="comment">//浏览器名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appVersion</span>); <span class="comment">//浏览器版本</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">userAgent</span>); <span class="comment">//浏览器信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">platform</span>); <span class="comment">//浏览器平台</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">cookieEnabled</span>); <span class="comment">//是否启用cookie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="title function_">javaEnabled</span>()); <span class="comment">//是否启用java</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">language</span>); <span class="comment">//浏览器语言</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">onLine</span>); <span class="comment">//是否在线</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">userAgentData</span>); <span class="comment">//浏览器信息</span></span><br></pre></td></tr></table></figure></li><li><p>History对象，模拟浏览器的回退按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">back</span>(); <span class="comment">//返回上一页</span></span><br><span class="line">history.<span class="title function_">forward</span>(); <span class="comment">//前进下一页</span></span><br><span class="line">history.<span class="title function_">go</span>(-<span class="number">1</span>); <span class="comment">//返回上一页</span></span><br><span class="line">history.<span class="title function_">go</span>(<span class="number">1</span>); <span class="comment">//前进下一页</span></span><br></pre></td></tr></table></figure></li><li><p>Location对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span>; <span class="comment">//跳转页面</span></span><br><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>); <span class="comment">//刷新页面,强制从服务器加载</span></span><br><span class="line">location.<span class="title function_">replace</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>); <span class="comment">//替换页面</span></span><br><span class="line">location.<span class="title function_">assign</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>); <span class="comment">//跳转页面</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="对象"><a class="header-anchor" href="#对象"></a>对象</h2><blockquote><p>键值对的集合，表示属性和值的映射关系</p><p>构造函数和原型对象中的this都指向实例化的对象</p></blockquote><h3 id="语法规则"><a class="header-anchor" href="#语法规则"></a>语法规则</h3><ol><li><p>定义一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>访问当中的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">lastName</span>;</span><br><span class="line">person[<span class="string">&quot;lastName&quot;</span>];</span><br><span class="line"><span class="comment">//但当属性名不符合规范的时候只能通过[]的形式访问、如果属性名以变量的方式存储也要用[]的形式访问</span></span><br></pre></td></tr></table></figure></li><li><p>属性的赋值和新增</p><blockquote><p>使用赋值运算符，没有属性用创建的那个对象加点就会创建出这个属性</p></blockquote></li><li><p>属性的删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure></li><li><p>对象的遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key:&quot;</span> + key + <span class="string">&quot; value:&quot;</span> + obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="new出来的对象"><a class="header-anchor" href="#new出来的对象"></a>new出来的对象</h3><blockquote><p>用new方法调用函数，函数内会自动创建出一个空白对象，函数中的this会指向这个对象，函数体内的语句会执行</p><p>会自己返回上下文对象，即使没有return语句</p><p>new 调用的函数也叫做构造函数，记得首字母大写(约定)，构造函数通常是给对象赋值用的，如果不用new调用函数，它里面的this就不是本身</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;pink&#x27;</span>, <span class="number">18</span>) <span class="comment">// 构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1); <span class="comment">// Person &#123; name: &#x27;pink&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title class_">Person</span>(<span class="string">&#x27;pink&#x27;</span>, <span class="number">18</span>) <span class="comment">// 普通函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的原型链查找"><a class="header-anchor" href="#对象的原型链查找"></a>对象的原型链查找</h3><blockquote><p>任何函数都有prototype属性，该属性值是一个对象，默认有constructor属性指回函数</p><p>构造函数的prototype属性是它的实例的原型</p><p>实例可以通过.来访问原型的属性和方法</p></blockquote><ol><li><p>图解关系</p></li><li><p>代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>()</span><br><span class="line"><span class="comment">// 对象原型__proto__ 指向 改构造函数的原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>)</span><br><span class="line"><span class="comment">// console.log(ldh.__proto__ === Star.prototype)</span></span><br><span class="line"><span class="comment">// 对象原型里面有constructor 指向 构造函数 Star</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Star</span>)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function Objetc() &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>) <span class="comment">// null</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// console.log(ldh.__proto__ === Person.prototype)</span></span><br><span class="line"><span class="comment">// console.log(Person.prototype.__proto__ === Object.prototype)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="具体使用"><a class="header-anchor" href="#具体使用"></a>具体使用</h4><blockquote><p>如果将方法直接添加到实例身上会造成内存的浪费，每个实例和每个实例的方法函数都是内存中不同的函数，造成了内存的浪费</p><p>将方法添加到prototype就可以解决这个问题</p></blockquote><ol><li><p>通过原型链实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继续抽取   公共的部分放到原型上</span></span><br><span class="line"><span class="comment">// const Person1 = &#123;</span></span><br><span class="line"><span class="comment">//   eyes: 2,</span></span><br><span class="line"><span class="comment">//   head: 1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const Person2 = &#123;</span></span><br><span class="line"><span class="comment">//   eyes: 2,</span></span><br><span class="line"><span class="comment">//   head: 1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 构造函数  new 出来的对象 结构一样，但是对象不一样</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(new Person)</span></span><br><span class="line"><span class="comment">// 女人  构造函数   继承  想要 继承 Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Woman 通过原型来继承 Person</span></span><br><span class="line"><span class="comment">// 父构造函数（父类）   子构造函数（子类）</span></span><br><span class="line"><span class="comment">// 子类的原型 =  new 父类  </span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()   <span class="comment">// &#123;eyes: 2, head: 1&#125; </span></span><br><span class="line"><span class="comment">// 指回原来的构造函数</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 给女人添加一个方法  生孩子</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;宝贝&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> red = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(red)</span><br><span class="line"><span class="comment">// console.log(Woman.prototype)</span></span><br><span class="line"><span class="comment">// 男人 构造函数  继承  想要 继承 Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过 原型继承 Person</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line"><span class="keyword">const</span> pink = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pink)</span><br></pre></td></tr></table></figure></li></ol><h3 id="多级对象解构"><a class="header-anchor" href="#多级对象解构"></a>多级对象解构</h3><blockquote><p>只取出我们需要的数据 {}</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 这是后台传递过来的数据</span></span><br><span class="line"><span class="keyword">const</span> msg = &#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取新闻列表成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;5G商用自己，三大运用商收入下降&quot;</span>,</span><br><span class="line">      <span class="string">&quot;count&quot;</span>: <span class="number">58</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求1： 请将以上msg对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面</span></span><br><span class="line"><span class="comment">// const &#123;data&#125; = msg</span></span><br><span class="line"><span class="comment">// console.log(data);</span></span><br><span class="line"><span class="comment">// 需求2： 上面msg是后台传递过来的数据，我们需要把data选出当做参数传递给 函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function render(&#123;data&#125;) &#123;</span></span><br><span class="line"><span class="comment">//   // 我们只要 data 数据</span></span><br><span class="line"><span class="comment">//   // 内部处理</span></span><br><span class="line"><span class="comment">//   console.log(&#123;data&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// render(msg)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求3， 为了防止msg里面的data名字混淆，要求渲染函数里面的数据名改为 myData</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">&#123;data:myData&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 要求将 获取过来的 data数据 更名为 myData</span></span><br><span class="line">  <span class="comment">// 内部处理</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;myData&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(msg)</span><br></pre></td></tr></table></figure><h3 id="包装类"><a class="header-anchor" href="#包装类"></a>包装类</h3><ol><li><p>数组 Array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">3999</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 找小米 这个对象，并且返回这个对象</span></span><br><span class="line"><span class="comment">// const mi = arr.find(function (item) &#123;</span></span><br><span class="line"><span class="comment">//   // console.log(item)  //</span></span><br><span class="line"><span class="comment">//   // console.log(item.name)  //</span></span><br><span class="line"><span class="comment">//   console.log(111)</span></span><br><span class="line"><span class="comment">//   return item.name === &#x27;华为&#x27;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 1. find 查找  放回的是找到的对象</span></span><br><span class="line"> <span class="keyword">const</span> mi = arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === <span class="string">&#x27;小米&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(mi)</span></span><br><span class="line"><span class="comment">// 2. every 每一个是否都符合条件，如果都符合返回 true ，否则返回false</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">const</span> flag = arr1.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item)</span><br><span class="line"><span class="comment">// 过滤  返回一个新数组</span></span><br><span class="line"><span class="keyword">const</span> re1 = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>)</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>) <span class="comment">// 添加</span></span><br><span class="line">arr.<span class="title function_">pop</span>() <span class="comment">// 删除</span></span><br><span class="line">arr.<span class="title function_">shift</span>() <span class="comment">// 删除第一个</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">1</span>) <span class="comment">// 添加第一个</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 删除</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 添加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re1)</span><br><span class="line"> arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 映射 返回一个新数组</span></span><br><span class="line"><span class="keyword">const</span> re2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Array.from(lis) 把伪数组转换为真数组</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul li&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(lis)</span></span><br><span class="line"><span class="comment">// lis.pop() 报错</span></span><br><span class="line"><span class="keyword">const</span> liss = <span class="title class_">Array</span>.<span class="title function_">from</span>(lis)</span><br><span class="line">liss.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liss)</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>日期类 Data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 星期</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>()); <span class="comment">// 时间戳</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h3 id="正则表达式"><a class="header-anchor" href="#正则表达式"></a>正则表达式</h3><blockquote><p>匹配字符串中字符组合的模式</p></blockquote><h4 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regObj = <span class="regexp">/a/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regObj.<span class="title function_">test</span>(str)); <span class="comment">// 判断字符串是否匹配正则表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regObj.<span class="title function_">exec</span>(str)); <span class="comment">// 返回匹配到的第一个值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(regObj)); <span class="comment">// 返回匹配到的所有值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(regObj, <span class="string">&quot;b&quot;</span>)); <span class="comment">// 替换匹配到的所有值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(regObj)); <span class="comment">// 返回匹配到的第一个值的索引</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(regObj)); <span class="comment">// 返回匹配到的所有值的数组</span></span><br></pre></td></tr></table></figure><h3 id="修饰符"><a class="header-anchor" href="#修饰符"></a>修饰符</h3><ul><li><p>i 忽略大小写</p></li><li><p>g 全局匹配</p></li><li><p>m 多行匹配</p></li><li><p>u 匹配unicode编码</p></li><li><p>y 匹配开始位置</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
